<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java多线程学习笔记</title>
      <link href="/2020/07/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Java多线程学习笔记"><a href="#Java多线程学习笔记" class="headerlink" title="Java多线程学习笔记"></a>Java多线程学习笔记</h1><p>CAS</p><p>compare and swap，比较并且交换，同compare and exchange</p><p> <img src="../work/笔记/imgs/image-20200726215411185.png" alt="image-20200726215411185" style="zoom:50%;"></p><p>CAS可以在没有加锁的情况下，保值多线程的一致性。</p><p>如何解决ABA问题：</p><ol><li>加版本号</li><li>使用一个bool类型作标记</li><li>没有影响的话，可以不考虑此问题</li></ol><p>CAS如何实现的</p><p>hotspot源码，cpp内，调用了汇编指令cmpxchg，如果是多核CPU，还需要lock</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock cmpxchg 指令</span><br></pre></td></tr></table></figure><p>所以，<code>cmpxchg</code>本身是非原子性的</p><p>硬件：</p><p>lock指令在执行后面的时候锁定一个<code>北桥信号</code>，不采用锁总线的方式</p><hr><p>对象在内存中的布局</p><p>new Object()在内存占多少字节</p><p>使用Open JDK的工具JOL（Java Object Layout），Maven导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();</span><br><span class="line">System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br></pre></td></tr></table></figure><p>  输出：</p><p><img src="../work/笔记/imgs/image-20200726222016355.png" alt="image-20200726222016355" style="zoom:50%;"></p><p>对象在内存中的布局：</p><p><img src="../work/笔记/imgs/image-20200726222735685.png" alt="image-20200726222735685" style="zoom:50%;"></p><p>普通对象说明：</p><ul><li>markword + 指针类型，加起来是对象头</li><li>关于锁（synchronized）的信息都存在markword中</li><li>指针类型指向所属的类</li><li>实例数据存的是成员变量</li><li>对齐是保证对象内存大小可以被8整除，使得总线读取更快</li></ul><p>查看Java命令行参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -XX:+PrintCommandLineFlags -version</span></span><br><span class="line"></span><br><span class="line">-XX:G1ConcRefinementThreads=4 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:MinHeapSize=6815736 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC</span><br><span class="line">java version "14" 2020-03-17</span><br><span class="line">Java(TM) SE Runtime Environment (build 14+36-1461)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 14+36-1461, mixed mode)</span><br></pre></td></tr></table></figure><p>对<code>new Object()</code>内存布局的解释：</p><ul><li>前两行：合计是markword，共8字节</li><li>第三行，指针，指向类，4字节（补充：64位系统指针应该是8字节，但是被ClassPoniter压缩至4字节）</li><li>第四行：补齐，由于不能被8整除，补齐4字节，即loss due to the next… </li><li>由于没有成员变量，实例数据部分0字节</li></ul><p>面试题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o = new Object();在内存中占有多少字节？ -- 顺丰</span><br></pre></td></tr></table></figure><p>答：管理synchronized等信息的markword 8字节；如果开启了ClassPointer的压缩，类型指针占4字节；成员变量没有，所以0字节；合计12字节，由于不能被8整除，补齐至16字节。如果没有开启ClassPointer的压缩，类型指针占8个，那么就正好16字节，不需要补齐。</p><hr><p>分析这段代码的内存布局，和之前的<code>new Object()</code>作个对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(o) &#123;</span><br><span class="line">    System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="../work/笔记/imgs/image-20200726225404529.png" alt="image-20200726225404529" style="zoom:50%;"></p><p>注意第一行value的区别，说明锁信息是保存在对象的markword内的。</p><hr><p>锁升级：</p><p>new - 偏向锁 - 轻量级锁（无锁 == 自旋锁、自适应自旋）- 重量级锁</p><p><img src="../work/笔记/imgs/image-20200726233046984.png" alt="image-20200726233046984" style="zoom:50%;"></p><p>由上图可知，<code>锁状态</code>、<code>GC标记</code>、<code>分代年龄</code>都是存在对象的markword的8字节内的</p><p>分代年龄：</p><p>每次GC，如果对象没有被回收，则分代年龄+1，达到一定值（PS+PO GC默认15; CMS GC默认6），则对象从年轻代到老年代</p><p><strong>注意：</strong></p><p>由于分代年龄是4bit表示的，最大值是1111（二进制），即1 + 2 + 4 + 8 = 15，所以将值调到大于15是没有用的</p><p>自旋锁进一步升级的条件：</p><ol><li>有线程自旋超过10次</li><li>在自旋的线程超过总核数的1/2</li></ol><p>自适应自旋锁可以自动调整以上的两个值</p><hr><p>用户态和内核态</p><p>用户态：ring3 应用程序大多跑着用户态</p><p>内核态：ring0 申请锁需要在内核态进行</p><p>在内核态申请到锁之后，线程会进入一个阻塞的队列，wait的线程不消耗资源，区别于自旋锁依赖频繁的CAS会消耗大量CPU资源</p><hr><p>锁降级：</p><p>锁降级只存在在GC的时候，其他线程已经不持有锁，只发生在VMThread访问的时候，所以没意义，一般认为不存在降级</p><hr><p>锁消除</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(str1).append(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>虽然<code>StringBuffer</code>是线程安全的，即<code>append()</code>方法是被synchronized修饰的，但是在本add方法内，锁会被消除。原因是，sb是局部变量而不是成员变量（栈私有），不可能存在竞争，所以sb对象的锁会被JVM消除。</p><hr><p>锁粗化</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        sb.append(str);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>JVM检测到一连串对同一对象的加锁和解锁，JVM会粗化加锁范围，使得锁只需要加1次。</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
          <category> Java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 锁机制 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅聊企业文化——读《浪潮之巅》有感</title>
      <link href="/2020/05/25/%E6%B5%85%E8%81%8A%E4%BC%81%E4%B8%9A%E6%96%87%E5%8C%96%E2%80%94%E2%80%94%E8%AF%BB%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/2020/05/25/%E6%B5%85%E8%81%8A%E4%BC%81%E4%B8%9A%E6%96%87%E5%8C%96%E2%80%94%E2%80%94%E8%AF%BB%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在《浪潮之巅》第四版的下册中（原《硅谷之谜》），开篇第一章即是《挑战者——Google公司》。讨论Google总会给年轻人一种充满热血的感觉，因为这家企业确实是非常硅谷，非常叛逆。</p><a id="more"></a><p>它和其他的IT领域的大企业不同，不同于传统的IBM靠硬件设备赚钱；也不同于Microsoft和Oracle靠卖软件；Google几乎全部收入都来自于广告，也正是这样，Google才能始终贯彻自身的<strong>工程师文化</strong>，Google愿意将大把资金投入到回报遥遥无期的<a href="https://x.company/" target="_blank" rel="noopener">Google X Lab</a>，去研发<code>Google Glass</code>和<code>Waymo</code>智能驾驶等未来项目。</p><blockquote><p><strong>X</strong>，前称为“<strong>Google X</strong>”，是一个谷歌公司运行的秘密实验室，位于加利福尼亚州旧金山湾区某处。</p><p>——维基百科</p></blockquote><p>据说在硅谷，<code>Uber</code>被称为一家996公司，而<code>Google</code>则是一家对员工无比关怀的”养老公司”。因为这些天才工程师们的目标是“改变世界”，而996并不能提升效率。所以Google的员工的工作氛围非常的轻松，如丰厚的零食和之前的20%time。</p><p>另一个说明Google重视自己员工的例子是“All-hands meeting”（每周全体员工和领导层一起交流的大会），虽然据说在2019年也已经被取消了，不过这就是后话了。</p><p>之前网络上甚至有些人使用“谷人希”（谷歌，人类的希望）来形容这家公司，虽然充满了些许夸张，但是确实可以看出在广大网民眼中，Google公司是创新金字塔顶端的存在，尤其是在Microsoft多年的封闭和百度的负面不断的背景下，Google的魔幻魅力吸引了大批崇拜者。</p><h2 id="Google与工程师文化"><a href="#Google与工程师文化" class="headerlink" title="Google与工程师文化"></a>Google与工程师文化</h2><blockquote><p>Google的很多特点，追根溯源都可以归结为工程师文化。</p></blockquote><p>吴军博士在《浪潮之巅》中分析称，不同的企业文化决定了他们的竞争优势和劣势。确实，Google的工程师文化为之吸纳了大量的人才，甚至是天才，尤其是在其早期阶段的时候。</p><p>拥有大量天才工程师的Google，几乎成为了开源界的灯塔，诸如V8、K8s这些改变行业和领域的软件都和Google的贡献密不可分。这也使Google获得了巨大的先发优势，没有人会想去取代V8，K8s也几乎是行业规范，还有其他一大批开源软件源自于Google的论文，如Hadoop。</p><p>但是一个公司的平均智商，总是会随着其体量不断增大而下降的，直到一个稳定线上。曾经的Google还没有如此庞大，以至于他们员工能够拥有20%的独立时间（如Go编程语言就是诞生于20%时间的业余项目）。随着平均智商的下降，Google的绝大部份员工的20%时间已经很难再创造出什么太有价值的东西。所以20%时间制度被取消可以认为是一种必然。当然，这肯定也和近几年Google单纯靠广告收入已经不再好过有关。</p><blockquote><p>连Google自己的员工创办的公司都不使用Google的云计算服务。</p></blockquote><p>相比于将顾客摆在第一位的Amazon，Google在企业服务方面显然是出了问题。Amazon虽然对待自己的员工抠门，但是AWS良好的服务却让他们的产品占据云计算市场的大半壁江山。</p><p>技术优势和天才工程师确实能够帮助Google称为科技行业的先锋，但是在云计算服务这个行业，Google的技术优势看起来比起Amazon并没有高出多少。在这样一个没有技术先发优势的情况下，显然重视客户服务的企业更容易获得市场。</p><p>通过Google的成与败，我们可以看到工程师文化确实如吴军博士说的，成为了Google的萧何，如今的Google，在云计算领域的对手有Microsoft和Amazon；在操作系统领域对手有Apple和Microsoft；在量子计算领域对手有IBM…无论何种方向，Google都难以找到10年前的技术统治地位，这或许也是为什么<code>All-hands meeting</code>会被取消吧，因为Google可能要重新在工程师的浪漫和客户服务之间，寻找新的平衡点了。</p><h2 id="由工程师文化而思考编程语言之争"><a href="#由工程师文化而思考编程语言之争" class="headerlink" title="由工程师文化而思考编程语言之争"></a>由工程师文化而思考编程语言之争</h2><blockquote><p>编程语言只有两种，被人骂的和没人用的。</p></blockquote><p>确实在社区里面看到的对<code>JavaScript</code>的批评太多了，由于历史原因，js的早期版本存在大量的设计问题，直到如今也没有被全部解决。当然，这也为<code>TypeScript</code>的崛起提供了契机。</p><p>但是无论js被如何骂，谁也改变不了的事实就是，js已经成为了事实上的全栈“全能”语言。从web前端到服务端，从移动端到游戏，js已经处处可见了。</p><p>从工程师文化来说的话，有无数语言的设计比js更“优雅”，但是他们只能要么成为小众领域的选择，要么干脆成为玩具……</p><p>即是对比<code>Python</code>和<code>Ruby</code>这两个非常相似的语言也可以得出一样的结论，无论<code>Ruby</code>是不是一款能让程序员”快乐”的语言，他都不能改变他市场占有率不断走低，而Py如日中天的事实。</p><h2 id="产品经理-or-顾客至上"><a href="#产品经理-or-顾客至上" class="headerlink" title="产品经理 or 顾客至上"></a>产品经理 or 顾客至上</h2><blockquote><p>如果當初我去問顧客到底想要什麼，他們會回答說要一匹跑得更快的馬。——福特汽车创始人：亨利‧福特</p></blockquote><p>吴军博士大致将企业文化分为如下几种，且一个公司很难同时拥有多种企业文化，因为无法兼顾：</p><ul><li>工程师文化，代表是：Google、Microsoft、华为</li><li>产品经理文化，代表是：Apple、FaceBook、腾讯</li><li>销售文化，代表是：亚马逊、阿里巴巴</li></ul><p>而按照三方利益分类，则是这样：</p><ul><li>员工利益，代表是：星巴克、Google、腾讯</li><li>消费者利益，代表是：亚马逊、阿里巴巴</li><li>投资人利益，代表如巴菲特投资的一系列企业</li></ul><p>个人则倾向于，在产品的设计方面，保持自己的核心审美，而不是一味讨好客户，因为客户口味总是不一样的，没有清晰的产品定位，一味听从客户意见，注定搞出四不像。</p><p>正如Go语言创始人之一，<code>Rob Pike</code>所说，Go语言的最大成就就是始终保证了对最初方向对坚持。仅从这个意义上说的话，他达成了他的使命——纠正C++，因为现代C++已经复杂到诸多行业精英都嫌弃了。。。</p><p>所以，顾客至上，应该是服务上的至上，而在提供什么样的产品上，产品经理应该保持独立的思考，而不是一味地询问你的顾客。</p>]]></content>
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java有意思的现象——执行注释后的代码</title>
      <link href="/2020/05/08/Java%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%8E%B0%E8%B1%A1%E2%80%94%E2%80%94%E6%89%A7%E8%A1%8C%E6%B3%A8%E9%87%8A%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/05/08/Java%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%8E%B0%E8%B1%A1%E2%80%94%E2%80%94%E6%89%A7%E8%A1%8C%E6%B3%A8%E9%87%8A%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>今天看到这样一个有意思的图片，给大家分享下：</p><p><img src="https://SherlockGy.github.io/img/image-20200508014429297.png" alt="image-20200508014429297" style="zoom:50%;"></p><p>问题来了，为什么代码里面已经被注释的部分也可以执行呢？</p><a id="more"></a><p>其实也很简单，查一下<code>\u000d</code>是个啥玩意就行了，果不其然，这个代表<code>回车（CR：Return）</code>；而另一个类似的<code>\u000a</code>则是<code>换行（LF：Line Feed）</code>。其实也就是<code>\r</code>和<code>\n</code>啦。</p><p>而Java在解析代码的时候，是会按照Unicode编码去解析，而不是把它当作字符串。因此，注释自然是无效啦～</p><hr><p>额外试了下其他语言，这个用法在<code>Go</code>、<code>Python</code>、<code>Nim</code>等语言中并不可以哦！</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Java </tag>
            
            <tag> 趣事 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HHKB使用心得</title>
      <link href="/2020/05/07/HHKB%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2020/05/07/HHKB%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>这篇文章主要是在使用HHKB键盘的过程中的一些心得和技巧，属于不定期追加内容的形式</p><a id="more"></a><h2 id="大小写切换"><a href="#大小写切换" class="headerlink" title="大小写切换"></a>大小写切换</h2><p>很多Mac用户应该知道，如果我们使Mac的原生键盘的话，可以很方便地使用<code>Caps Lock</code>键来切换中英文。</p><p>但是由于HHKB键盘帮我们非常友好地把这个键给优化没了，所以我们只有两个选择了：</p><ul><li>使用软件改键</li><li>使用默认的替换按键</li></ul><p>其实HHKB并没有删除这个键的功能，可以通过<code>fn</code> + <code>tab</code>键的方式来起到相同的效果</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 外设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HHKB </tag>
            
            <tag> 键盘 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go实现最简单的超时控制</title>
      <link href="/2020/05/07/Go%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/05/07/Go%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;(ch)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line">fmt.Println(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">5</span>):</span><br><span class="line">fmt.Println(<span class="string">"time out"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 示例代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go实现最简单的在线视频播放</title>
      <link href="/2020/04/28/Go%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
      <url>/2020/04/28/Go%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<p>如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">video</span><span class="params">(response http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">response.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"video/mp4"</span>)</span><br><span class="line">file, err := os.Open(<span class="string">"/Users/sherlockgy/Downloads/1.mp4"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"文件打开异常..."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">http.ServeContent(response, request, <span class="string">"test"</span>, time.Now(), file)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/video"</span>, video)         <span class="comment">// 设置访问的路由</span></span><br><span class="line">err := http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>) <span class="comment">// 设置监听的端口</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/04/22/%E4%BD%BF%E7%94%A8ZK%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/04/22/%E4%BD%BF%E7%94%A8ZK%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      <content type="html"><![CDATA[<h1 id="使用ZK实现最简单分布式锁"><a href="#使用ZK实现最简单分布式锁" class="headerlink" title="使用ZK实现最简单分布式锁"></a>使用ZK实现最简单分布式锁</h1><p>分布式锁也是ZK的常见应用场景。我们可以利用其临时节点来实现分布式锁。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/04/18/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/18/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="云原生学习笔记"><a href="#云原生学习笔记" class="headerlink" title="云原生学习笔记"></a>云原生学习笔记</h1><p> [TOC]</p><h2 id="一、技术发展历史"><a href="#一、技术发展历史" class="headerlink" title="一、技术发展历史"></a>一、技术发展历史</h2><ul><li>2004～2007：Google大规模使用容器（cgroups）技术</li><li>2008.01：cgroups技术合并进Linux主干，为容器化打下基础</li><li>2013.03：Docker项目正式发布</li><li>2014.06：Kubernetes项目发布</li><li>2015.07：CNCF（云原生基金会）成立，22个创始成员，Kubernetes成为第一个CNCF项目</li><li>2017.07：CNCF成立2周年，170个会员，14个基金会项目</li><li>2018.07：CNCF成立3周年，195个会员，19个基金会项目，11个孵化项目</li></ul><h2 id="二、云原生的定义"><a href="#二、云原生的定义" class="headerlink" title="二、云原生的定义"></a>二、云原生的定义</h2><p>容器技术的革命性类似于<code>集装箱</code>的革命性。</p><p>容器技术可以使应用以<code>自包含</code>的方式定义，从而更敏捷、可拓展、可复制。</p><p>云原生是一条最佳路径（最佳实践）。这条路径能：</p><ul><li>低心智负担的、</li><li>敏捷的、</li><li>以可拓展、可复制的方式</li></ul><p>最大化地利用云的能力，发挥最大价值。</p><p>容器技术就是云原生技术的核心底盘。</p><h2 id="三、云原生思想的两个理论基础"><a href="#三、云原生思想的两个理论基础" class="headerlink" title="三、云原生思想的两个理论基础"></a>三、云原生思想的两个理论基础</h2><h3 id="1-不可变基础设施"><a href="#1-不可变基础设施" class="headerlink" title="1. 不可变基础设施"></a>1. 不可变基础设施</h3><p>目前实现：容器镜像</p><p>解释：我们的跑应用的基础设施应该是==不可变==的，是自包含、自描述且可以随时迁移的。</p><h4 id="基础设施向云演进的过程"><a href="#基础设施向云演进的过程" class="headerlink" title="基础设施向云演进的过程"></a>基础设施向云演进的过程</h4><p><strong>传统应用的基础设施：</strong></p><p>可变，如SSH连接到服务器，手动升级或降级软件包，逐个服务器调整配置文件，新代码直接部署到现有服务器上</p><p><strong>对云友好的应用基础设施：</strong></p><p>不可变，如部署完成之后基础设施不会被修改。如需更新，则更改公共镜像构建新服务以替换旧服务。验证后，新服务投入使用，旧服务退役。</p><h3 id="2-云应用编排理论"><a href="#2-云应用编排理论" class="headerlink" title="2. 云应用编排理论"></a>2. 云应用编排理论</h3><p>目前实现：容器设计模式（Google提出）</p><h2 id="四、容器与镜像"><a href="#四、容器与镜像" class="headerlink" title="四、容器与镜像"></a>四、容器与镜像</h2><p>容器与普通的操作系统进程，有什么区别呢？</p><p><img src="https://SherlockGy.github.io/img/image-20200418213049729.png" alt="image-20200418213049729"></p><p>由于进程是共享同一份文件系统，导致权限较高的进程会影响到权限较低的进程的文件操作，形成相互干扰；</p><p>由于进程和进程间的依赖可能存在冲突，会给运维带来压力；</p><p>由于进程间使用同样的宿主机的资源，存在资源抢占，权限低的进程可能会因为抢占不到资源而无法提供服务。</p><h3 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h3><p>容器，是一个视图隔离、资源可限制、独立文件系统的进程集合。</p><ul><li>视图隔离 - 如能看见其他进程；独立主机名等等</li><li>控制资源使用率 - 如2G内存大小；CPU使用个数等等</li></ul><h3 id="什么是镜像？"><a href="#什么是镜像？" class="headerlink" title="什么是镜像？"></a>什么是镜像？</h3><p>运行容器所需要的所有文件的集合，就是容器镜像</p><p>Dockerfile - 描述镜像构建步骤</p><p>构建步骤所产生出文件系统的变化 - changeset</p><ul><li>类似disk snapshot</li><li>提高分发效率，减少磁盘压力</li></ul><h3 id="容器的生命周期"><a href="#容器的生命周期" class="headerlink" title="容器的生命周期"></a>容器的生命周期</h3><h4 id="单进程模型"><a href="#单进程模型" class="headerlink" title="单进程模型"></a>单进程模型</h4><ol><li>init进程的生命周期 = 容器的生命周期</li><li>运行期间可以执行exec执行运维操作，exec进程也归init进程管理，当init进程退出，其管理的其他进程皆退出</li></ol><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><ol><li>独立于容器的生命周期</li><li>数据卷 - docker volume vs bind</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Golang与UTF-8</title>
      <link href="/2020/04/17/Golang%E4%B8%8EUTF-8/"/>
      <url>/2020/04/17/Golang%E4%B8%8EUTF-8/</url>
      <content type="html"><![CDATA[<h1 id="Golang与UTF-8"><a href="#Golang与UTF-8" class="headerlink" title="Golang与UTF-8"></a>Golang与UTF-8</h1><p>我们在浏览器抓包的时候，有时候会发现类似这样的一串字符串：</p><blockquote><p>\350\241\250\346\203\205</p></blockquote><p>当然我们都知道这多半是<code>UTF-8</code>表示的汉字。那么在Go语言当中，我们要怎么转换他们呢？</p><p>这里直接贴一下代码，以作记录。</p><p><strong>注意：</strong>这里的数字其实是<code>8进制</code>表示的！</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将这样的8进制表示的UTF-8字符串恢复成可读状态</span></span><br><span class="line">str := <span class="string">"\350\241\250\346\203\205"</span></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, str) <span class="comment">// out：表情</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用range遍历“表情”，会发现一个汉字就对应一个编码</span></span><br><span class="line">str2 := <span class="string">"表情"</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> str2 &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%o "</span>, c) <span class="comment">// 104150 60305</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用fori遍历“表情”，每个汉字对应3个数字，正好和上面的一串字符吻合</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str2); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%o "</span>, str2[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println() <span class="comment">// 350 241 250 346 203 205 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 编码 </tag>
            
            <tag> UTF-8 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>给macOS的访达（Finder）配置快捷键快速启动</title>
      <link href="/2020/04/16/%E7%BB%99macOS%E7%9A%84%E8%AE%BF%E8%BE%BE%EF%BC%88Finder%EF%BC%89%E9%85%8D%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8/"/>
      <url>/2020/04/16/%E7%BB%99macOS%E7%9A%84%E8%AE%BF%E8%BE%BE%EF%BC%88Finder%EF%BC%89%E9%85%8D%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="给macOS的访达（Finder）配置快捷键快速启动"><a href="#给macOS的访达（Finder）配置快捷键快速启动" class="headerlink" title="给macOS的访达（Finder）配置快捷键快速启动"></a>给macOS的访达（Finder）配置快捷键快速启动</h1><p>[TOC]</p><h2 id="第一步，配置自动操作指令"><a href="#第一步，配置自动操作指令" class="headerlink" title="第一步，配置自动操作指令"></a>第一步，配置自动操作指令</h2><p>首先，打开macOS自带的这个小机器人工具：</p><p><img src="https://SherlockGy.github.io/img/image-20200416010727401.png" alt="image-20200416010727401"></p><p>然后点击<code>新建文稿</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416010812552.png" alt="image-20200416010812552"></p><p>文稿类型选择<code>快速操作</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416010848813.png" alt="image-20200416010848813"></p><p>选择<code>实用工具</code> -&gt; <code>开启应用程序</code>：</p><a id="more"></a><p><img src="https://SherlockGy.github.io/img/image-20200416011033107.png" alt="image-20200416011033107"></p><p>然后将开启应用程序拖拽进右侧。</p><p>将流程设置为如下参数，即：<code>没有输入</code>和<code>任何应用程序</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416011126942.png" alt="image-20200416011126942"></p><p>在下面的开启应用程序中，选择<code>新建变量</code>，再点击<code>其他</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416011328250.png" alt="image-20200416011328250"></p><p>然后选择<code>系统</code> -&gt; <code>资源库</code> -&gt; <code>coreServices</code> -&gt; <code>访达</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416011605639.png" alt="image-20200416011605639"></p><p><img src="https://SherlockGy.github.io/img/image-20200416011632447.png" alt="image-20200416011632447"></p><p>至此，本步骤完成。可以把该指令起名为<code>快捷启动访达</code>，保存退出，以便后续配置快捷键。</p><h2 id="第二步，给指令添加快捷键"><a href="#第二步，给指令添加快捷键" class="headerlink" title="第二步，给指令添加快捷键"></a>第二步，给指令添加快捷键</h2><p>打开<code>系统偏好设置</code>中的<code>键盘</code>：</p><p><img src="https://SherlockGy.github.io/img/image-20200416011849665.png" alt="image-20200416011849665"></p><p>然后按下图配置快捷键即可：</p><p><img src="https://SherlockGy.github.io/img/image-20200416011927870.png" alt="image-20200416011927870"></p><p><strong>建议：</strong>不要配置太简单的快捷键，如：<code>command + E</code>，避免部分应用程序的快捷键会冲突，如：<code>Chrome</code></p><p><a href="https://www.youtube.com/watch?v=9tEvq-QJFlE" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Mac </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang单元测试</title>
      <link href="/2020/04/14/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/04/14/Golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="Golang单元测试"><a href="#Golang单元测试" class="headerlink" title="Golang单元测试"></a>Golang单元测试</h1><p>[TOC]</p><h2 id="一、约定的条件"><a href="#一、约定的条件" class="headerlink" title="一、约定的条件"></a>一、约定的条件</h2><ol><li>包含单元测试的代码文件必须以<code>_test.go</code>结尾，否则测试框架并不会读区该文件作为测试代码。</li><li>单元测试文件名<code>_test.go</code>前面的部分建议是被测试的方法所在代码文件的文件名。</li><li>单元测试的函数名必须以<code>Test</code>开头，注意首字母是大写的。如果不满足则测试框架不会执行该函数。</li><li>函数名最好是Test+要测试的方法函数名，如<code>TestAdd</code>，表示测试的是<code>Add</code>这个这个函数。</li><li>测试函数的签名必须接收一个指向<code>testing.T</code>或<code>testing.B</code>类型的指针，且无返回值。</li></ol><h2 id="二、简单的样例"><a href="#二、简单的样例" class="headerlink" title="二、简单的样例"></a>二、简单的样例</h2><p>测试文件：test/demo_test.go</p><p>代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> result := Add(<span class="number">1</span>, <span class="number">2</span>); result != <span class="number">3</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"测试Add函数报错，参数分别是%v and %v，返回结果为%v，期望是%v"</span>, <span class="number">1</span>, <span class="number">2</span>, result, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、如果对测试函数的执行顺序有要求"><a href="#三、如果对测试函数的执行顺序有要求" class="headerlink" title="三、如果对测试函数的执行顺序有要求"></a>三、如果对测试函数的执行顺序有要求</h2><blockquote><p>将单个测试用例的首字母小写，这样这个用例就不会被测试框架调用了</p><p>我们将测试方法传递给t的Run()方法，从而实现指定顺序执行单元测试</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testAdd1</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> result := Add(<span class="number">1</span>, <span class="number">2</span>); result != <span class="number">3</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"测试Add函数报错，参数分别是%v and %v，返回结果为%v，期望是%v"</span>, <span class="number">1</span>, <span class="number">2</span>, result, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testAdd2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> result := Add(<span class="number">3</span>, <span class="number">4</span>); result != <span class="number">7</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"测试Add函数报错，参数分别是%v and %v，返回结果为%v，期望是%v"</span>, <span class="number">1</span>, <span class="number">2</span>, result, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"test1"</span>, testAdd1)</span><br><span class="line">t.Run(<span class="string">"test2"</span>, testAdd2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="四、测试开始前的统一初始化等操作"><a href="#四、测试开始前的统一初始化等操作" class="headerlink" title="四、测试开始前的统一初始化等操作"></a>四、测试开始前的统一初始化等操作</h2><p>如果我们需要在单元测试开始前进行统一的初始化操作，如：数据准备、连接数据库等，就需要用到<code>*testing.M</code>。</p><p>在现有用例的基础上增加这个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"统一初始化..."</span>)</span><br><span class="line">m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、基准测试，测试性能–benchmark"><a href="#五、基准测试，测试性能–benchmark" class="headerlink" title="五、基准测试，测试性能–benchmark"></a>五、基准测试，测试性能–benchmark</h2><blockquote><ol><li>benchmark函数必须以Benchmark开头</li><li>benchmark的测试case一般会跑b.N次，并且每次执行都是这样</li><li>实际执行时，会调整b.N的次数，直到执行时间达到稳态</li><li>b.ResetTimer是重置计时器，这样可以避免for循环之前的初始化代码的干扰</li><li>被测试的代码要放到循环里</li><li>b.N是基准测试框架提供的，表示循环的次数，因为需要反复调用测试的代码，才可以评估性能</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPrint</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">Print()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以这样的方式进行执行</span></span><br><span class="line"><span class="comment"># .表示运行所有的基准测试</span></span><br><span class="line">go <span class="built_in">test</span> -bench=.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决升级macOS catalina后VMware黑屏问题</title>
      <link href="/2020/02/15/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7MacOS%20catalina%E5%90%8EVMware%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/15/%E8%A7%A3%E5%86%B3%E5%8D%87%E7%BA%A7MacOS%20catalina%E5%90%8EVMware%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><code>VMware</code>软件的Mac版本名为<code>VMware Fusion</code>，该软件在你的Mac电脑安装了目前最新的<code>macOS</code>系统：<code>catalina</code>后，会出现黑屏的问题，而当你挂起虚拟机后，又可以看到虚拟机画面。这是由于自从<code>catalina</code>版本开始，应用程序需要自主申请各项权限，而旧版的<code>VMware</code>并不会申请<strong>屏幕录制</strong>权限，这就导致了黑屏的问题。</p><p>要想解决该问题，有三种方法：</p><ol><li>将操作系统回退到之前版本，如果你有时间机器的备份，这应该比较容易</li><li>升级<code>VMware</code>，但是如果你是破解版，会出现破解失败，需要付费的情况</li><li>手动赋予<code>VMware</code>屏幕录制权限</li></ol><p>这里重点介绍如何手动赋予<code>VMware</code>屏幕录制权限：</p><a id="more"></a><h2 id="一、关闭MacOS的rootless机制"><a href="#一、关闭MacOS的rootless机制" class="headerlink" title="一、关闭MacOS的rootless机制"></a>一、关闭MacOS的rootless机制</h2><ol><li>重启你的Mac，同时在<strong>白色苹果logo</strong>弹出之前就按住<strong>command</strong>和<strong>r</strong>键</li><li>选择菜单（menu）上面的实用工具（Utilities），选择<strong>终端（Terminal）</strong></li><li>输入以下命令关闭rootless机制，然后重启Mac</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭rootless机制</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> csrutil <span class="built_in">disable</span></span></span><br></pre></td></tr></table></figure><h2 id="二、手动赋予VMware屏幕录制权限"><a href="#二、手动赋予VMware屏幕录制权限" class="headerlink" title="二、手动赋予VMware屏幕录制权限"></a>二、手动赋予<code>VMware</code>屏幕录制权限</h2><p>依次在终端键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tccutil reset All com.vmware.fusion</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sqlite3 <span class="string">"/Library/Application Support/com.apple.TCC/TCC.db"</span> <span class="string">'insert into access values ("kTCCServiceScreenCapture", "com.vmware.fusion", 0, 1, 1, "", "", "", "UNUSED", "", 0,1565595574)'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sqlite3 <span class="string">"/Library/Application Support/com.apple.TCC/TCC.db"</span> <span class="string">'insert into access values ("kTCCServiceListenEvent", "com.vmware.fusion", 0, 1, 1, "", "", "", "UNUSED", "", 0,1565595574)'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sqlite3 <span class="string">"/Library/Application Support/com.apple.TCC/TCC.db"</span> <span class="string">'insert into access values ("kTCCServicePostEvent", "com.vmware.fusion", 0, 1, 1, "", "", "", "UNUSED", "", 0,1565595574)'</span></span></span><br></pre></td></tr></table></figure><p>此时黑屏问题应该已经解决，可检查<strong>设置</strong> -&gt; <strong>安全性和隐私</strong> -&gt; <strong>屏幕录制权限</strong>是否赋予给了VMware。如问题依然存在，麻烦查询其他方案解决。</p><h2 id="三、重新打开rootless机制"><a href="#三、重新打开rootless机制" class="headerlink" title="三、重新打开rootless机制"></a>三、重新打开rootless机制</h2><ol><li>重启你的Mac，同时在<strong>白色苹果logo</strong>弹出之前就按住<strong>command</strong>和<strong>r</strong>键</li><li>选择菜单（menu）上面的实用工具（Utilities），选择<strong>终端（Terminal）</strong></li><li>输入以下命令启动rootless机制，然后重启Mac</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重新打开rootless机制</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> csrutil <span class="built_in">enable</span></span></span><br></pre></td></tr></table></figure><h2 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h2><p><a href="https://www.cnblogs.com/pyyu/p/11663295.html" target="_blank" rel="noopener">文章1</a><br><a href="http://tonglei.org/%E8%A7%A3%E5%86%B3macos-catalina-%E5%8D%87%E7%BA%A7%E5%AF%BC%E8%87%B4vmware%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">文章1</a></p>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> 问题fix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Fix </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac如何卸载旧版Java</title>
      <link href="/2020/02/09/Mac%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E6%97%A7%E7%89%88Java/"/>
      <url>/2020/02/09/Mac%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E6%97%A7%E7%89%88Java/</url>
      <content type="html"><![CDATA[<p>卸载步骤：</p><ol><li>删除终端命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span><br><span class="line">sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPane</span><br></pre></td></tr></table></figure><ol start="2"><li>删除JDK包</li></ol><p>先查看已安装了哪些版本的Java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /Library/Java/JavaVirtualMachines/</span><br></pre></td></tr></table></figure><p>再进入目录，删除对应版本的Java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Java/JavaVirtualMachines/</span><br><span class="line">sudo rm -rf jdk[_update].jdk</span><br></pre></td></tr></table></figure><ol start="3"><li>删除偏好设置面板图标</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java踩坑——Double类型转String变成了科学计数法怎么解决</title>
      <link href="/2019/11/28/Java%E8%B8%A9%E5%9D%91%E2%80%94%E2%80%94Double%E8%BD%ACString%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/"/>
      <url>/2019/11/28/Java%E8%B8%A9%E5%9D%91%E2%80%94%E2%80%94Double%E8%BD%ACString%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>现在有一个场景,需要将一个<code>Double</code>类型的字段转换成字符串然后写入文件,不过在某些时候,数字会出现以科学计数法的形式来表示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">0.0005</span>;</span><br><span class="line">System.out.println(String.valueOf(scale)); <span class="comment">// 5.0E-4</span></span><br><span class="line">System.out.println(scale + <span class="string">""</span>);            <span class="comment">// 5.0E-4</span></span><br><span class="line">System.out.println(scale);                 <span class="comment">// 5.0E-4</span></span><br></pre></td></tr></table></figure><p>如上,在尝试了几种容易想到的方法后,发现均不可行.后来经过搜索和更多次尝试,整理出几种方案:</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>使用<code>java.math</code>包的<code>BigDecimal</code>类.效果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">0.0005</span>;</span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(scale);</span><br><span class="line">System.out.println(bigDecimal); <span class="comment">// 0.0005000000000000000104083408558608425664715468883514404296875</span></span><br></pre></td></tr></table></figure><p>由于<code>BigDecimal</code>直接使用不符合我们对小数点后长度的需求,就需要使用<code>String.format()</code>的方式进行转换:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">0.0005</span>;</span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(scale);</span><br><span class="line">System.out.println(String.format(<span class="string">"%.4f"</span>, bigDecimal)); <span class="comment">// 0.0005</span></span><br></pre></td></tr></table></figure><p>至此问题貌似是解决了,但是依然很不放心.主要原因在于这种方式还是有可能导致误差:毕竟本来我的数字就是标准的0.0005,而BigDecimal因为精度原因需要做截取.</p><p>虽然目前看似没有问题,但是如果出现BigDecimal将结果输出成:0.0004999999999999之类的怎么办呢?</p><p>这个时候又想到了四舍五入之类的方法,但是总感觉与真正的方法相去越来越远:这么简单的一个转换,不应该搞得这么复杂,于是有了方案二</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>这一次是使用<code>java.text</code>包下的<code>DecimalFormat</code>类,具体实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">0.0005</span>;</span><br><span class="line">DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.####"</span>);</span><br><span class="line">System.out.println(decimalFormat.format(scale)); <span class="comment">// 0.0005</span></span><br></pre></td></tr></table></figure><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>后来想起来,发现其实上面两种方法都是庸人自扰,属于脑子一下没转过弯来才会干的事…因为实际上问题可以非常简单地解决:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">0.0005</span>;</span><br><span class="line">String scaleStr = String.format(<span class="string">"%.4f"</span>, scale);</span><br><span class="line">System.out.println(scaleStr); <span class="comment">// 0.0005</span></span><br></pre></td></tr></table></figure><p>好吧,果然这种问题的解决办法一定是非常简单的…</p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis系统学习</title>
      <link href="/2019/11/28/Redis%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/28/Redis%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Redis系统学习"><a href="#Redis系统学习" class="headerlink" title="Redis系统学习"></a>Redis系统学习</h1><h2 id="一、什么是Redis"><a href="#一、什么是Redis" class="headerlink" title="一、什么是Redis?"></a>一、什么是Redis?</h2><ol><li>Redis是用C语言开发的一个开源、免费、高性能<strong>键值对</strong>内存数据库</li><li>它提供5种数据类型来<strong>存储值</strong>:字符串类型、散列类型、列表类型、集合类型、有序集合类型</li><li>他是一种NoSQL数据库</li><li>可用于缓存、内存数据库、消息队列等</li></ol><h3 id="1-1-什么是NoSQL"><a href="#1-1-什么是NoSQL" class="headerlink" title="1.1 什么是NoSQL?"></a>1.1 什么是NoSQL?</h3><ul><li>NoSQL,即Not-Only-SQL,泛指<strong>非关系型数据库</strong></li><li>NoSQL数据库为了解决<strong>高并发</strong>、<strong>高可用</strong>、<strong>高可拓展</strong>、<strong>大数据存储</strong>问题而产生的数据库解决方案</li><li>NoSQL可以作为关系型数据库的良好补充,但<strong>不是替代关系型数据库</strong></li></ul><h3 id="1-2-NoSQL数据库分类"><a href="#1-2-NoSQL数据库分类" class="headerlink" title="1.2 NoSQL数据库分类"></a>1.2 NoSQL数据库分类</h3><h4 id="1-2-1-键值存储数据库"><a href="#1-2-1-键值存储数据库" class="headerlink" title="1.2.1 键值存储数据库"></a>1.2.1 键值存储数据库</h4><p>相关产品: Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</p><p>典型应用: 内容<strong>缓存</strong>,主要处理大量数据的<strong>高访问负载</strong></p><p>数据模型: 一系列键值对</p><p>优势: 快速<strong>查询</strong></p><p>劣势: 存储的数据缺少结构化</p><h4 id="1-2-2-列存储数据库"><a href="#1-2-2-列存储数据库" class="headerlink" title="1.2.2 列存储数据库"></a>1.2.2 列存储数据库</h4><p>相关产品: Cassardra、HBase、Riak</p><p>典型应用: <strong>分布式</strong>的文件系统</p><p>数据模型: 以列簇式存储,将同一列数据存在一起</p><p>优势: 查找速度快、可拓展性强,更容易进行分布式拓展</p><p>劣势: 功能相对局限</p><h4 id="1-2-3-文档型数据库"><a href="#1-2-3-文档型数据库" class="headerlink" title="1.2.3 文档型数据库"></a>1.2.3 文档型数据库</h4><p>说明: 与Key-Value类似,Value是<strong>结构化</strong>的,即<strong>可嵌套</strong></p><p>相关产品: Mongo DB、Couch DB</p><p>典型应用: Web应用</p><p>数据模型: 一系列键值对</p><p>优势: 数据结构要求不严格</p><h3 id="1-3-Redis的应用场景"><a href="#1-3-Redis的应用场景" class="headerlink" title="1.3 Redis的应用场景"></a>1.3 Redis的应用场景</h3><ul><li>内存数据库(登陆信息、购物车信息、用户浏览记录等)</li><li><strong>缓存服务器</strong>(商品数据、广告数据等)</li><li>解决分布式集群架构中的session分离问题(session共享)</li><li>任务队列(秒杀、抢购、12306等)</li><li>支持发布-订阅的消息模式</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理(精确到毫秒)</li></ul><h2 id="二、安装启动"><a href="#二、安装启动" class="headerlink" title="二、安装启动"></a>二、安装启动</h2><h3 id="2-1-解压二进制安装包"><a href="#2-1-解压二进制安装包" class="headerlink" title="2.1 解压二进制安装包"></a>2.1 解压二进制安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xf redis-3.2.9.tar.gz <span class="comment"># 加上-z参数可以显示解压进度</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-3.2.9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make <span class="comment"># 需要安装GCC</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install PREFIX=/redis <span class="comment"># 指定安装目录安装</span></span></span><br></pre></td></tr></table></figure><h3 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h3><h4 id="2-2-1-前端启动"><a href="#2-2-1-前端启动" class="headerlink" title="2.2.1 前端启动"></a>2.2.1 前端启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接运行bin/redis-server将以前端模式启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./redis-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ctrl + c关闭</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-守护进程启动"><a href="#2-2-2-守护进程启动" class="headerlink" title="2.2.2 守护进程启动"></a>2.2.2 守护进程启动</h4><ol><li>修改<code>redis-conf</code>配置文件,将文件中的<code>daemonize</code>项改为<code>yes</code></li><li>bind 127.0.0.1改为bind &lt;redis实例所在机器的真实IP&gt;，如：bind 192.168.10.133（本地测试忽略）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定配置文件位置启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-server /usr/<span class="built_in">local</span>/bin/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否启动成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep redis</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭redis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./redis-cli shutdown</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-3-其他命令介绍"><a href="#2-3-其他命令介绍" class="headerlink" title="2.3 其他命令介绍"></a>2.3 其他命令介绍</h3><ul><li>redis-server: 启动Redis服务</li><li>redis-cli: 进入Redis命令客户端</li><li>redis-benchmark: 性能测试工具</li><li>redis-check-aof: aof文件进行检查的工具</li><li>redis-check-dump: rdb文件进行检查的工具</li><li>redis-sentinel: 启动哨兵监控服务</li></ul><h3 id="2-4-Redis客户端"><a href="#2-4-Redis客户端" class="headerlink" title="2.4 Redis客户端"></a>2.4 Redis客户端</h3><h4 id="2-4-1-自带的命令客户端"><a href="#2-4-1-自带的命令客户端" class="headerlink" title="2.4.1 自带的命令客户端"></a>2.4.1 自带的命令客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认进入当前机器的6379端口所在的Redis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./redis-cli</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定机器和端口(host port)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./redis-cli -h IP地址 -p 端口</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-程序客户端-Jedis"><a href="#2-4-2-程序客户端-Jedis" class="headerlink" title="2.4.2 程序客户端-Jedis"></a>2.4.2 程序客户端-Jedis</h4><ul><li>Redis不仅可以使用命令客户端进行操作,还可以使用<strong>程序客户端</strong>进行操作</li><li>现在的主流语言都有客户端支持,比如:Java、C、C#、C++、PHP、Node.js、Go等</li><li>Java的客户端有: <strong>Jedis</strong>、<strong>Redisson</strong>、Jredis、JDBC-Redis</li></ul><h4 id="2-4-3-多数据库支持"><a href="#2-4-3-多数据库支持" class="headerlink" title="2.4.3 多数据库支持"></a>2.4.3 多数据库支持</h4><p>默认一共是<strong>16</strong>个数据库，每个数据库之间是<strong>相互隔离</strong>（但是可以使用flushall一次清空所有的库）。数据库的数量是在redis.conf中配置的。</p><p>切换数据库使用命令：select 数据库编号（0-15）</p><p>例如：select 1</p><h2 id="三、通用命令"><a href="#三、通用命令" class="headerlink" title="三、通用命令"></a>三、通用命令</h2><h3 id="3-1-set-amp-get命令"><a href="#3-1-set-amp-get命令" class="headerlink" title="3.1 set &amp; get命令"></a>3.1 set &amp; get命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis通过<span class="built_in">set</span> key value的方式塞值</span></span><br><span class="line">set name tom</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis通过get key的方式取值</span></span><br><span class="line">get name</span><br></pre></td></tr></table></figure><h3 id="3-2-keys命令"><a href="#3-2-keys命令" class="headerlink" title="3.2 keys命令"></a>3.2 keys命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 返回满足给定pattern的所有key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法:keys pattern</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> keys *</span></span><br><span class="line">1) "age"</span><br><span class="line">2) "id"</span><br><span class="line">3) "Category"</span><br><span class="line">4) "name"</span><br><span class="line">5) "ID"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> keys i*</span></span><br><span class="line">1) "id"</span><br></pre></td></tr></table></figure><h3 id="3-3-setnx命令"><a href="#3-3-setnx命令" class="headerlink" title="3.3 setnx命令"></a>3.3 setnx命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> setnx只能在key不存在的场景下可以塞值成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> get name</span></span><br><span class="line">"Jack"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> setnx name <span class="string">"Bob"</span></span></span><br><span class="line">(integer) 0 # setnx返回0代表塞值失败</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> get name</span></span><br><span class="line">"Jack"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> setnx name2 <span class="string">"Bob"</span></span></span><br><span class="line">(integer) 1 # setnx返回1代表塞值成功</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> get name2</span></span><br><span class="line">"Bob"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示:可以用keys命令来检验key是否已存在</span></span><br></pre></td></tr></table></figure><p>该命令可以用于分布式锁,只能赋值成功一次的场景: 把key当作是锁</p><h3 id="3-4-append命令"><a href="#3-4-append命令" class="headerlink" title="3.4 append命令"></a>3.4 append命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> sayhi <span class="string">"hello"</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> append sayhi <span class="string">" world"</span></span></span><br><span class="line">(integer) 11 # 该数字代表当前value的长度</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> get sayhi</span></span><br><span class="line">"hello world"</span><br></pre></td></tr></table></figure><h3 id="3-5-strlen命令"><a href="#3-5-strlen命令" class="headerlink" title="3.5 strlen命令"></a>3.5 strlen命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> strlen sayhi</span></span><br><span class="line">(integer) 11</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 键不存在会返回0</span></span><br></pre></td></tr></table></figure><h3 id="3-6-同时设置多个值和获取多个值"><a href="#3-6-同时设置多个值和获取多个值" class="headerlink" title="3.6 同时设置多个值和获取多个值"></a>3.6 同时设置多个值和获取多个值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mset k1 v1 k2 v2 k3 v3</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mget k1 k2 k3</span></span><br><span class="line">1) "v1"</span><br><span class="line">2) "v2"</span><br><span class="line">3) "v3"</span><br></pre></td></tr></table></figure><h3 id="3-7-del命令"><a href="#3-7-del命令" class="headerlink" title="3.7 del命令"></a>3.7 del命令</h3><p>del命令是根据key来删除的,所以5种数据类型通用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> del name</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="3-8-判断一个key是否存在"><a href="#3-8-判断一个key是否存在" class="headerlink" title="3.8 判断一个key是否存在"></a>3.8 判断一个key是否存在</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> exists k1</span></span><br><span class="line">(integer) 1 # 存在</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> exists k9</span></span><br><span class="line">(integer) 0 # 不存在</span><br></pre></td></tr></table></figure><h3 id="3-9-给一个key重命名"><a href="#3-9-给一个key重命名" class="headerlink" title="3.9 给一个key重命名"></a>3.9 给一个key重命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rename k1 k11</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> keys k*</span></span><br><span class="line">1) "k3"</span><br><span class="line">2) "k11"</span><br><span class="line">3) "k2"</span><br></pre></td></tr></table></figure><h3 id="3-10-判断一个value的类型"><a href="#3-10-判断一个value的类型" class="headerlink" title="3.10 判断一个value的类型"></a>3.10 判断一个value的类型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> k11</span></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> list1</span></span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> tom</span></span><br><span class="line">hash</span><br></pre></td></tr></table></figure><h3 id="3-11-设置缓存过期时间-生存时间"><a href="#3-11-设置缓存过期时间-生存时间" class="headerlink" title="3.11 设置缓存过期时间(生存时间)"></a>3.11 设置缓存过期时间(生存时间)</h3><p><code>Redis</code>在实际使用过程中,更多的用作缓存.然而缓存的数据一般都是需要设置生存时间的.</p><p>即:到期后数据销毁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> expire key seconds 设置生存时间(秒)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> expire key milliseconds (毫秒)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ttl key            查看key剩余生存时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> persist key        清除生存时间(永生)</span></span><br></pre></td></tr></table></figure><h2 id="四、Redis数据类型"><a href="#四、Redis数据类型" class="headerlink" title="四、Redis数据类型"></a>四、Redis数据类型</h2><h3 id="4-1-String类型"><a href="#4-1-String类型" class="headerlink" title="4.1 String类型"></a>4.1 String类型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 赋值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> name tom</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> get name</span></span><br><span class="line">"tom"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取值并赋值(取出老的值并赋予新的值)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> getset name Jack</span></span><br><span class="line">"tom"</span><br><span class="line"><span class="meta">$</span><span class="bash"> get name</span></span><br><span class="line">"Jack"</span><br></pre></td></tr></table></figure><h4 id="4-1-1-String类型递增数字"><a href="#4-1-1-String类型递增数字" class="headerlink" title="4.1.1 String类型递增数字"></a>4.1.1 String类型递增数字</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果我们key的value是可以转换成正整数的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 那么就可以使用incr命令来实现自增</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该操作是原子性的,可用于分布式系统的唯一ID生成</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> ID <span class="string">"10"</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> incr ID</span></span><br><span class="line">(integer) 11</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> get ID</span></span><br><span class="line">"11"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> incr还可以指定增幅:使用incrby命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> incrby ID 10</span></span><br><span class="line">(integer) 21</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递减</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> decr ID</span></span><br><span class="line">(integer) 20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递减并指定幅度</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> decrby ID 10</span></span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure><h3 id="4-2-Hash类型"><a href="#4-2-Hash类型" class="headerlink" title="4.2 Hash类型"></a>4.2 Hash类型</h3><p>Hash类型使用<code>hset</code>命令,<strong>不区分插入和更新操作</strong>,当执行插入操作的时候返回1;当执行更新操作的时候返回0</p><p>该类型可以理解为他的value是一个<code>map</code>,即: 键 - (属性:值)</p><p>属性就可以理解为map的key;值则是map的值</p><p>这样的数据结构更能体现Java对象的特征</p><p><strong>语法:</strong> hset key field value</p><p><strong>注意事项:</strong> 存储对象属性经常发生增删改操作的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hset <span class="string">"tom"</span> age 20</span></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hset <span class="string">"tom"</span> addr beijing</span></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hget tom age</span></span><br><span class="line">"20"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hget tom addr</span></span><br><span class="line">"beijing"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当然hmset和hmget可以实现多个操作,例如:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hmget tom age addr</span></span><br><span class="line">1) "20"</span><br><span class="line">2) "beijing"</span><br></pre></td></tr></table></figure><h4 id="4-2-1-Hash类型递增数字"><a href="#4-2-1-Hash类型递增数字" class="headerlink" title="4.2.1 Hash类型递增数字"></a>4.2.1 Hash类型递增数字</h4><p>同样,hash类型也是可以递增数字的,例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不存在hincr命令,只有hincrby</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hincrby tom age 2</span></span><br><span class="line">(integer) 22</span><br></pre></td></tr></table></figure><h4 id="4-2-2-判断属性是否存在"><a href="#4-2-2-判断属性是否存在" class="headerlink" title="4.2.2 判断属性是否存在"></a>4.2.2 判断属性是否存在</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexists tom age</span></span><br><span class="line">(integer) 1 # 存在</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexists tom name</span></span><br><span class="line">(integer) 0 # 不存在</span><br></pre></td></tr></table></figure><h4 id="4-2-3-获取所有的field或所有的值"><a href="#4-2-3-获取所有的field或所有的值" class="headerlink" title="4.2.3 获取所有的field或所有的值"></a>4.2.3 获取所有的field或所有的值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hkeys tom</span></span><br><span class="line">1) "age"</span><br><span class="line">2) "addr"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hvals tom</span></span><br><span class="line">1) "22"</span><br><span class="line">2) "beijing"</span><br></pre></td></tr></table></figure><h4 id="4-2-4-获取所有的field和所有的值"><a href="#4-2-4-获取所有的field和所有的值" class="headerlink" title="4.2.4 获取所有的field和所有的值"></a>4.2.4 获取所有的field和所有的值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hgetall tom</span></span><br><span class="line">1) "age"</span><br><span class="line">2) "22"</span><br><span class="line">3) "addr"</span><br><span class="line">4) "beijing"</span><br></pre></td></tr></table></figure><h4 id="4-2-5-获取字段数"><a href="#4-2-5-获取字段数" class="headerlink" title="4.2.5 获取字段数"></a>4.2.5 获取字段数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hlen tom</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h3 id="4-3-List类型"><a href="#4-3-List类型" class="headerlink" title="4.3 List类型"></a>4.3 List类型</h3><p>内部实现是<strong>双向链表</strong>,所以向两端添加元素的时间复杂度为O(1),获取<strong>越接近两端的元素速度就越快</strong>.</p><p>这意味着,即使是一个有几千万个元素的列表,获取头部和尾部的10条记录也是极快的.</p><h4 id="4-3-1-向列表增加和查看列表"><a href="#4-3-1-向列表增加和查看列表" class="headerlink" title="4.3.1 向列表增加和查看列表"></a>4.3.1 向列表增加和查看列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 向列表左边增加元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lpush list1 1 2 3 4 5</span></span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为依次向左边添加元素,因此目前的列表应该是</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5,4,3,2,1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历该列表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 索引可以是负数,-1代表最后一个元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 4</span></span><br><span class="line">1) "5"</span><br><span class="line">2) "4"</span><br><span class="line">3) "3"</span><br><span class="line">4) "2"</span><br><span class="line">5) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从右边增加元素则是使用rpush,示例省略</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-从列表两端弹出元素"><a href="#4-3-2-从列表两端弹出元素" class="headerlink" title="4.3.2 从列表两端弹出元素"></a>4.3.2 从列表两端弹出元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lpop list1</span></span><br><span class="line">"5"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">4) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从右边删除元素则是使用rpop,示例省略</span></span><br></pre></td></tr></table></figure><p>利用列表,从一端添加,从另一端pop就可以实现消息队列的效果</p><h4 id="4-3-3-获取列表长度"><a href="#4-3-3-获取列表长度" class="headerlink" title="4.3.3 获取列表长度"></a>4.3.3 获取列表长度</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> llen list1</span></span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h4 id="4-3-4-删除列表中指定的值-且指定删除的个数"><a href="#4-3-4-删除列表中指定的值-且指定删除的个数" class="headerlink" title="4.3.4 删除列表中指定的值(且指定删除的个数)"></a>4.3.4 删除列表中指定的值(且指定删除的个数)</h4><p>语法: lrem 列表 个数 值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除前</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "2"</span><br><span class="line">2) "4"</span><br><span class="line">3) "3"</span><br><span class="line">4) "2"</span><br><span class="line">5) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从list1当中删除1个2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrem list1 1 2</span></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除后</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">4) "1"</span><br></pre></td></tr></table></figure><h4 id="4-3-5-获取指定索引的元素值"><a href="#4-3-5-获取指定索引的元素值" class="headerlink" title="4.3.5 获取指定索引的元素值"></a>4.3.5 获取指定索引的元素值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">4) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取索引为1的元素值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lindex list1 1</span></span><br><span class="line">"3"</span><br></pre></td></tr></table></figure><h4 id="4-3-6-将列表中元素插入另一个列表"><a href="#4-3-6-将列表中元素插入另一个列表" class="headerlink" title="4.3.6 将列表中元素插入另一个列表"></a>4.3.6 将列表中元素插入另一个列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br><span class="line">4) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpoplpush list1 newlist</span></span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange newlist 0 -1</span></span><br><span class="line">1) "1"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrange list1 0 -1</span></span><br><span class="line">1) "4"</span><br><span class="line">2) "3"</span><br><span class="line">3) "2"</span><br></pre></td></tr></table></figure><h3 id="4-4-Set类型"><a href="#4-4-Set类型" class="headerlink" title="4.4 Set类型"></a>4.4 Set类型</h3><p>不可重复(去重)</p><h4 id="4-4-1-新增-amp-删除"><a href="#4-4-1-新增-amp-删除" class="headerlink" title="4.4.1 新增&amp;删除"></a>4.4.1 新增&amp;删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sadd s1 1 2 3 4 5</span></span><br><span class="line">(integer) 5 # 该数字表示此次插入成功的元素个数</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补充:因为<span class="built_in">set</span>类型具备去重的特性,如果sadd的值已存在,则会出现add数字为0的情况</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看key下的所有值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> smembers s1</span></span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> srem s1 4</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="4-4-2-判断集合中是否存在该元素"><a href="#4-4-2-判断集合中是否存在该元素" class="headerlink" title="4.4.2 判断集合中是否存在该元素"></a>4.4.2 判断集合中是否存在该元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sismember s1 6</span></span><br><span class="line">(integer) 1 # 表示存在</span><br><span class="line"><span class="meta">$</span><span class="bash"> sismember s1 7</span></span><br><span class="line">(integer) 0 # 表示不存在</span><br></pre></td></tr></table></figure><h4 id="4-4-3-集合运算"><a href="#4-4-3-集合运算" class="headerlink" title="4.4.3 集合运算"></a>4.4.3 集合运算</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 已知:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> smembers s1</span></span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br><span class="line">6) "6"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> smembers s2</span></span><br><span class="line">1) "2"</span><br><span class="line">2) "4"</span><br><span class="line">3) "6"</span><br><span class="line">4) "8"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集运算</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sinter s1 s2</span></span><br><span class="line">1) "2"</span><br><span class="line">2) "4"</span><br><span class="line">3) "6"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sinter s2 s1</span></span><br><span class="line">1) "2"</span><br><span class="line">2) "4"</span><br><span class="line">3) "6"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 差集运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 即:从[前者]里面减去[前者]和[后者]同时存在的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sdiff s1 s2</span></span><br><span class="line">1) "1"</span><br><span class="line">2) "3"</span><br><span class="line">3) "5"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sdiff s2 s1</span></span><br><span class="line">1) "8"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 并集运算</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sunion s1 s2</span></span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br><span class="line">6) "6"</span><br><span class="line">7) "8"</span><br></pre></td></tr></table></figure><h4 id="4-4-4-获取集合中元素的个数"><a href="#4-4-4-获取集合中元素的个数" class="headerlink" title="4.4.4 获取集合中元素的个数"></a>4.4.4 获取集合中元素的个数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scard s1</span></span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h4 id="4-4-5-从集合中弹出一个元素"><a href="#4-4-5-从集合中弹出一个元素" class="headerlink" title="4.4.5 从集合中弹出一个元素"></a>4.4.5 从集合中弹出一个元素</h4><p>必须要注意的是,此处的弹出(删除)是随机的.因此可以使用它来实现抽奖系统等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 传递的数字代表要弹出几个元素,而不是弹出什么元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop s1 6</span></span><br><span class="line">1) "1"</span><br><span class="line">2) "2"</span><br><span class="line">3) "3"</span><br><span class="line">4) "4"</span><br><span class="line">5) "5"</span><br><span class="line">6) "6"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> smembers s1</span></span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sadd s1 1 2 3 4 5 6</span></span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> scard s1</span></span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop s1</span></span><br><span class="line">"6"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop s1</span></span><br><span class="line">"3"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop s1</span></span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> scard s1</span></span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop s1 2</span></span><br><span class="line">1) "5"</span><br><span class="line">2) "2"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> scard s1</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="4-5-SortedSet类型-别名-ZSet"><a href="#4-5-SortedSet类型-别名-ZSet" class="headerlink" title="4.5 SortedSet类型(别名:ZSet)"></a>4.5 SortedSet类型(别名:ZSet)</h3><p>有序集合实现排序的方式:通过给每一个元素指定一个分数,然后基于分数进行排名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法:zadd 集合名 分数 元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zadd z1 80 Jerry 100 Tom 75 Jack</span></span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 排名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认:从小到大</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrange z1 0 -1</span></span><br><span class="line">1) "Jack"</span><br><span class="line">2) "Jerry"</span><br><span class="line">3) "Tom"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 降序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrevrange z1 0 -1</span></span><br><span class="line">1) "Tom"</span><br><span class="line">2) "Jerry"</span><br><span class="line">3) "Jack"</span><br></pre></td></tr></table></figure><h4 id="4-5-1-获取元素的分数"><a href="#4-5-1-获取元素的分数" class="headerlink" title="4.5.1 获取元素的分数"></a>4.5.1 获取元素的分数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zscore z1 Jack</span></span><br><span class="line">"75"</span><br></pre></td></tr></table></figure><h4 id="4-5-2-删除元素"><a href="#4-5-2-删除元素" class="headerlink" title="4.5.2 删除元素"></a>4.5.2 删除元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zrem z1 Jack</span></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrange z1 0 -1</span></span><br><span class="line">1) "Jerry"</span><br><span class="line">2) "Tom"</span><br></pre></td></tr></table></figure><h2 id="五、Redis事务"><a href="#五、Redis事务" class="headerlink" title="五、Redis事务"></a>五、Redis事务</h2><h3 id="5-1-Redis事务介绍"><a href="#5-1-Redis事务介绍" class="headerlink" title="5.1 Redis事务介绍"></a>5.1 Redis事务介绍</h3><ul><li>Redis事务是通过<code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code>和<code>WATCH</code>这四个命令实现的</li><li>Redis的单个命令都是<strong>原子性</strong>的,所以这里确保事务性的对象是<strong>命令集合</strong></li><li>Redis将命令集合序列化并确保处于同一事务的命令集合<strong>连续且不被打断</strong>的执行</li><li>不支持事务回滚</li></ul><h3 id="5-2-命令介绍"><a href="#5-2-命令介绍" class="headerlink" title="5.2 命令介绍"></a>5.2 命令介绍</h3><h4 id="5-2-1-MULTI命令"><a href="#5-2-1-MULTI命令" class="headerlink" title="5.2.1 MULTI命令"></a>5.2.1 MULTI命令</h4><p>用于<strong>标记一个事务块的开始</strong></p><p>Redis会将后续的命令逐个放入队列中,然后才能使用EXEC命令原子化地执行这个序列</p><h4 id="5-2-2-EXEC命令"><a href="#5-2-2-EXEC命令" class="headerlink" title="5.2.2 EXEC命令"></a>5.2.2 EXEC命令</h4><p>在一个事务中执行所以先前放入命令队列中的命令,然后恢复正常的连接状态</p><h4 id="5-2-3-DISCARD命令"><a href="#5-2-3-DISCARD命令" class="headerlink" title="5.2.3 DISCARD命令"></a>5.2.3 DISCARD命令</h4><p>清除所有在先前一个事务中放入命令队列中的命令,然后恢复正常的连接状态</p><h4 id="5-2-4-WATCH命令"><a href="#5-2-4-WATCH命令" class="headerlink" title="5.2.4 WATCH命令"></a>5.2.4 WATCH命令</h4><p>当某个事务需要按条件执行时,就要使用这个命令.将给定的键设置为受监控的</p><p>使用这个命令可以实现Redis的<code>乐观锁</code></p><p>使用<code>unwatch</code>清除所有先前为一个事务监控的键</p><h4 id="5-2-5-示例"><a href="#5-2-5-示例" class="headerlink" title="5.2.5 示例"></a>5.2.5 示例</h4><p>演示事务开启并取消:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> MULTI <span class="comment"># 开启事务命令集合</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> s111 v111 <span class="comment"># 往命令队列中添加命令1</span></span></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> s222 v222 <span class="comment"># 往命令队列中添加命令2</span></span></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> DISCARD <span class="comment"># 取消命令队列中的命令</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span></span></span><br><span class="line">(error) ERR EXEC without MULTI</span><br></pre></td></tr></table></figure><p>演示事务开启并执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> MULTI <span class="comment"># 开启事务命令集合</span></span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> s111 v111 <span class="comment"># 往命令队列中添加命令1</span></span></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> s222 v222 <span class="comment"># 往命令队列中添加命令2</span></span></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span> <span class="comment"># 开始依次执行命令集合中的命令</span></span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br></pre></td></tr></table></figure><p>演示WATCH乐观锁:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检视初始值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> get s1</span></span><br><span class="line">"111"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> get s2</span></span><br><span class="line">"222"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始监控s1的状态:如果s1的值发生变化,则事务不执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> watch s1</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> MULTI</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> s2 999</span></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于s1的值在其他地方被改变,事务执行失败</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span></span></span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> s2的值没有被修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> get s2</span></span><br><span class="line">"222"</span><br></pre></td></tr></table></figure><h3 id="5-3-Redis事务失败"><a href="#5-3-Redis事务失败" class="headerlink" title="5.3 Redis事务失败"></a>5.3 Redis事务失败</h3><ul><li>Redis语法错误</li><li>Redis类型错误</li></ul><h4 id="5-3-1-为什么Redis不支持事务回滚"><a href="#5-3-1-为什么Redis不支持事务回滚" class="headerlink" title="5.3.1 为什么Redis不支持事务回滚?"></a>5.3.1 为什么Redis不支持事务回滚?</h4><ol><li>大多数事务失败是因为语法错误或类型错误,这两种错误都可以在开发阶段预见</li><li>Redis为了性能方面忽略了事务回滚</li></ol><h2 id="六、Redis实现分布式锁"><a href="#六、Redis实现分布式锁" class="headerlink" title="六、Redis实现分布式锁"></a>六、Redis实现分布式锁</h2><h3 id="6-1-锁的处理"><a href="#6-1-锁的处理" class="headerlink" title="6.1 锁的处理"></a>6.1 锁的处理</h3><ul><li><p>单应用中使用锁：单进程多线程</p><p>Synchronize、Lock</p></li><li><p>分布式应用中使用锁：多进程</p></li></ul><h3 id="6-2-分布式锁的实现方式"><a href="#6-2-分布式锁的实现方式" class="headerlink" title="6.2 分布式锁的实现方式"></a>6.2 分布式锁的实现方式</h3><ul><li>数据库的乐观锁</li><li>基于Zookeeper的分布式锁</li><li>基于Redis的分布式锁</li></ul><h3 id="6-3-分布式锁的注意事项"><a href="#6-3-分布式锁的注意事项" class="headerlink" title="6.3 分布式锁的注意事项"></a>6.3 分布式锁的注意事项</h3><ul><li>互斥性：在任意时刻，只有一个客户端能持有锁</li><li>同一性：加锁和解锁必须是同一个客户端，客户端不能把别人加的锁</li><li>避免死锁：即使有一个客户端持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端加锁</li></ul><h3 id="6-4-实现分布式锁"><a href="#6-4-实现分布式锁" class="headerlink" title="6.4 实现分布式锁"></a>6.4 实现分布式锁</h3><h4 id="6-4-1-获取锁"><a href="#6-4-1-获取锁" class="headerlink" title="6.4.1 获取锁"></a>6.4.1 获取锁</h4><p>在<strong>SET</strong>命令中，有很多选项可用来修改命令的行为，以下是<strong>SET</strong>命令可用的基本语法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> SET key value [EX seconds] [PX milliseconds] [NX|XX]</span></span><br></pre></td></tr></table></figure><ul><li>EX seconds：设置指定的到期时间（以秒为单位）。</li><li>PX milliseconds：设置指定的到期时间（以毫秒为单位）。</li><li>NX：仅在键不存在的时候设置键。</li><li>XX：仅在键已存在的时候才设置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方式1 使用redis的set命令实现获取分布式锁</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> lockKey   可以就是锁</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> requestId请求ID，保证同一性</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> expireTime过期时间，避免死锁</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// NX:保证互斥性</span></span><br><span class="line">  String result = jedis.set(lockKey, requestId, <span class="string">"NX"</span>, <span class="string">"EX"</span>, expireTime);</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">"OK"</span>.equals(result)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 方式2（使用setnx命令实现）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line"><span class="keyword">if</span>(result == <span class="number">1</span>) &#123;</span><br><span class="line">jedis.expire(lockKey, expireTime);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-释放锁"><a href="#6-4-2-释放锁" class="headerlink" title="6.4.2 释放锁"></a>6.4.2 释放锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方式1 del命令实现 释放分布式锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String lockKey,String requestId)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123;</span><br><span class="line">    jedis.del(lockKey);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 方式2（redis+lua脚本实现）--推荐</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result.equals(<span class="number">1L</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、持久化方案"><a href="#七、持久化方案" class="headerlink" title="七、持久化方案"></a>七、持久化方案</h2><p>Redis是一个内存数据库，为了保证数据的持久性，它提供了两种持久化方案：</p><ul><li>RDB方式（默认）</li><li>AOF方式</li></ul><h3 id="7-1-RDB方式"><a href="#7-1-RDB方式" class="headerlink" title="7.1 RDB方式"></a>7.1 RDB方式</h3><h4 id="7-1-1-介绍"><a href="#7-1-1-介绍" class="headerlink" title="7.1.1 介绍"></a>7.1.1 介绍</h4><ul><li>RDB是Redis<strong>默认</strong>采用的持久化方式</li><li>RDB方式是通过<strong>快照</strong>（snapshotting）完成的，当<strong>符合一定条件</strong>时Redis会自动将内存中的数据进行快照并持久化到硬盘。默认保存在dump.rdb文件中。（本机位置：/usr/local/bin/dump.rdb）</li><li>Redis会在<strong>指定的情况</strong>下触发快照<ol><li>符合自定义配置的快照规则</li><li>执行save或者bgsave命令</li><li>执行flushall命令</li><li>执行主从复制操作</li></ol></li></ul><h4 id="7-1-2-配置dbfilename指定rdb快照文件的名称"><a href="#7-1-2-配置dbfilename指定rdb快照文件的名称" class="headerlink" title="7.1.2 配置dbfilename指定rdb快照文件的名称"></a>7.1.2 配置dbfilename指定rdb快照文件的名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。 </li><li>这就使得我们可以通过定时备份RDB文件来实现redis数据库的备份， RDB文件是经过压缩的二进制文件，占用的空间会小于内存中的数据，更加利于传输。</li></ol><h4 id="7-1-3-自定义快照规则"><a href="#7-1-3-自定义快照规则" class="headerlink" title="7.1.3 自定义快照规则"></a>7.1.3 自定义快照规则</h4><p>在redis.conf中设置自定义快照规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">save 900 1    ： 表示15分钟（900秒钟）内至少1个键被更改则进行快照。</span><br><span class="line">save 300 10   ： 表示5分钟（300秒）内至少10个键被更改则进行快照。</span><br><span class="line">save 60 10000 ： 表示1分钟内至少10000个键被更改则进行快照。</span><br><span class="line"></span><br><span class="line">可以配置多个条件（每行配置一个条件），每个条件之间是“或”的关系。</span><br></pre></td></tr></table></figure><p><strong>特别说明：</strong></p><pre><code>1. Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。 2. 根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将记录一千万个字符串类型键、大小为1GB的快照文件载入到内存中需要花费20～30秒钟。</code></pre><h4 id="7-1-4-RDB的优缺点"><a href="#7-1-4-RDB的优缺点" class="headerlink" title="7.1.4 RDB的优缺点"></a>7.1.4 RDB的优缺点</h4><p>优点：</p><p>RDB可以最大化Redis的性能：父进程在保存RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无序执行任何磁盘I/O操作。同时这个也是一个缺点，如果数据集比较大的时候，fork可以能比较耗时，造成服务器在一段时间内停止处理客户端的请求</p><p>缺点：</p><p>使用RDB方式实现持久化，一旦Redis异常退出，<strong>就会丢失最后一次快照以后更改的所有数据</strong>。这个时候我们就需要根据具体的应用场景，通过<strong>组合设置自动快照条件的方式</strong>来将可能发生的数据损失控制在能够接受范围。如果数据相对来说比较重要，希望将损失降到最小，则可以使用AOF方式进行持久化</p><h3 id="7-2-AOF方式"><a href="#7-2-AOF方式" class="headerlink" title="7.2 AOF方式"></a>7.2 AOF方式</h3><h4 id="7-2-1-介绍"><a href="#7-2-1-介绍" class="headerlink" title="7.2.1 介绍"></a>7.2.1 介绍</h4><ul><li>默认情况下Redis没有开启AOF（append only file）方式的持久化</li><li>开启AOF持久化后每执行一条会<strong>更改</strong>Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件，这一过程显然会降低Redis的性能，但大部分情况下这个影响是能够接受的，另外使用较快的硬盘可以提高AOF的性能。</li><li>可以通过修改redis.conf配置文件中的appendonly参数开启</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的。</p><p>默认的文件名是appendonly.aof，可以通过appendfilename参数修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename appendonly.aof</span><br></pre></td></tr></table></figure><h4 id="7-2-2-参数说明"><a href="#7-2-2-参数说明" class="headerlink" title="7.2.2 参数说明"></a>7.2.2 参数说明</h4><ul><li><p><strong>auto-aof-rewrite-percentage 100</strong>  表示当前aof文件大小超过上一次aof文件大小的百分之多少的时候会进行重写。如果之前没有重写过，以启动时aof文件大小为准</p></li><li><p><strong>auto-aof-rewrite-min-size 64mb</strong>   限制允许重写最小aof文件大小，也就是文件大小小于64mb的时候，不需要进行优化</p></li></ul><h4 id="7-2-3-同步磁盘数据"><a href="#7-2-3-同步磁盘数据" class="headerlink" title="7.2.3 同步磁盘数据"></a>7.2.3 同步磁盘数据</h4><p>Redis每次更改数据的时候， aof机制都会将命令记录到aof文件，但是实际上由于操作系统的缓存机制，数据并没有实时写入到硬盘，而是进入硬盘缓存。再通过硬盘缓存机制去刷新到保存到文件。</p><p><strong>参数说明：</strong></p><p><strong>appendfsync always</strong>  每次执行写入都会进行同步  ， 这个是最安全但是是效率比较低的方式</p><p><strong>appendfsync everysec</strong>   每一秒执行（默认）</p><p><strong>appendfsync no</strong>  不主动进行同步操作，由操作系统去执行，这个是最快但是最不安全的方式</p><h4 id="7-2-4-AOF文件损坏以后如何修复"><a href="#7-2-4-AOF文件损坏以后如何修复" class="headerlink" title="7.2.4 AOF文件损坏以后如何修复"></a>7.2.4 AOF文件损坏以后如何修复</h4><p>服务器可能在程序正在对 AOF 文件进行写入时停机， 如果停机造成了 AOF 文件出错（corrupt）， 那么 Redis 在重启时会拒绝载入这个 AOF 文件， 从而确保数据的一致性不会被破坏。</p><p><strong>当发生这种情况时，</strong> <strong>可以用以下方法来修复出错的 AOF 文件：</strong></p><ol><li><p>为现有的 AOF 文件创建一个<strong>备份</strong>。</p></li><li><p>使用 Redis 附带的 <strong>redis-check-aof</strong> 程序，对原来的 AOF 文件进行修复。</p></li></ol><p>redis-check-aof –fix readonly.aof</p><p>重启 Redis 服务器，等待服务器载入修复后的 AOF 文件，并进行数据恢复。</p><h3 id="7-3-如何选择RDB和AOF"><a href="#7-3-如何选择RDB和AOF" class="headerlink" title="7.3 如何选择RDB和AOF"></a>7.3 如何选择RDB和AOF</h3><ul><li><p>一般来说,如果对数据的安全性要求非常高的话，应该同时使用两种持久化功能。</p></li><li><p>如果可以承受数分钟以内的数据丢失，那么可以只使用 RDB 持久化。</p></li><li><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快 。</p></li><li><p>两种持久化策略可以同时使用，也可以使用其中一种。如果同时使用的话， 那么Redis重启时，会优先<strong>使用AOF文件</strong>来还原数据</p></li></ul><h2 id="八、Redis主从复制"><a href="#八、Redis主从复制" class="headerlink" title="八、Redis主从复制"></a>八、Redis主从复制</h2><p>持久化保证了即使redis服务重启也不会丢失数据，因为redis服务重启后会将硬盘上持久化的数据恢复到内存中，但是当redis服务器的硬盘损坏了可能会导致数据丢失，不过通过redis的主从复制机制就可以避免这种单点故障。</p><p><strong>说明：</strong></p><ul><li><p>主redis中的数据有两个副本（replication）即从redis1和从redis2，即使一台redis服务器宕机其它两台redis服务也可以继续提供服务。</p></li><li><p>主redis中的数据和从redis上的数据保持实时同步，当主redis写入数据时通过主从复制机制会复制到两个从redis服务上。</p></li><li><p>只有一个主redis，可以有多个从redis。</p></li><li><p>主从复制不会阻塞master，在同步数据时，master 可以继续处理client 请求</p></li><li><p>一个redis可以即是主又是从</p></li></ul><h3 id="8-1-主从配置"><a href="#8-1-主从配置" class="headerlink" title="8.1 主从配置"></a>8.1 主从配置</h3><h4 id="8-1-1-主redis配置"><a href="#8-1-1-主redis配置" class="headerlink" title="8.1.1 主redis配置"></a>8.1.1 主redis配置</h4><p>无需特殊配置。</p><h4 id="8-1-2-从redis配置"><a href="#8-1-2-从redis配置" class="headerlink" title="8.1.2 从redis配置"></a>8.1.2 从redis配置</h4><p>修改从服务器上的redis.conf文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><h3 id="8-2-实现原理"><a href="#8-2-实现原理" class="headerlink" title="8.2 实现原理"></a>8.2 实现原理</h3><ul><li><p>Redis的主从同步，分为全量同步和增量同步。</p></li><li><p>只有从机第一次连接上主机是全量同步</p></li><li><p>断线重连有可能触发全量同步也有可能是增量同步（master判断runid是否一致）</p></li><li><p>除此之外的情况都是增量同步</p></li></ul><h4 id="8-2-1-全量同步"><a href="#8-2-1-全量同步" class="headerlink" title="8.2.1 全量同步"></a>8.2.1 全量同步</h4><p>Redis的全量同步过程主要分三个阶段：</p><ol><li><p>同步快照阶段：Master创建并发送<strong>快照</strong>给Slave,Slave载入并解析快照。Master同时将此阶段所产生的新的写命令存储到缓冲区。</p></li><li><p>同步写缓冲阶段：Master向Slave同步存储在缓冲区的写操作命令。</p></li><li><p>同步增量阶段：Master向Slave同步写操作命令。</p></li></ol><h4 id="8-2-2-增量同步"><a href="#8-2-2-增量同步" class="headerlink" title="8.2.2 增量同步"></a>8.2.2 增量同步</h4><ul><li><p>Redis增量同步主要指<strong>Slave完成初始化后开始正常工作</strong>时，<strong>Master发生的写操作同步到Slave的过程</strong>。</p></li><li><p>通常情况下，Master每执行一个写命令就会向Slave发送相同的<strong>写命令</strong>，然后Slave接收并执行。</p></li></ul><h2 id="九、Redis-Sentinel哨兵机制"><a href="#九、Redis-Sentinel哨兵机制" class="headerlink" title="九、Redis Sentinel哨兵机制"></a>九、Redis Sentinel哨兵机制</h2><p>Redis主从复制的缺点：没有办法对master进行动态选举，需要使用Sentinel机制完成动态选举。</p><p><strong>说明：</strong></p><ul><li><p>Sentinel(哨兵)进程是用于<strong>监控redis集群中Master主服务器工作的状态</strong></p></li><li><p>在Master主服务器发生故障的时候，可以实现Master和Slave服务器的切换，保证系统的高可用（HA）</p></li><li><p>其已经被集成在redis2.6+的版本中，Redis的哨兵模式到了2.8版本之后就稳定了下来。</p></li></ul><h3 id="9-1-哨兵进程的作用"><a href="#9-1-哨兵进程的作用" class="headerlink" title="9.1 哨兵进程的作用"></a>9.1 哨兵进程的作用</h3><ol><li><p><strong>监控(Monitoring):</strong> 哨兵(sentinel) 会不断地检查你的Master和Slave是否运作正常。</p></li><li><p><strong>提醒(Notification)</strong>： 当被监控的某个Redis节点出现问题时, 哨兵(sentinel) 可以通过 API 向管理员或者其他应用程序发送通知。</p></li><li><p><strong>自动故障迁移(Automatic failover)</strong>：当<strong>一个Master不能正常工作</strong>时，哨兵(sentinel) 会开始<strong>一次自动故障迁移操作</strong>。</p></li></ol><p>它会将失效Master的其中一个Slave升级为新的Master, 并让失效Master的其他Slave改为复制新的Master；</p><p>当客户端试图连接失效的Master时，集群也会向客户端返回新Master的地址，使得集群可以使用现在的Master替换失效Master。</p><p>Master和Slave服务器切换后，Master的redis.conf、Slave的redis.conf和sentinel.conf的配置文件的内容都会发生相应的改变，即，Master主服务器的redis.conf配置文件中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换。</p><h3 id="9-2-哨兵进程的工作方式"><a href="#9-2-哨兵进程的工作方式" class="headerlink" title="9.2 哨兵进程的工作方式"></a>9.2 哨兵进程的工作方式</h3><ol><li><p>每个Sentinel（哨兵）进程以<strong>每秒钟一次</strong>的频率向整个集群中的<strong>Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程</strong>发送一个 PING 命令。</p></li><li><p>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为<strong>主观下线</strong>（<strong>SDOWN</strong>）。</p></li><li><p>如果一个Master主服务器被标记为主观下线（SDOWN），则正在监视这个Master主服务器的<strong>所有 Sentinel（哨兵）</strong>进程要以每秒一次的频率<strong>确认Master主服务器</strong>的确<strong>进入了主观下线状态</strong>。</p></li><li><p>当<strong>有足够数量的 Sentinel（哨兵）</strong>进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为<strong>客观下线（ODOWN）</strong>。</p></li><li><p>在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</p></li><li><p>当Master主服务器被 Sentinel（哨兵）进程标记为<strong>客观下线（ODOWN）</strong>时，Sentinel（哨兵）进程向下线的 Master主服务器的所有 Slave从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</p></li></ol><p>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线状态就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</p><h3 id="9-3-案例演示"><a href="#9-3-案例演示" class="headerlink" title="9.3 案例演示"></a>9.3 案例演示</h3><p>修改从机的sentinel.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#sentinel monitor &lt;master-name&gt; &lt;master ip&gt; &lt;master port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor mymaster 192.168.10.133 6379 1</span><br></pre></td></tr></table></figure><p><strong>其他配置项说明：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379</span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel的工作目录</span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span><br><span class="line"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">  sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。  </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="line"># 默认三分钟</span><br><span class="line"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"># SCRIPTS EXECUTION</span><br><span class="line"> </span><br><span class="line">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><span class="line">#对于脚本的运行结果有以下规则：</span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="line">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><span class="line"> </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><br><span class="line">这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="line">一个是事件的类型，</span><br><span class="line">一个是事件的描述。</span><br><span class="line">如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="line">#通知脚本</span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"># 客户端重新配置主节点参数脚本</span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><span class="line"># 以下参数将会在调用脚本时传给脚本:</span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="line"># 目前&lt;state&gt;总是“failover”,</span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line"> sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure><p>通过redis-sentinel启动哨兵服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure><h2 id="十、Redis-Cluster集群"><a href="#十、Redis-Cluster集群" class="headerlink" title="十、Redis Cluster集群"></a>十、Redis Cluster集群</h2><p>redis3.0以后推出的redis cluster 集群方案，redis cluster集群保证了高可用、高性能、高可扩展性。</p><p>架构细节:</p><p>(1)所有的redis节点彼此互联(<strong>PING-PONG机制</strong>),内部使用二进制协议优化传输速度和带宽.</p><p>(2)节点的fail是通过集群中超过半数的节点检测失效时才生效.</p><p>(3)客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</p><p>(4)redis-cluster把所有的物理节点映射到[0-16383]<strong>slot</strong>上,cluster 负责维护</p><blockquote><p>Redis 集群中内置了 <strong>16384 个哈希槽</strong>，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</p></blockquote><p>最小节点数：<strong>3台</strong></p><p>(1)<strong>节点失效判断</strong>：集群中所有master参与投票,如果<strong>半数以上master节点</strong>与其中一个master节点通信超过<strong>(cluster-node-timeout)</strong>,认为该master节点挂掉.</p><p>(2)<strong>集群失效判断</strong>:什么时候整个集群不可用(cluster_state:fail)? </p><p>Ø 如果集群任意master挂掉,且当前master没有slave，则集群进入fail状态。也可以理解成集群的[0-16383]slot映射不完全时进入fail状态。</p><p>如果集群超过半数以上master挂掉，无论是否有slave，集群进入fail状态。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git使用上手</title>
      <link href="/2019/11/24/Git%E4%BD%BF%E7%94%A8%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/11/24/Git%E4%BD%BF%E7%94%A8%E4%B8%8A%E6%89%8B/</url>
      <content type="html"><![CDATA[<h1 id="Git使用上手"><a href="#Git使用上手" class="headerlink" title="Git使用上手"></a>Git使用上手</h1><h2 id="一、起步"><a href="#一、起步" class="headerlink" title="一、起步"></a>一、起步</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p>Windows、Linux请自行前往<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>,按照说明完成</p><p>这里说一下Mac版本,分两种情况:</p><ol><li>使用Apple提供的git发行版:这种情况使用的是Xcode内的<code>Command Line Tools</code></li><li>使用homebrew安装,强烈建议.因为Xcode内的git工具不太完整,缺少<code>gitk</code>、HTML格式的文档等</li></ol><h3 id="1-2-最小化配置"><a href="#1-2-最小化配置" class="headerlink" title="1.2 最小化配置"></a>1.2 最小化配置</h3><p>配置user.name和user.email</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 'your_name'</span><br><span class="line">git config --global user.email 'your_email@domain.com'</span><br></pre></td></tr></table></figure><h4 id="1-2-1-config的三个作用域"><a href="#1-2-1-config的三个作用域" class="headerlink" title="1.2.1 config的三个作用域"></a>1.2.1 config的三个作用域</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --local  # 只针对某仓库</span><br><span class="line">git config --global # 对当前用户的所有仓库有效</span><br><span class="line">git config --system # 对该系统所有登陆的用户有效</span><br></pre></td></tr></table></figure><p>显示config的配置,加<code>--list</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list --local</span><br><span class="line">git config --list --global</span><br><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><h3 id="1-3-使用本地HTML文档"><a href="#1-3-使用本地HTML文档" class="headerlink" title="1.3 使用本地HTML文档"></a>1.3 使用本地HTML文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如查看git <span class="built_in">log</span>命令的使用文档</span></span><br><span class="line">git help log --web</span><br></pre></td></tr></table></figure><h2 id="二、建一个Git仓库"><a href="#二、建一个Git仓库" class="headerlink" title="二、建一个Git仓库"></a>二、建一个Git仓库</h2><h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h3><p>此时存在两种场景:</p><ol><li>项目代码已经存在,要把项目加入Git版本控制</li><li>新建一个项目并使用Git来管理</li></ol><p>针对第一种情况,我们使用如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目代码所在的文件夹</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>针对第二种情况,则是使用如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 某个文件夹</span><br><span class="line">git init your_project # git会在当前目录下创建和项目名称同名的文件夹</span><br><span class="line">cd your_project</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-将文件加入Git版本控制"><a href="#2-2-将文件加入Git版本控制" class="headerlink" title="2.2 将文件加入Git版本控制"></a>2.2 将文件加入Git版本控制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名 # 如果不将文件纳入版本控制,后续操作则会报错</span><br></pre></td></tr></table></figure><p>然后查看一下当前的状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status # 可查看当前git项目的状态,如哪些文件被修改,而哪些文件未被版本管理</span><br></pre></td></tr></table></figure><p>此时的文件,是存在于临时的缓存(<strong>暂存区</strong>)当中,要真正提交还需要执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "变更说明"</span><br></pre></td></tr></table></figure><p>这样我们就真正的将一个文件提交进版本了,我们还可以看一下当前的日志:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">log</span>还有几种使用方法,例如</span></span><br><span class="line">git log 分支名     # 查看指定分支的历史;默认显示当前分支</span><br><span class="line">git log --all     # 显示所有分支的版本历史;默认显示当前分支</span><br><span class="line">git log --oneline # 简洁显示变更历史,每次变更只显示一行</span><br><span class="line">git log -n2       # 显示最近的两次变更</span><br><span class="line">git log --all --graph # 在上面的基础上,添加图形化的版本演进</span><br></pre></td></tr></table></figure><h4 id="2-2-1-新建和切换分支"><a href="#2-2-1-新建和切换分支" class="headerlink" title="2.2.1 新建和切换分支"></a>2.2.1 新建和切换分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个命令其实相当于创建分支和切换分支两条命令(因为-b参数)</span></span><br><span class="line">git branch 分支名   # 创建分支</span><br><span class="line">git checkout 分支名 # 切换分支</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前工作分支</span></span><br><span class="line">git branch -av</span><br></pre></td></tr></table></figure><h3 id="2-3-回退修改"><a href="#2-3-回退修改" class="headerlink" title="2.3 回退修改"></a>2.3 回退修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard # 彻底回退,暂存区和所有未提交的变更记录都会被清理</span><br></pre></td></tr></table></figure><h3 id="2-4-文件重命名"><a href="#2-4-文件重命名" class="headerlink" title="2.4 文件重命名"></a>2.4 文件重命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv 文件原名 文件现名</span><br></pre></td></tr></table></figure><h3 id="2-5-比较版本的差异"><a href="#2-5-比较版本的差异" class="headerlink" title="2.5 比较版本的差异"></a>2.5 比较版本的差异</h3><p>我们可以先查看一下历史:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --oneline</span></span><br><span class="line"></span><br><span class="line">af289f0 (HEAD -&gt; master) add OnlyMaster.rs</span><br><span class="line">1f39a38 add Hello.c</span><br><span class="line">1d294ca (test) hello.py renamed to Hello.py</span><br><span class="line">5f06285 add hello.py</span><br><span class="line">7499e49 add ReadMe</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff 7499e49 5f06285</span></span><br><span class="line"></span><br><span class="line">diff --git a/hello.py b/hello.py</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..ce47b77</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/hello.py</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+print("hello")</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p>如果是使用当前版本进行比较,我们可以使用HEAD来指代:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff 5f06285 HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 和当前版本的上一个版本比较</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD~1 HEAD <span class="comment"># 其中数字可以替换,也可以使用~~来代表~2</span></span></span><br></pre></td></tr></table></figure><h3 id="2-6-删除分支"><a href="#2-6-删除分支" class="headerlink" title="2.6 删除分支"></a>2.6 删除分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d &lt;BranchName&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有时候-d会删除不了,如果确认没有风险,可以使用-D</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -D &lt;BranchName&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、工作区与暂存区的认识"><a href="#三、工作区与暂存区的认识" class="headerlink" title="三、工作区与暂存区的认识"></a>三、工作区与暂存区的认识</h2><p>在<code>Git</code>当中,如果仅对文件作了<code>add</code>,但没有执行<code>commit</code>的话,文件会被存储进<strong>暂存区</strong>,而我们对文件进行创作修改的区域被称为<strong>工作区</strong></p><p>当我们将文件提交进<strong>暂存区</strong>后,依然可以在<strong>工作区</strong>继续修改我们的文件,而此时暂存区内的文件是<strong>独立于工作区</strong>的</p><p>这也就意味着,我们随时可以用<strong>暂存区</strong>内的版本<strong>覆盖工作区</strong>(如对工作区的修改不满意),而又不需要提交到版本控制,这在实践当中非常实用</p><p>补充:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -u # 将项目中所有工作区的文件一起提交到暂存区,而不需要一个个写文件名</span><br></pre></td></tr></table></figure><h2 id="四、图形化工具的介绍"><a href="#四、图形化工具的介绍" class="headerlink" title="四、图形化工具的介绍"></a>四、图形化工具的介绍</h2><p>直接在命令行输入<code>gitk</code>即可.</p><p>在MacOS上,如果使用的是Xcode提供的git是没有<code>gitk</code>工具的,需要使用brew安装一下</p><p>同时如果使用的是MacOS的暗主题,<code>gitk</code>的菜单栏上的文字会因为和底色相同的原因看不见,需要将鼠标移上去</p><h2 id="五、了解-git目录"><a href="#五、了解-git目录" class="headerlink" title="五、了解.git目录"></a>五、了解.git目录</h2><h3 id="5-1-HEAD文件"><a href="#5-1-HEAD文件" class="headerlink" title="5.1 HEAD文件"></a>5.1 HEAD文件</h3><p>首先,我们进入<code>.git</code>目录,尝试查看一下<code>HEAD</code>文件的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat HEAD</span></span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>我们会发现<code>HEAD</code>文件其实是一个引用,而且指向的位置和当前工作的分支有关,如当前工作分支为<code>master</code></p><p>而假设我们当前切换分支到了<code>test</code>,那么此时HEAD文件就会指向<code>test</code>分支</p><h3 id="5-2-config文件"><a href="#5-2-config文件" class="headerlink" title="5.2 config文件"></a>5.2 config文件</h3><p>该文件下除了保存了该仓库下的核心配置之外,如果设置了仓库级别的用户配置,也会写入该文件</p><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --local user.username "test" # 修改当前仓库的用户名</span><br></pre></td></tr></table></figure><p>该文件内的内容则会变为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = true</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">ignorecase = true</span><br><span class="line">precomposeunicode = true</span><br><span class="line">[user]</span><br><span class="line">username = test</span><br></pre></td></tr></table></figure><h3 id="5-3-refs目录"><a href="#5-3-refs目录" class="headerlink" title="5.3 refs目录"></a>5.3 refs目录</h3><p>在refs目录中,存在两个子目录:</p><ol><li>heads:里面有各个分支的子文件</li><li>tags:里面有各个标签(可看作是里程碑)的子文件</li></ol><p>先看heads目录,我们先查看一下master文件的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat master</span></span><br><span class="line">1d294ca4f3dd9a0d2adef1528f18afd8ef3ca3d3</span><br></pre></td></tr></table></figure><p>我们还可以查看该文件是什么类型的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -t master <span class="comment"># -t参数可以查看类型</span></span></span><br><span class="line">commit</span><br></pre></td></tr></table></figure><p>同样的,在tag目录下的文件里面存放的也是hash值,文件类型属于<code>tag</code></p><p>通过以下命令可以查看该<code>tag</code>是存放的哪一个<code>commit</code>对象:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p tag名或tag的hash # -p参数可以查看内容</span><br></pre></td></tr></table></figure><h3 id="5-4-objects目录"><a href="#5-4-objects目录" class="headerlink" title="5.4 objects目录"></a>5.4 objects目录</h3><p>我们进入objects目录后,会看到很多两个字符组成的文件夹,以及pack(打包目录)</p><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -la</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">06</span><br><span class="line">1d</span><br><span class="line">3d</span><br><span class="line">3e</span><br><span class="line">info</span><br><span class="line">pack</span><br></pre></td></tr></table></figure><p>我们随便挑选一个两个字符的目录进去,会发现内部文件是这样的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> 06</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -la</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">0fede4878a49e95fc444e9a243fa77edc710f4</span><br></pre></td></tr></table></figure><p>此时我们可以使用命令查看一下该对象的<strong>类型</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意:此处的<span class="built_in">hash</span>为[两位长度的目录名 + 目录内文件名]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -t 060fede4878a49e95fc444e9a243fa77edc710f4</span></span><br><span class="line">tree</span><br></pre></td></tr></table></figure><p><code>tree</code>即目录类型</p><p>然后,我们可以查看该对象的<strong>内容</strong>,使用以下命令(参数: -p):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 060fede4878a49e95fc444e9a243fa77edc710f4</span></span><br><span class="line">100644 blob 827ae020300b109c1e0e7ee58891e592d85df66cREADME.md</span><br><span class="line">100644 blob ce47b771f4fdb0c612745ca4b7c36695f3853f7chello.py</span><br></pre></td></tr></table></figure><p><code>blob</code>即是文件对象类型</p><p>我们可以进一步查看该<code>blob</code>类型:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -t 827ae020300b109c1e0e7ee58891e592d85df66c <span class="comment"># 查看类型</span></span></span><br><span class="line">blob</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 827ae020300b109c1e0e7ee58891e592d85df66c <span class="comment"># 查看内容</span></span></span><br><span class="line">版本1:</span><br><span class="line">1+1=2</span><br></pre></td></tr></table></figure><p>至此,我们已经接触了git的如下几种类型:</p><ol><li>commit</li><li>tag</li><li>tree</li><li>blob</li></ol><p><strong>提示:</strong> 在<code>git</code>中,只要两个文件内容相同,那么对于git就是唯一的一个<code>blob</code></p><h4 id="5-4-1-commit、tree、blob三者的关系"><a href="#5-4-1-commit、tree、blob三者的关系" class="headerlink" title="5.4.1 commit、tree、blob三者的关系"></a>5.4.1 commit、tree、blob三者的关系</h4><p>我们可以通过<code>git log</code>命令查询到每一次的commit的hash,如果我们查询某次commit的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 7499e499b62642764e31475f <span class="comment"># hash不需要输入完整,只要能让git唯一找到目标就可以</span></span></span><br><span class="line">tree 3d5799c550fa4b815545f0255ad83d16debce7f0</span><br><span class="line">author SherlockGy &lt;sherlockgy@live.com&gt; 1574435790 +0800</span><br><span class="line">committer SherlockGy &lt;sherlockgy@live.com&gt; 1574435790 +0800</span><br><span class="line"></span><br><span class="line">add ReadMe</span><br></pre></td></tr></table></figure><p>我们会发现,commit对象中永远存储了一个tree,该tree代表截止该的commit为止,此git项目的所有内容,我们可以继续查看该tree的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cat-file -p 3d5799c550fa4b815545f02</span></span><br><span class="line">100644 blob 827ae020300b109c1e0e7ee58891e592d85df66cREADME.md</span><br></pre></td></tr></table></figure><p>也就是说,此commit提交后,我们的git项目中仅有一个文件,因此显示为一个<code>blob</code>对象;如果此时还有子目录的话,会显示为一个<code>tree</code>对象</p><p>这就是三种对象的关系</p><h2 id="六、使用分离头指针"><a href="#六、使用分离头指针" class="headerlink" title="六、使用分离头指针"></a>六、使用分离头指针</h2><p>现在假设有这样一个场景,我们要基于master的倒数第二个commit来创建一个分支,由于我们并不是基于最新的commit,所以要先<strong>把分支切换到commit上</strong>,而不是branch上,这就是<code>分离头指针</code></p><p>不过千万要谨慎操作,因为分离后的branch是没有名字的,如果不赋予名字,后面会导致修改丢失.</p><p>示例如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到一个commit上,而不是branch,从而实现分离头指针</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout 1d294ca4f3dd9a0d2adef1528f18afd8ef3ca3d3</span></span><br><span class="line"></span><br><span class="line">注意：正在切换到 '1d294ca4f3dd9a0d2adef1528f18afd8ef3ca3d3'。</span><br><span class="line"></span><br><span class="line">您正处于分离头指针状态。您可以查看、做试验性的修改及提交，并且您可以在切换</span><br><span class="line">回一个分支时，丢弃在此状态下所做的提交而不对分支造成影响。</span><br><span class="line"></span><br><span class="line">如果您想要通过创建分支来保留在此状态下所做的提交，您可以通过在 switch 命令</span><br><span class="line">中添加参数 -c 来实现（现在或稍后）。例如：</span><br><span class="line"></span><br><span class="line">  git switch -c &lt;新分支名&gt;</span><br><span class="line"></span><br><span class="line">或者撤销此操作：</span><br><span class="line"></span><br><span class="line">  git switch -</span><br><span class="line"></span><br><span class="line">通过将配置变量 advice.detachedHead 设置为 false 来关闭此建议</span><br><span class="line"></span><br><span class="line">HEAD 目前位于 1d294ca hello.py renamed to Hello.py</span><br></pre></td></tr></table></figure><p>然后我们查看一下当前branch的情况:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line">* (头指针分离于 1d294ca)</span><br><span class="line">  master</span><br><span class="line">  test</span><br><span class="line">  test2</span><br></pre></td></tr></table></figure><p>现在让我们来创建一个分离后的文件吧:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"我是分离头指针版本独有的文件内容"</span> &gt; 分离头指针.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add 分离头指针.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"add 分离头指针.txt"</span></span></span><br></pre></td></tr></table></figure><p>此时我们的新分支是没有名字的,如果我们切换到其他分支,有可能会导致该分支上的修改失效</p><p>这里我们尝试切换到master分支:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"></span><br><span class="line">警告：您正丢下 1 个提交，未和任何分支关联：</span><br><span class="line"></span><br><span class="line">  718daed add 分离头指针.txt</span><br><span class="line"></span><br><span class="line">如果您想要通过创建新分支保存它，这可能是一个好时候。</span><br><span class="line">如下操作：</span><br><span class="line"></span><br><span class="line"> git branch &lt;新分支名&gt; 718daed</span><br><span class="line"></span><br><span class="line">切换到分支 'master'</span><br></pre></td></tr></table></figure><p>所以这里我们按照提示,给没有名字的新分支一个名字:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch 实验分离头指针分支 718daed</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line">* master</span><br><span class="line">  test</span><br><span class="line">  test2</span><br><span class="line">  实验分离头指针分支</span><br></pre></td></tr></table></figure><p>然后我们来一起看一下当前的log:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --all --graph</span></span><br><span class="line"></span><br><span class="line">* commit 718daedc590da60e771debf95657de8639d4e1db (实验分离头指针分支)</span><br><span class="line">| Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">| Date:   Sun Nov 24 15:58:00 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     add 分离头指针.txt</span><br><span class="line">|</span><br><span class="line">| * commit af289f05ffcba29d35eaaa30e6105244ed67b0ed (HEAD -&gt; master)</span><br><span class="line">| | Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">| | Date:   Sun Nov 24 15:51:37 2019 +0800</span><br><span class="line">| |</span><br><span class="line">| |     add OnlyMaster.rs</span><br><span class="line">| |</span><br><span class="line">| | * commit 5467beb8fdc754ddb14e31dfcd58790dfd9337fb (test2)</span><br><span class="line">| |/  Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">| |   Date:   Sun Nov 24 15:48:25 2019 +0800</span><br><span class="line">| |</span><br><span class="line">| |       add HelloAgain.go</span><br><span class="line">| |</span><br><span class="line">| * commit 1f39a383ff3c1140affc1e128b0de17b1c909238</span><br><span class="line">|/  Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">|   Date:   Sun Nov 24 15:22:02 2019 +0800</span><br><span class="line">|</span><br><span class="line">|       add Hello.c</span><br><span class="line">|</span><br><span class="line">* commit 1d294ca4f3dd9a0d2adef1528f18afd8ef3ca3d3 (test)</span><br><span class="line">| Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">| Date:   Sat Nov 23 20:26:10 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     hello.py renamed to Hello.py</span><br><span class="line">|</span><br><span class="line">* commit 5f0628574c79dbc9ebfb1856ec882a80e5946c2b</span><br><span class="line">| Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">| Date:   Sat Nov 23 19:37:30 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     add hello.py</span><br><span class="line">|</span><br><span class="line">* commit 7499e499b62642764e31475f4119dc253ca2f151</span><br><span class="line">  Author: SherlockGy &lt;sherlockgy@live.com&gt;</span><br><span class="line">  Date:   Fri Nov 22 23:16:30 2019 +0800</span><br><span class="line"></span><br><span class="line">      add ReadMe</span><br></pre></td></tr></table></figure><p>由此可见,我们顺利得在master之前的版本上创建了分支</p>]]></content>
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言实用库02——文本编码</title>
      <link href="/2019/10/21/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%94%A8%E5%BA%9302%E2%80%94%E2%80%94%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/"/>
      <url>/2019/10/21/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%94%A8%E5%BA%9302%E2%80%94%E2%80%94%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>假设有一文本，编码为<code>GBK</code>，文本内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你好，中国</span><br><span class="line">我爱你，中国！</span><br></pre></td></tr></table></figure><p>由于<code>Go</code>默认按照<code>utf-8</code>的码表去解析，所以会导致乱码</p><p>在<code>Go</code>官方提供的库里面，有一个库可以解决这个问题，但是不包含在标准库内，需要使用<code>go get golang.org/x/text</code>下载</p><blockquote><p><strong>提醒：</strong>下载之前请一定配置代理，可参考<a href="https://sherlockgy.github.io/2019/09/24/Go%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">这篇文章</a></p></blockquote><p>使用方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/text/encoding/simplifiedchinese"</span></span><br><span class="line"><span class="string">"golang.org/x/text/transform"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="string">"/Users/sherlockgy/Desktop/test.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, e := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"打开文件错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码转换</span></span><br><span class="line">newReader := transform.NewReader(file, simplifiedchinese.GBK.NewDecoder())</span><br><span class="line"></span><br><span class="line">newBytes, e := ioutil.ReadAll(newReader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"读取内容错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, newBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码猜测"><a href="#编码猜测" class="headerlink" title="编码猜测"></a>编码猜测</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="string">"/Users/sherlockgy/Desktop/test.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, e := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"打开文件错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码猜测</span></span><br><span class="line">encoding := determineEncoding(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码转换</span></span><br><span class="line">newReader := transform.NewReader(file, encoding.NewDecoder())</span><br><span class="line"></span><br><span class="line">newBytes, e := ioutil.ReadAll(newReader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"读取内容错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, newBytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猜测编码类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">determineEncoding</span><span class="params">(r io.Reader)</span> <span class="title">encoding</span>.<span class="title">Encoding</span></span> &#123;</span><br><span class="line">bytes, err := bufio.NewReader(r).Peek(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">encoding, name, certain := charset.DetermineEncoding(bytes, <span class="string">""</span>)</span><br><span class="line">fmt.Printf(<span class="string">"编码类型为：%s\n是否确定：%v\n"</span>, name, certain)</span><br><span class="line"><span class="keyword">return</span> encoding</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言实用库01——正则表达式</title>
      <link href="/2019/10/21/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%94%A8%E5%BA%9301%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/10/21/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%94%A8%E5%BA%9301%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Go语言中的正则表达式"><a href="#Go语言中的正则表达式" class="headerlink" title="Go语言中的正则表达式"></a>Go语言中的正则表达式</h1><h2 id="一、正则表达式匹配"><a href="#一、正则表达式匹配" class="headerlink" title="一、正则表达式匹配"></a>一、正则表达式匹配</h2><h3 id="1-1-匹配单个子串"><a href="#1-1-匹配单个子串" class="headerlink" title="1.1 匹配单个子串"></a>1.1 匹配单个子串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"my email is sherlockjgy@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 正则表达式规则声明，解析正则表达式</span></span><br><span class="line"><span class="comment">// 返回Regexp对象，用于后续操作</span></span><br><span class="line">compile, err := regexp.Compile(<span class="string">`[A-Za-z0-9]+@[A-Za-z0-9]+\.[A-Za-z0-9]+`</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"你的正则表达式存在语法错误！"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 从目标字符串当中查找是否存在符合正则表达式规则的字符子串</span></span><br><span class="line">    <span class="comment">// 返回true or false</span></span><br><span class="line">isMatch := compile.MatchString(str)</span><br><span class="line">fmt.Printf(<span class="string">"目标字符串中是否存在符合规则的子串：%v\n"</span>, isMatch) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从目标字符串当中查找并返回符合正则表达式规则的字符子串</span></span><br><span class="line">    <span class="comment">// 若不存在，则返回空串</span></span><br><span class="line">matchString := compile.FindString(str)</span><br><span class="line">fmt.Println(matchString) <span class="comment">// sherlockjgy@gmail.com</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提醒：</strong>建议将正则表达式规则书写在【`】引号（键盘1左边的按键）中，这样Go语言不会解析表达式中的转义字符，否则每个斜杠都需要双斜杠代替</p></blockquote><h3 id="1-2-匹配多个子串"><a href="#1-2-匹配多个子串" class="headerlink" title="1.2 匹配多个子串"></a>1.2 匹配多个子串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`my email are sherlockjgy@gmail.com</span></span><br><span class="line"><span class="string">and shelockgy@live.com`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 正则表达式规则声明，解析正则表达式</span></span><br><span class="line"><span class="comment">// 返回Regexp对象，用于后续操作</span></span><br><span class="line">compile, err := regexp.Compile(<span class="string">`[A-Za-z0-9]+@[A-Za-z0-9]+\.[A-Za-z0-9]+`</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"你的正则表达式存在语法错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从目标字符串当中查找并返回【多个】符合正则表达式规则的字符子串</span></span><br><span class="line">    <span class="comment">// 第二个参数代表需要查询多少个符合要求的子串，-1代表查询所有</span></span><br><span class="line">matchString := compile.FindAllString(str, <span class="number">-1</span>)</span><br><span class="line">fmt.Println(matchString, <span class="built_in">len</span>(matchString)) <span class="comment">// [sherlockjgy@gmail.com shelockgy@live.com] 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-字符串匹配并分组"><a href="#1-3-字符串匹配并分组" class="headerlink" title="1.3 字符串匹配并分组"></a>1.3 字符串匹配并分组</h3><p>在正则表达式中运用小括号，可以对被匹配成功对子串进行分组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`my email are sherlockjgy@gmail.com</span></span><br><span class="line"><span class="string">and shelockgy@live.com</span></span><br><span class="line"><span class="string">and helloworld@test.com.cn`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 正则表达式规则声明，解析正则表达式</span></span><br><span class="line"><span class="comment">// 返回Regexp对象，用于后续操作</span></span><br><span class="line">compile, err := regexp.Compile(<span class="string">`([A-Za-z0-9]+)@([A-Za-z0-9]+)([.A-Za-z0-9]+)`</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"你的正则表达式存在语法错误！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个二维数组</span></span><br><span class="line">matchString := compile.FindAllStringSubmatch(str, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> matchString &#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[sherlockjgy@gmail.com sherlockjgy gmail .com]</span><br><span class="line">[shelockgy@live.com shelockgy live .com]</span><br><span class="line">[helloworld@test.com.cn helloworld test .com.cn]</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言从入门到实战（二）</title>
      <link href="/2019/09/28/Go%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/09/28/Go%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Go语言从入门到实战（二）"><a href="#Go语言从入门到实战（二）" class="headerlink" title="Go语言从入门到实战（二）"></a>Go语言从入门到实战（二）</h1><h2 id="一、变量与常量"><a href="#一、变量与常量" class="headerlink" title="一、变量与常量"></a>一、变量与常量</h2><h3 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h3><p>我们先来看一下<code>Go</code>语言当中的标准变量声明方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"tom"</span></span><br></pre></td></tr></table></figure><p>其中，<code>var</code>是声明变量的关键字，而<code>name</code>就是我们的变量名。需要特别注意的是，作为类型的<code>string</code>被放在了变量名的后面。这样设计主要是为了引导程序员使用<strong>类型自动推导</strong>，从而省略变量类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类型推导</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"tom"</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>拓展：</strong>这种类型后置的设计在现代编程语言当中已经非常常见了，如<code>Scala</code>、<code>Kotlin</code>、<code>Swift</code>、<code>Rust</code>等</p></blockquote><p>而当我们需要一次性声明多个变量的时候，则可以使用代码块来做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">age     <span class="keyword">int</span></span><br><span class="line">address <span class="keyword">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当我们的变量是局部变量的时候，我们还可以使用<code>简短声明</code>的方法来声明变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">name := <span class="string">"tom"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们有几个注意点需要强调：</p><ol><li>简短声明<strong>仅可使用于局部</strong>，全局变量必须使用<code>var</code>关键字声明</li><li><strong>局部变量</strong>一经声明必须被使用，否则将会编译错误；如果需要丢弃该变量，则使用<strong>下划线</strong><code>_</code>命名变量</li><li>全局变量是<code>包</code>级别的变量，而不是以单个文件作为作用域；全局变量可以声明但不使用</li><li>局部变量如果是不同类型（包括int32与int64也不是相同类型），无论如何都不能直接运算，而需要显式类型转换</li></ol><h3 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量"></a>1.2 常量</h3><p><code>Go</code>语言的常量使用<code>const</code>关键字进行声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"tom"</span></span><br></pre></td></tr></table></figure><p>同样，变量类型是可以省略的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"tom"</span></span><br></pre></td></tr></table></figure><p>当我们需要一次性声明多个常量的时候，同样可以使用代码块来做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name = <span class="string">"tom"</span></span><br><span class="line">age  = <span class="number">11</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>关于常量，我们也有几点需要强调的：</p><ol><li>常量声明<strong>必须使用关键字的方式</strong>，不能使用简短声明</li><li>常量可以声明后不使用</li><li>常量如果是以<strong>省略变量类型的方式</strong>声明的，<code>整型</code>和<code>浮点型</code>变量之间可以直接运算</li></ol><h3 id="1-3-基于常量的枚举类型"><a href="#1-3-基于常量的枚举类型" class="headerlink" title="1.3 基于常量的枚举类型"></a>1.3 基于常量的枚举类型</h3><p><code>Go</code>并不提供专门的枚举类型关键字，如其他语言当中常见的<code>enum</code>。而是通过常量的关键字<code>const</code> + <code>iota</code>的方式，实现枚举</p><p>我们先来看一段示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">9</span>     <span class="comment">// iota值为0，虽然没有被使用，iota依然存在</span></span><br><span class="line">b = <span class="literal">iota</span>  <span class="comment">// iota值为1，所以b为1</span></span><br><span class="line">c         <span class="comment">// iota值为2，c继续使用b的表达式，所以c为2</span></span><br><span class="line">d = <span class="number">10</span>    <span class="comment">// iota值为3，虽然没有被使用，iota依然存在</span></span><br><span class="line">e = <span class="literal">iota</span>  <span class="comment">// iota值为4，所以e为4</span></span><br><span class="line">f = <span class="string">"abc"</span> <span class="comment">// iota值为5，f为"abc"</span></span><br><span class="line">g         <span class="comment">// iota值为6，g继续使用f的表达式，所以g为"abc"</span></span><br><span class="line">h = <span class="literal">iota</span>  <span class="comment">// iota值为7，所以h为7</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> i = <span class="literal">iota</span> <span class="comment">// 新的const，iota重制为0，所以i为0</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a = %v, b = %v, c = %v, "</span>, a, b, c)</span><br><span class="line">fmt.Printf(<span class="string">"d = %v, e = %v, f = %v, "</span>, d, e, f)</span><br><span class="line">fmt.Printf(<span class="string">"g = %v, h = %v, i = %v"</span>, g, h, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 9, b = 1, c = 2, d = 10, e = 4, f = abc, g = abc, h = 7, i = 0</span><br></pre></td></tr></table></figure><p>通过上述例子，可以总结为：</p><ol><li><code>iota</code>不管是否被使用，在同一个<code>const</code>代码块内，都会从0开始不断自增；如果遇到新的<code>const</code>，则重制为0</li><li>如果<code>枚举项</code>没有声明表达式，则继承上一个<code>枚举项</code>的表达式</li></ol><h2 id="二、Go语言的数据类型"><a href="#二、Go语言的数据类型" class="headerlink" title="二、Go语言的数据类型"></a>二、Go语言的数据类型</h2><h3 id="2-1-布尔与字符串类型"><a href="#2-1-布尔与字符串类型" class="headerlink" title="2.1 布尔与字符串类型"></a>2.1 布尔与字符串类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">bool</td><td style="text-align:center">布尔类型（true、flase）</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">字符串</td></tr></tbody></table><h3 id="2-2-无符号整数类型"><a href="#2-2-无符号整数类型" class="headerlink" title="2.2 无符号整数类型"></a>2.2 无符号整数类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">uint</td><td style="text-align:center">长度由系统架构类型决定</td></tr><tr><td style="text-align:center">uint8</td><td style="text-align:center">长度为8位，即1字节（0～255）</td></tr><tr><td style="text-align:center">uint16</td><td style="text-align:center">长度为16位，即2字节（0 到 65535）</td></tr><tr><td style="text-align:center">uint32</td><td style="text-align:center">长度为32位，即4字节（0 到 4294967295）</td></tr><tr><td style="text-align:center">uint64</td><td style="text-align:center">长度为64位，即8字节（0 到 18446744073709551615）</td></tr><tr><td style="text-align:center">uintptr</td><td style="text-align:center">长度为8位，即1字节（0～255）</td></tr></tbody></table><h3 id="2-3-有符号整数类型"><a href="#2-3-有符号整数类型" class="headerlink" title="2.3 有符号整数类型"></a>2.3 有符号整数类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">长度由系统架构类型决定</td></tr><tr><td style="text-align:center">int8</td><td style="text-align:center">长度为8位，即1字节（-128 到 127）</td></tr><tr><td style="text-align:center">int16</td><td style="text-align:center">长度为16位，即2字节（-32768 到 32767）</td></tr><tr><td style="text-align:center">int32</td><td style="text-align:center">长度为32位，即4字节（-2147483648 到 2147483647）</td></tr><tr><td style="text-align:center">int64</td><td style="text-align:center">长度为64位，即8字节（-9223372036854775808 到 9223372036854775807）</td></tr></tbody></table><p><strong>注意：</strong>虽然<code>int</code>类型和<code>uint</code>类型长度没有指定，但是不代表它们可以像<code>Python</code>这种语言一样不限制<code>int</code>的大小。例如在64位操作系统上，<code>int</code>和<code>uint</code>的最大值就是<code>int64</code>和<code>uint64</code>的最大值</p><p>我们也可以在代码中轻松获得每个数值类型的最大最小值，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.MaxInt8)</span><br><span class="line">fmt.Println(math.MinInt8)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果我们需要操作的数字的大小，<code>int64</code>已经无法满足了，要怎么办呢？</p><p>我们可以使用<code>math/big</code>包下的函数进行处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, _ := <span class="built_in">new</span>(big.Int).SetString(<span class="string">"999999999999999999999999999999999999"</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这一点，此处就不再多说了，毕竟这不是目前的重点。如果需要更多内容，可以直接查找相关API文档</p><h3 id="2-4-浮点数类型"><a href="#2-4-浮点数类型" class="headerlink" title="2.4 浮点数类型"></a>2.4 浮点数类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">float32</td><td style="text-align:center">长度为4个字节，IEEE-754 32位浮点型数</td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">长度为8个字节，IEEE-754 64位浮点型数</td></tr></tbody></table><p>不同于整型当中的<code>int</code>类型，浮点数类型要么是<code>float32</code>要么就是<code>float64</code>，不存在<code>float</code>这个类型</p><p>在使用<code>简短声明</code>的时候，编译器会根据当前计算机的架构自动进行推断，从而决定使用<code>float32</code>还是<code>float64</code></p><h4 id="2-4-1-浮点数与字符串类型的转换"><a href="#2-4-1-浮点数与字符串类型的转换" class="headerlink" title="2.4.1 浮点数与字符串类型的转换"></a>2.4.1 浮点数与字符串类型的转换</h4><p>浮点数转换为字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> f64 <span class="keyword">float64</span> = <span class="number">1.12</span></span><br><span class="line">str := strconv.FormatFloat(f64, <span class="string">'E'</span>, <span class="number">-1</span>, <span class="number">64</span>)</span><br><span class="line">str2 := fmt.Sprintf(<span class="string">"%v"</span>, f64)</span><br><span class="line">fmt.Println(str)  <span class="comment">// 1.12E+00</span></span><br><span class="line">fmt.Println(str2) <span class="comment">// 1.12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串转换为浮点数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"3.1415926"</span></span><br><span class="line">float, _ := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">fmt.Println(float)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-复数类型"><a href="#2-5-复数类型" class="headerlink" title="2.5 复数类型"></a>2.5 复数类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">complex64</td><td style="text-align:center">32 位复数（实部与虚部分别32位）</td></tr><tr><td style="text-align:center">complex128</td><td style="text-align:center">64 位实数和虚数（实部与虚部分别64位）</td></tr></tbody></table><h3 id="2-6-别名类型"><a href="#2-6-别名类型" class="headerlink" title="2.6 别名类型"></a>2.6 别名类型</h3><h4 id="2-6-1-byte和rune"><a href="#2-6-1-byte和rune" class="headerlink" title="2.6.1 byte和rune"></a>2.6.1 byte和rune</h4><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">字节类型，uint8类型的别名</td></tr><tr><td style="text-align:center">rune</td><td style="text-align:center">字符类型，int32类型的别名</td></tr></tbody></table><p>因为<code>Go</code>语言的<code>rune</code>和其他语言的<code>char</code>还是有较大差异，所以我们在这里针对<code>rune</code>类型，多做一些介绍</p><p>我们先看一下<code>Go</code>语言源码中，对于<code>rune</code>类型的注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span><br><span class="line"><span class="comment">// used, by convention, to distinguish character values from integer values.</span></span><br><span class="line"><span class="comment">// 符文是int32的别名，在所有方面都等同于int32。按照惯例，用于区分字符值和整数值。</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br></pre></td></tr></table></figure><p>因此，<code>rune</code>其实并不是一个独立的类型，它只是<code>int32</code>类型的另一个称呼罢了。所以，<code>rune</code>类型可以和<code>int32</code>类型直接做计算，而不需要任何转换。</p><p>如果我们直接将<code>rune</code>类型的值打印出来，那么它就是一个数字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="string">'a'</span></span><br><span class="line">fmt.Println(c)       <span class="comment">// 97</span></span><br><span class="line">fmt.Printf(<span class="string">"%c\n"</span>, c) <span class="comment">// a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>rune</code>类型的类型转换，下面给出两个示例：</p><p><strong>例1:</strong></p><p>将<code>rune</code>类型转换为字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="string">'a'</span></span><br><span class="line">  <span class="comment">// 方法1</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(c))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法2</span></span><br><span class="line">str := fmt.Sprintf(<span class="string">"%c"</span>, c)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例2：</strong></p><p>将<code>rune</code>类型所代表的数字，转换为字符串：</p><p>这个问题其实可以等价为，将整型转换为字符串。在其他语言当中，如<code>Python</code>，我们是直接使用<code>str()</code>函数进行转换的，但是因为<code>Go</code>语言的<code>rune</code>类型的存在，如果直接使用<code>string()</code>函数，就会得到该<strong>数字对应的字符</strong>，而不是数字本身的字符串格式。这显然不是我们想要的。</p><p>正确的做法应为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">97</span></span><br><span class="line">  <span class="comment">// 方法1</span></span><br><span class="line">fmt.Println(strconv.Itoa(i)) <span class="comment">// 97</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方法2 可以同时进行进制转换</span></span><br><span class="line">  fmt.Println(strconv.FormatInt(<span class="keyword">int64</span>(i), <span class="number">10</span>)) <span class="comment">// 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-2-类型定义与类型别名"><a href="#2-6-2-类型定义与类型别名" class="headerlink" title="2.6.2 类型定义与类型别名"></a>2.6.2 类型定义与类型别名</h4><p>这两个概念我们需要重点区分：<code>类型定义</code>和<code>类型别名</code></p><p>什么是<code>类型定义</code>？举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i myInt = <span class="number">100</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子当中，<code>myInt</code>这个类型就是我们新定义的。那为什么说是新定义的呢？因为，它和<code>int</code>类型其实并不是一个类型。他只是与<code>int</code>类型有共同的实现、共同的能力罢了。</p><p>我们知道<code>Go</code>是一个强类型语言，且不存在类型隐式转换。只要不是同一个类型，就不能直接运算，如下面的代码是不能编译成功的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i myInt = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">100</span>        <span class="comment">// 默认为int类型</span></span><br><span class="line">fmt.Println(i + j) <span class="comment">// invalid operation: i + j (mismatched types myInt and int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们直接与字面量运算，还是没有问题的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i myInt = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> j = i + <span class="number">100</span></span><br><span class="line">fmt.Println(j) <span class="comment">// 200 并且此时的j也是myInt类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过使用<code>类型定义</code>这个特性来拓展原有类型的能力：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们给新的整数类型myInt赋予了自动翻倍的能力</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t myInt)</span> <span class="title">double</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(t * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">100</span></span><br><span class="line">newNum := myInt(i).double()</span><br><span class="line">fmt.Println(newNum) <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>类型别名</code>像我们上述提到<code>type</code>和<code>rune</code>时介绍的一样，并不是一个新的类型，只是叫法不同。这个特性是在Go1.9版本时引入的。</p><p>不同于<code>类型定义</code>，我们无法对别名类型的能力进行拓展，因为本来就是同一种类型</p><h2 id="三、条件与循环语句"><a href="#三、条件与循环语句" class="headerlink" title="三、条件与循环语句"></a>三、条件与循环语句</h2><h3 id="3-1-if条件语句"><a href="#3-1-if条件语句" class="headerlink" title="3.1 if条件语句"></a>3.1 if条件语句</h3><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"大于10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a &gt; <span class="number">5</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"a大于5"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"a小于5"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>Go</code>语言的<code>if</code>语句，其条件不需要放在括号中</p><h3 id="3-2-switch语句"><a href="#3-2-switch语句" class="headerlink" title="3.2 switch语句"></a>3.2 switch语句</h3><h4 id="3-2-1-基础switch"><a href="#3-2-1-基础switch" class="headerlink" title="3.2.1 基础switch"></a>3.2.1 基础switch</h4><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>:</span><br><span class="line">fmt.Println(<span class="string">"10以内的偶数"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>:</span><br><span class="line">fmt.Println(<span class="string">"10以内的奇数"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"不是10以内的自然数"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10以内的奇数</span><br></pre></td></tr></table></figure><p>这里应该能看出<code>Go</code>和其他主流编程语言的诸多不同，我们这里一一列举：</p><ol><li><code>Go</code>语言的switch语句可以用来匹配任何类型，包括结构体</li><li>每个<code>case</code>都可以匹配多个值</li><li>每个<code>case</code>都默认自带<code>break</code>，如果需要实现<code>switch穿透</code>，则在需要穿透的<code>case</code>结尾加上<code>fallthrough</code></li></ol><p>除此之外，<code>switch</code>还可以作为<code>if-else if</code>结构的简写版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> a &gt; <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">"大于10"</span>)</span><br><span class="line"><span class="keyword">case</span> a &gt; <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">"a大于5"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"a小于5"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-type-switch"><a href="#3-2-2-type-switch" class="headerlink" title="3.2.2 type switch"></a>3.2.2 type switch</h4><p>type switch主要用于对变量类型进行判断的场景，使用方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125; = <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> a.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Println(<span class="string">"int"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Println(<span class="string">"string"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要说明的是，<code>type switch</code>只能对<code>interface{}</code>类型使用，<code>interface{}</code>类型是一个<code>接口</code>，<code>Go</code>当中所有类型都实现了该接口，所以<code>type switch</code>其实就是判断一个<code>interface{}</code>的实现到底是什么类型</p><p>提到了<code>type switch</code>，就不能不提<code>type assertion</code>。<code>type assertion</code>是一个类型断言，他能帮助我们先校验类型，后执行操作。</p><p>如下面这个<code>s</code>就可以顺利作为参数传递给<code>println()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">interface</span>&#123;&#125; = <span class="string">"123"</span></span><br><span class="line">fmt.Println(s.(<span class="keyword">string</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-循环语句"><a href="#3-3-循环语句" class="headerlink" title="3.3 循环语句"></a>3.3 循环语句</h3><p><code>Go</code>只有<code>for</code>循，但是存在多种不同的使用方式。比如其他语言当中的<code>while</code>循环，在<code>Go</code>语言中也是通过<code>for</code>来实现</p><h4 id="3-3-1-经典for循环"><a href="#3-3-1-经典for循环" class="headerlink" title="3.3.1 经典for循环"></a>3.3.1 经典for循环</h4><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中注意点和<code>if</code>是一样的，即不需要使用括号来包围条件</p><h4 id="3-3-2-for循环变体"><a href="#3-3-2-for循环变体" class="headerlink" title="3.3.2 for循环变体"></a>3.3.2 for循环变体</h4><p><code>Go</code>中既然没有<code>while</code>循环，那么怎么实现<code>while</code>循环的效果呢？其实只要把<code>for</code>当作<code>while</code>就可以了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>还可以轻松实现无限循环，相比其他语言的<code>while(true)</code>更加简洁：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"forever"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-for…range"><a href="#3-3-3-for…range" class="headerlink" title="3.3.3 for…range"></a>3.3.3 for…range</h4><p>当我们需要遍历一个集合或者字符串的时候，使用经典<code>for</code>循环显然是太啰嗦了，我们可以使用<code>for...range</code>语句来简化语法，但是要注意，在某些场景下，<code>for...range</code>不仅仅是帮助我们简化了语法，还多做了一些人性化的事情，后面会详细讲到的。</p><p>经典<code>for</code>循环遍历数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言从入门到实战（一）</title>
      <link href="/2019/09/24/Go%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/09/24/Go%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Go语言从入门到实战（一）"><a href="#Go语言从入门到实战（一）" class="headerlink" title="Go语言从入门到实战（一）"></a>Go语言从入门到实战（一）</h1><h2 id="一、为什么要学习Go语言"><a href="#一、为什么要学习Go语言" class="headerlink" title="一、为什么要学习Go语言"></a>一、为什么要学习Go语言</h2><p>在开始我们的学习旅程之前，我们先来了解一下Go语言，通过建立一个宏观的印象，来熟悉一下Go这门语言，消除陌生的感觉。</p><p>首先要强调的是，Go是一门<strong>通用语言</strong>，这也就意味着，不管是<code>Java</code>、<code>C#</code>、<code>Python</code>还是<code>PHP</code>，这些语言可以做到的事情，理论上<code>Go</code>都可以做；Go可以做到的事情，理论上这些语言也都可以做到。</p><p>因此，我们在选择一门技术的时候，都是选择去看他<strong>最擅长</strong>的方面。</p><p>但是先别急，我们不妨先去探究一下，<code>Go</code>为什么会被发明？或者说，<code>Go</code>是为了解决什么样的问题而诞生的呢？当我们搞清楚这个问题，<code>Go</code>语言擅长做什么这个问题，也就不言自明了。</p><p>2007年前后，软件开发迎来了新挑战，主要包括：</p><ul><li>摩尔定律逐渐失效，多核硬件架构的广泛应用</li><li>超大规模分布式计算集群</li><li>Web模式导致的前所未有的开发规模和更新速度</li></ul><p>而为了解决这些问题，Google的三位大牛合作创造了Go语言：Rob Pike、Ken Thompson、Robert Griesemer。</p><ul><li><p>Rob Pike：Unix早期开发者、UTF-8创始人、Plan9操作系统创始人</p></li><li><p>Ken Thompson：Unix创始人、B语言创始人、UTF-8创始人、参与设计正则表达式、1983年图灵奖获得者</p></li><li><p>Robert Griesemer：Google V8 JS Engine开发者、Java Hot Spot开发者</p></li></ul><p>所以我们学习Go语言，其最主要的应用场景就是上面所提到的：多核架构下，超大规模集群的项目的开发。</p><p>而天生目标明确的Go语言，毫无疑问的具备鲜明的特点，让我们来一一了解。</p><h2 id="二、Go语言的特点"><a href="#二、Go语言的特点" class="headerlink" title="二、Go语言的特点"></a>二、Go语言的特点</h2><h3 id="2-1-简约"><a href="#2-1-简约" class="headerlink" title="2.1 简约"></a>2.1 简约</h3><p>Go语言所倡导的思想是“Less is more”，他的创造者们希望能用尽量简单的方法，去完成我们的工作，但是Go语言的简约不等于其简单，他的威力丝毫没有因为其简约的设计而弱于其他的编程语言。</p><p>Go语言设计的简约性可以体现在以下几个方面：</p><p>首先，就是关键字的数量：</p><table><thead><tr><th style="text-align:center">C</th><th style="text-align:center">Go</th><th style="text-align:center">C++ 11</th></tr></thead><tbody><tr><td style="text-align:center">37</td><td style="text-align:center">25</td><td style="text-align:center">84</td></tr></tbody></table><p>我们都知道<code>C</code>是一门简单而强大的系统级语言，而<code>Go</code>甚至做到了关键字的数量比他还要少；而<code>C++</code>是与<code>Go</code>语言的理念截然相反的，<code>C++</code>几乎吸收了所有他能吸收的特性，导致了他虽然功能强大，但是过于复杂。</p><h3 id="2-2-性能"><a href="#2-2-性能" class="headerlink" title="2.2 性能"></a>2.2 性能</h3><p>Go语言的特点不仅仅在于简约的设计，更少不了的是他强大的执行速度。</p><p>大家都知道<code>Python</code>也是一门上手迅速的编程语言，深受很多程序员的喜爱，然而他的问题就在于作为一门<code>解释性语言</code>性能较弱，因此，<code>Python</code>常用于一些对性能要求不高的地方，如充当“胶水语言”。</p><p>而<code>Go</code>作为一门编译型语言，其拥有超越<code>Java</code>的执行速度；又因为他的简约的设计，他还拥有接近<code>Python</code>的开发速度。同时具备这两个特性，使得Go语言充满了吸引力。</p><h3 id="2-3-组合的编程思想"><a href="#2-3-组合的编程思想" class="headerlink" title="2.3 组合的编程思想"></a>2.3 组合的编程思想</h3><p><code>组合</code>是一种比起传统<code>面向对象</code>编程语言当中的<code>继承</code>更加灵活的编程思想。</p><p><code>组合</code>是<code>has-a</code>的关系，而<code>继承</code>是<code>is-a</code>的关系。这种设计的优越性在于可以进一步的降低<code>耦合</code>，实现更小的<code>封装</code>从而保证功能的专注和单一。我们会在后面的学习中更加深入地感受到这种设计的优越性。</p><p>当然，没有最好的设计，只有更适合的设计。<code>组合</code>并不能全盘否定<code>继承</code>的价值。不过对于<code>Go</code>语言来说，<code>组合</code>更加接近其设计思想。</p><p>因此，我们在学习和使用<code>Go</code>的过程中，需要训练自己使用<code>组合</code>的方式来思考问题，而不是把<code>Go</code>的代码，写成了<code>Go</code>语法版本的<code>Java</code></p><h2 id="三、Go语言的Killer-Application"><a href="#三、Go语言的Killer-Application" class="headerlink" title="三、Go语言的Killer Application"></a>三、Go语言的Killer Application</h2><p>对于一门技术来说，最为重要的除了其即将能创造的价值以外，还有就是已经创造的价值。对一门编程语言来说，如果它曾经实现过<strong>杀手级应用</strong>，那么毫无疑问，对于该语言的推动与发展都是大有裨益的。</p><p>因为，这一方面杀手级应用证明了该语言开发复杂系统的能力，而不仅仅是一个大牛开发的玩具；另一方面，杀手级应用可以将部分应用自身的用户转化为开发该应用的技术的使用者。</p><blockquote><p><strong>杀手级应用</strong>（<strong>Killer application</strong>）是指一个极具价值的计算机程序或服务，消费者愿意为这个程序或服务购买特定硬件、软件产品或服务。——中文维基</p></blockquote><p><code>Go</code>语言就拥有数个杀手级应用：</p><p>用于云计算的两个关键应用是Go语言开发：</p><ul><li>Docker</li><li>Kubernetes</li></ul><p>用于区块链的杀手级应用和Go兼容最好：</p><ul><li>Ethereum</li><li>Hyperledger</li></ul><p>以及不得不提的：Go语言自身的编译器也是使用Go语言实现。这样的方式被称为：<strong>自举</strong></p><h2 id="四、Go语言的安装和准备工作"><a href="#四、Go语言的安装和准备工作" class="headerlink" title="四、Go语言的安装和准备工作"></a>四、Go语言的安装和准备工作</h2><h3 id="4-1-下载Go安装程序"><a href="#4-1-下载Go安装程序" class="headerlink" title="4.1 下载Go安装程序"></a>4.1 下载Go安装程序</h3><p>因为Google退出中国大陆的原因，我们正常无法直接从官方网站下载<code>Go</code>安装程序，推荐前往地址：<a href="https://studygolang.com/dl" target="_blank" rel="noopener">Go语言中文网</a>下载。</p><p>如果是Mac OS的用户，可以使用<code>home brew</code>安装。</p><h3 id="4-2-官网与文档"><a href="#4-2-官网与文档" class="headerlink" title="4.2 官网与文档"></a>4.2 官网与文档</h3><p>Golang的官网是<a href="https://golang.org" target="_blank" rel="noopener">https://golang.org</a>，不过因为上面提到的原因，国内不能正常访问，那么替代方案有这么几种：</p><ul><li><p>方案一：<a href="https://golang.google.cn/" target="_blank" rel="noopener">Google CN提供的镜像网站</a>：该网站最大的好处就是原版英文，可以获得等同于原官网的体验</p></li><li><p>方案二：<a href="https://go-zh.org/" target="_blank" rel="noopener">中文版官网</a>：该网站已经部分汉化了，可以帮助阅读英文有困难的同学们</p></li><li><p>方案三：使用Golang起一个本地服务：安装Golang后，在命令行里输入<code>godoc -http=:8080</code>，并在浏览器访问<code>http://localhost:8080/</code>即可访问本地官网（英文），8080是端口号，可以更改，这种方式优点在于不依赖网络</p></li><li><p>方案四：<a href="https://tip.golang.org/" target="_blank" rel="noopener">https://tip.golang.org/</a>是golang.org的完全限定域名，由Google提供，目前中国大陆可以正常访问</p></li></ul><p><strong>提醒：</strong>针对上面的【方案三】，需要补充说明一点：新版的<code>Go</code>安装程序已经不在包含<code>godoc</code>，必须自行安装<code>godoc</code>（中国大陆需要代理）。</p><h3 id="4-3-Go环境配置"><a href="#4-3-Go环境配置" class="headerlink" title="4.3 Go环境配置"></a>4.3 Go环境配置</h3><p>在此之前，我们先学习两个命令：</p><ol><li>查看当前Go语言版本：<code>go version</code></li><li>查看当前Go语言环境设置：<code>go env</code></li></ol><p>好，那我们开始吧：</p><p>配置环境变量<code>GOPATH</code>是至关重要的一个环节。所谓<code>GOPATH</code>，就是我们存放代码、编译程序的工作目录。</p><p>可以自己随意选择一个目录作为“GoPath”，然后将其配置到环境变量当中（具体配置方法可以参考【4.4设置代理】）</p><p>GoPath路径下的目录结构应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">|-src（必要，请自行创建）</span><br><span class="line">|-pkg</span><br><span class="line">|-bin</span><br></pre></td></tr></table></figure><p>其中，我们的代码就存放在<code>src</code>目录下，包括我们从网络上拉取的第三方包，也会存放在这里。</p><p><strong>建议：</strong>将<code>你的GoPath路径/bin</code>【追加】到环境变量<code>PATH</code>里（请自行解决），以确保可以调用<code>Go</code>语言开发的工具</p><p><strong>提示：</strong>从版本1.11开始，我们并不一定要将自己的代码写在GoPath目录下，具体请参见后面介绍“Go Mod”的文章</p><h3 id="4-4-设置代理"><a href="#4-4-设置代理" class="headerlink" title="4.4 设置代理"></a>4.4 设置代理</h3><p><code>Go</code>为我们提供了非常好用的工具<code>go get</code>，可以直接从网络拉取依赖包（例如：github），但是由于下载速度并不理想，且部分存放在Google服务器上的包文件无法正常获取（中国大陆），我们还是通过配置代理来解决吧。</p><p><strong>推荐方法：</strong></p><p>如果你的<code>Go</code>版本大于等于1.13，可以直接使用以下命令配置代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure><p><strong>通用方法：</strong></p><p>如果上述推荐方法不适用，或者没有效果，那么我们可以手工配置：</p><ul><li>Windows：添加系统环境变量，<code>GOPROXY</code>，值为<code>https://goproxy.cn</code>；如果你的版本大于等于1.13，值则为<code>https://goproxy.cn,direct</code></li><li>Mac：在目录<code>~/.bash_profile</code>文件下添加：<code>export GOPROXY=https://goproxy.cn</code>，保存并退出；如果你的版本大于等于1.13，则为<code>export GOPROXY=https://goproxy.cn,direct</code></li><li>Mac（补充）：如果你的shell不是<code>bash</code>而是<code>zsh</code>，那么则是在该文件下操作：<code>~/.zshrc</code>。或者，依然在<code>~/.bash_profile</code>文件下操作，但是必须将<code>source ~/.bash_profile</code>配置添加入<code>~/.zshrc</code></li><li>Mac（提醒）：你可以执行<code>source ~/.bash_profile</code>或<code>~/.zshrc</code>使环境变量配置立刻生效</li></ul><p>至此，你的<code>go get</code>命令可以正常工作了。</p><h3 id="4-5-开发工具"><a href="#4-5-开发工具" class="headerlink" title="4.5 开发工具"></a>4.5 开发工具</h3><p><code>Go</code>语言可以使用的开发工具还是比较丰富的，这里稍微列举几种：</p><ol><li>GoLand：Jetbrains家的专业IDE，和大名鼎鼎的Java IDE工具“intellij idea”同门。缺点：收费</li><li>liteide：由中国人自己开发的Go语言IDE工具，免费。<a href="https://github.com/visualfc/liteide/blob/master/liteidex/deploy/welcome/zh_CN/install.md" target="_blank" rel="noopener">下载说明</a>在此，建议下载二进制文件，而不是手动编译</li><li>Eclipse + Goclipse：经典IDE Eclipse通过安装插件支持Go语言开发，免费</li><li>VsCode、Atom、Sublime等 + 插件：代码编辑器（Editor）相比IDE更加轻量，同样免费</li><li>Vim、Emacs + 插件</li></ol><h2 id="五、Go快速上手"><a href="#五、Go快速上手" class="headerlink" title="五、Go快速上手"></a>五、Go快速上手</h2><p>在第一篇文章的最后，我们一起来快速上手一下<code>Go</code>代码的编写吧。</p><h3 id="5-1-Hello-World"><a href="#5-1-Hello-World" class="headerlink" title="5.1 Hello World"></a>5.1 Hello World</h3><ol><li><p>在你的GoPath目录下的src目录内，创建项目目录（名称自取）。</p></li><li><p>在项目目录下，创建文件hello.go（名称自取）</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明包</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 向控制台输出文本内容</span></span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码：</p><p>在<code>.go</code>文件所在目录下，执行命令：<code>go run hello.go</code></p><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><h3 id="5-2-解释说明"><a href="#5-2-解释说明" class="headerlink" title="5.2 解释说明"></a>5.2 解释说明</h3><p><strong>第1行：</strong></p><p><code>Go</code>语言的单行注释，不参与程序执行</p><p>多行注释则为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fmt.Println("Hello World")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>第2行：</strong></p><p><code>Go</code>和其他很多语言一样，使用<code>包</code>来管理和组织代码，其中规则如下：</p><ol><li>同一个目录下，所有<code>.go</code>文件的包名必须一致</li><li><code>main</code>包下，必须有且只能有一个<code>main</code>函数</li><li>目录的名称不一定非要和包名一致</li><li><code>main</code>方法所在的文件的文件名不要求是<code>main.go</code></li></ol><p><strong>第5、6、7行：</strong></p><p>导入依赖包，其中规则如下：</p><ol><li>当需要导入的包仅有一个时，可以简写成一行：<code>import &quot;fmt&quot;</code></li><li>包可以设置别名，如<code>import f &quot;fmt&quot;</code></li><li>导入的包，一般必须使用，否则编译不通过</li><li>如果不使用导入的包，且想要通过编译，需要将下划线<code>_</code>作为包别名：<code>import _ &quot;fmt&quot;</code></li></ol><p><strong>第10行：</strong></p><p><code>main函数</code>是整个程序的入口，具体规则如下：</p><ol><li>该示例中，<code>main函数</code>声明为唯一写法。即：没有参数列表、没有返回值</li><li><code>main</code>包下必须有一个<code>main函数</code>，并且只能有一个<code>main函数</code></li><li><code>Go</code>语言中，所有函数声明均是使用<code>func</code>关键字</li><li><code>Go</code>语言中，函数体使用<strong>花括号</strong>包围，且<strong>左花括号不能另起一行</strong></li></ol><p><strong>第12行：</strong></p><p>函数的调用，具体规则如下：</p><ol><li>函数&amp;表达式结尾均<strong>不需要添加分号</strong></li><li>一般情况下，调用包函数必须写上<code>包名.</code>。如果需要省略这个部分，可以使用点<code>.</code>作为包别名：<code>import . &quot;fmt&quot;</code></li><li><code>Go</code>语言中，函数名&amp;变量名的首字母大小写均代表<strong>包外可见性</strong>。大写代表可见，反之不可见</li></ol><h3 id="5-3-程序退出码"><a href="#5-3-程序退出码" class="headerlink" title="5.3 程序退出码"></a>5.3 程序退出码</h3><p>我们可以用程序<strong>退出码</strong>来表示程序的执行结果，如：返回0代表执行成功，其他则代表出现异常</p><p>由于<code>Go</code>语言<code>main函数</code>不支持返回值，所以我们需要给<code>os</code>包下的<code>Exit()</code>函数传值实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">  <span class="comment">// 设置程序退出码</span></span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里的退出码范围为0～255，如果传递-1，则会当作255</p><h3 id="5-4-传递命令行参数"><a href="#5-4-传递命令行参数" class="headerlink" title="5.4 传递命令行参数"></a>5.4 传递命令行参数</h3><p>实用的命令行工具都需要传递参数给我们的程序，由于<code>Go</code>的<code>main函数</code>没有参数列表，所以需要使用<code>os</code>包下的<code>Args()</code>函数去接收命令行参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 获取并打印命令行参数</span></span><br><span class="line">fmt.Println(os.Args[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处<code>Args()</code>函数返回的是一个<code>字符串切片</code>，关于<code>字符串切片</code>我们后面会学习到。这里我们只需要明白，<code>[0]</code>代表取出列表中的第一个元素，而<code>[1]</code>就是取出第二个元素</p><p><code>Args()</code>函数返回的第一个元素（即下标0）永远是程序本身，而第二个元素（下标1）就是我们传入的第一个参数，以此类推…</p><p>执行上面的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run Hello.go haha</span></span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haha</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go操作文件IO读与写</title>
      <link href="/2019/09/03/Go%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6IO%E8%AF%BB%E4%B8%8E%E5%86%99/"/>
      <url>/2019/09/03/Go%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6IO%E8%AF%BB%E4%B8%8E%E5%86%99/</url>
      <content type="html"><![CDATA[<h1 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h1><p>   关于文件操作模式和文件权限的说明：</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>os.O_WRONLY</td><td>只写</td></tr><tr><td>os.O_CREATE</td><td>创建文件</td></tr><tr><td>os.O_RDONLY</td><td>只读</td></tr><tr><td>os.O_RDWR</td><td>读写</td></tr><tr><td>os.O_TRUNC</td><td>清空</td></tr><tr><td>os.O_APPEND</td><td>追加</td></tr></tbody></table><p>权限：</p><p>  三个数字分别代表创建者、用户组、其他人对该文件的权限。注意，需要0开头，如：0777</p><table><thead><tr><th style="text-align:center">4</th><th style="text-align:center">2</th><th style="text-align:center">1</th></tr></thead><tbody><tr><td style="text-align:center">读（r）</td><td style="text-align:center">写（w）</td><td style="text-align:center">可执行（x）</td></tr></tbody></table><h1 id="直接读文件"><a href="#直接读文件" class="headerlink" title="直接读文件"></a>直接读文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"io"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  file, e := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开文件失败"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> cache = [<span class="number">128</span>]<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">   n, e := file.Read(cache[:])</span><br><span class="line">   <span class="keyword">if</span> e == io.EOF &#123;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">     fmt.Printf(<span class="string">"读文件失败，%T \n"</span>, e)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="keyword">string</span>(cache[:n]))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存读文件（可按行读）"><a href="#缓存读文件（可按行读）" class="headerlink" title="缓存读文件（可按行读）"></a>缓存读文件（可按行读）</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"bufio"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"io"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  file, e := os.Open(<span class="string">"./main.go"</span>)</span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开文件失败"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line">  reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">   s, e := reader.ReadString(<span class="string">'\n’) // 此处可使用ReadLine()</span></span><br><span class="line"><span class="string">   if e == io.EOF &#123;</span></span><br><span class="line"><span class="string">     return</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   if e != nil &#123;</span></span><br><span class="line"><span class="string">     fmt.Printf("读文件失败，%T \n", e)</span></span><br><span class="line"><span class="string">     return</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   fmt.Printf(s)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="最简单的方法读文件（此方法不可按行读）"><a href="#最简单的方法读文件（此方法不可按行读）" class="headerlink" title="最简单的方法读文件（此方法不可按行读）"></a>最简单的方法读文件（此方法不可按行读）</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  bytes, e := ioutil.ReadFile(<span class="string">"./main.go"</span>)</span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"读文件失败，%T \n"</span>, e)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Printf(<span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按字符串或字节写文件"><a href="#按字符串或字节写文件" class="headerlink" title="按字符串或字节写文件"></a>按字符串或字节写文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  file, e := os.OpenFile(<span class="string">"./123.txt"</span>, os.O_CREATE|os.O_RDWR|os.O_TRUNC, <span class="number">0744</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开文件失败！"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">`祖国</span></span><br><span class="line"><span class="string">你好`</span></span><br><span class="line">  <span class="comment">// file.Write([]byte(text)) // 按字节写</span></span><br><span class="line">  file.WriteString(text) <span class="comment">// 按字符串写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按缓存方法写"><a href="#按缓存方法写" class="headerlink" title="按缓存方法写"></a>按缓存方法写</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"bufio"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  file, e := os.OpenFile(<span class="string">"./123.txt"</span>, os.O_CREATE|os.O_RDWR|os.O_TRUNC, <span class="number">0744</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开文件失败！"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">`我爱的</span></span><br><span class="line"><span class="string">中国`</span></span><br><span class="line">  writer := bufio.NewWriter(file)</span><br><span class="line">  writer.Write([]<span class="keyword">byte</span>(text))</span><br><span class="line">  writer.Flush() <span class="comment">// 使用缓存方法写一定要刷入缓存</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这种方法也可以实现按行写文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"bufio"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lineList = []<span class="keyword">string</span>&#123;</span><br><span class="line">  <span class="string">"静夜思"</span>,</span><br><span class="line">  <span class="string">"窗前明月光，"</span>,</span><br><span class="line">  <span class="string">"疑是地上霜。"</span>,</span><br><span class="line">  <span class="string">"举头望明月，"</span>,</span><br><span class="line">  <span class="string">"低头思故乡。"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  file, e := os.OpenFile(<span class="string">"./测试按行写文件.txt"</span>, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, <span class="number">0744</span>)</span><br><span class="line">  <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开文件失败"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  writer := bufio.NewWriter(file)</span><br><span class="line">  <span class="keyword">for</span> _, line := <span class="keyword">range</span> lineList &#123;</span><br><span class="line">   writer.WriteString(line + <span class="string">"\n"</span>)</span><br><span class="line">   writer.Flush()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用ioutil写"><a href="#使用ioutil写" class="headerlink" title="使用ioutil写"></a>使用ioutil写</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">`啊</span></span><br><span class="line"><span class="string">我爱的</span></span><br><span class="line"><span class="string">中国`</span></span><br><span class="line">  ioutil.WriteFile(<span class="string">"./123.txt"</span>, []<span class="keyword">byte</span>(text), <span class="number">0744</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RustTheBook学习笔记04——分支语句</title>
      <link href="/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%E2%80%94%E2%80%94%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%E2%80%94%E2%80%94%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分支语句</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if是表达式，所以可以用来赋值</span></span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">String</span> = <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="string">"x &gt; 5"</span>.to_string()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"x &lt; 5"</span>.to_string()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// break可以用来返回结果</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">loop</span> &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, count);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while循环</span></span><br><span class="line">    <span class="comment">// while循环可以替代掉很多loop、if-else、break循环的组合嵌套</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, arr1[index]);</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环</span></span><br><span class="line">    <span class="comment">// while循环很容易索引越界，for循环更加简单、安全</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> arr1.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, elem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环实现倒计时，输出3 2 1</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Rust </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RustTheBook学习笔记03——函数</title>
      <link href="/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/"/>
      <url>/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = another_function(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意语句和表达式的区别：</span></span><br><span class="line"><span class="comment">// 语句：没有返回值，比如变量的声明，在Rust中必须以分号结尾</span></span><br><span class="line"><span class="comment">// 表达式：有返回值，在Rust中表达式的结尾没有分号</span></span><br><span class="line"><span class="comment">// 如果在表达式的结尾加上分号，它就变成了语句</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="comment">// return x + y;</span></span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>注意：</strong></p><p>如果在上面示例中的<code>x + y</code>后面加上分号<code>;</code>，那么<code>(x + y);</code>作为一个语句而不是表达式将不会返回值，没有返回值的情况下，默认返回一个空元组<code>()</code>，与函数声明的返回值不符</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Rust </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RustTheBook学习笔记02——变量与可变性</title>
      <link href="/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
      <url>/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</url>
      <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 声明变量，默认不可变</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"the value of x is &#123;&#125;"</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个可变的变量</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> y = <span class="number">5</span>;</span><br><span class="line">    y = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"the value of y is &#123;&#125;"</span>, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个常量</span></span><br><span class="line">    <span class="comment">// 必须 注明值的类型</span></span><br><span class="line">    <span class="keyword">const</span> MAX_POINTS:<span class="built_in">i32</span> = <span class="number">100_000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏</span></span><br><span class="line">    <span class="keyword">let</span> z = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> z = z + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> z = z + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"the value of z is &#123;&#125;"</span>, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>隐藏：</strong></p><p>我们可以定义一个与之前变量同名的新变量，而新变量会<code>隐藏</code>之前的变量。Rustacean们称之为第一个变量被第二个<code>隐藏</code>了，这意味着使用这个变量时会看到第二个值。可以用相同变量名称来隐藏一个变量，以及重复使用<code>let</code>关键字来多次隐藏。</p><p><strong>隐藏的好处：</strong></p><p>当我们需要给变量作类型转换的时候，不需要在变量名后面加上类型后缀了，更加的简洁，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="built_in">String</span> = <span class="built_in">String</span>::from(<span class="string">"20"</span>);</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">i32</span> = age.parse().unwrap();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"age is &#123;&#125;"</span>, age); <span class="comment">// age is 20</span></span><br></pre></td></tr></table></figure><p>我们不需要分别把变量命名为<code>age_str</code>和<code>age_num</code>，使用隐藏可以很好的完成类型转换而不更换变量名</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Rust </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RustTheBook学习笔记01——HelloWorld&amp;猜数字游戏Demo</title>
      <link href="/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%E2%80%94%E2%80%94HelloWorld&amp;%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8FDemo/"/>
      <url>/2019/07/07/RustTheBook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%E2%80%94%E2%80%94HelloWorld&amp;%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8FDemo/</url>
      <content type="html"><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猜数字游戏Demo"><a href="#猜数字游戏Demo" class="headerlink" title="猜数字游戏Demo"></a>猜数字游戏Demo</h2><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成一个秘密数字</span></span><br><span class="line">    <span class="keyword">let</span> secret_num = rand::thread_rng().gen_range(<span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//println!("秘密数字是：&#123;&#125;", secret_num);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"请猜测一个数："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明一个字符串保存键盘输入</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> guess_number = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">        io::stdin().read_line(&amp;<span class="keyword">mut</span> guess_number).expect(<span class="string">"Fail to read line!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> guess_number: <span class="built_in">i32</span> = <span class="keyword">match</span> guess_number.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"您输入的不是数字，请重新输入！"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess_number.cmp(&amp;secret_num) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">"小了\n"</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">"大了\n"</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"Win!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Rust </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PyGame内置游戏启动方法</title>
      <link href="/2019/07/07/PyGame%E5%86%85%E7%BD%AE%E6%B8%B8%E6%88%8F%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/07/07/PyGame%E5%86%85%E7%BD%AE%E6%B8%B8%E6%88%8F%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><code>Pygame</code>是<code>Python</code>的一个第三方游戏开发库，他自带了一个默认游戏，我们可以通过这个demo先感受一下<code>Pygame</code>的魅力</p><p>启动方法如下：</p><p>首先确保你安装了<code>Python</code>以及<code>Pygame</code>，我们假设你已经安装了Python，然后这里我们安装一下<code>Pygame</code>这个库</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><p>如果是MacOS则自带了Python2，如果你安装了Python3，应该键入以下命令以使用Python3使用；如果是Windows系统则直接安装Python3并以上面命令执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pygame</span><br></pre></td></tr></table></figure><p>启动demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pygame.examples.aliens</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pygame.examples.aliens</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Python </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rust下载包太慢怎么办？配置国内源介绍</title>
      <link href="/2019/07/06/Rust%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/07/06/Rust%E4%B8%8B%E8%BD%BD%E5%8C%85%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>我们可以通过配置<code>rust</code>的配置文件来使用<em>中科大</em>的源作为默认下载源</p><p>步骤如下：</p><a id="more"></a><ul><li>进入当前用户的文件夹下<br>对于MacOS/Linux系统来说就是在<em>终端</em>输入<code>cd ~</code>；对于Windows系统的用户就是<em>C:\Users\你的用户名</em>目录</li><li>进入名为<em>.cargo</em>的文件夹（目录）</li><li>新建一个空文本文件，命名为：<em>config</em></li><li>将以下文本粘贴进去，保存关闭</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[source.crates-io]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">"https://github.com/rust-lang/crates.io-index"</span></span><br><span class="line"><span class="attr">replace-with</span> = <span class="string">'ustc'</span></span><br><span class="line"><span class="section">[source.ustc]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">"git://mirrors.ustc.edu.cn/crates.io-index"</span></span><br></pre></td></tr></table></figure><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/rust-crates" target="_blank" rel="noopener">参考1</a></p><p><a href="https://segmentfault.com/a/1190000017483415?utm_source=tag-newest" target="_blank" rel="noopener">参考2</a></p><p>阿里云源：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[source.crates-io]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">"https://github.com/rust-lang/crates.io-index"</span></span><br><span class="line"><span class="attr">replace-with</span> = <span class="string">"rustcc"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source.rustcc]</span></span><br><span class="line"><span class="attr">registry</span> = <span class="string">"https://code.aliyun.com/rustcc/crates.io-index"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言数据结构——双向列表</title>
      <link href="/2019/06/26/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%8F%8C%E5%90%91%E5%88%97%E8%A1%A8/"/>
      <url>/2019/06/26/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%8F%8C%E5%90%91%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><code>Golang</code>标准库中，包含<code>双向列表</code>这一数据结构，先来了解一下</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List represents a doubly linked list.</span></span><br><span class="line"><span class="comment">// The zero value for List is an empty list ready to use.</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span></span><br><span class="line"><span class="built_in">len</span>  <span class="keyword">int</span>     <span class="comment">// current list length excluding (this) sentinel element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Element is an element of a linked list.</span></span><br><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span></span><br><span class="line"><span class="comment">// To simplify the implementation, internally a list l is implemented</span></span><br><span class="line"><span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span></span><br><span class="line"><span class="comment">// list element (l.Back()) and the previous element of the first list</span></span><br><span class="line"><span class="comment">// element (l.Front()).</span></span><br><span class="line">next, prev *Element</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The list to which this element belongs.</span></span><br><span class="line">    <span class="comment">// 该元素属于哪一个list</span></span><br><span class="line">list *List</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The value stored with this element.</span></span><br><span class="line">    <span class="comment">// 此元素存储的值</span></span><br><span class="line">Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="操作双向列表"><a href="#操作双向列表" class="headerlink" title="操作双向列表"></a>操作双向列表</h2><h3 id="插入值"><a href="#插入值" class="headerlink" title="插入值"></a>插入值</h3><h4 id="在最前面-最后面插入"><a href="#在最前面-最后面插入" class="headerlink" title="在最前面/最后面插入"></a>在最前面/最后面插入</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myList := list.New()</span><br><span class="line"><span class="comment">// 在列表最后添加元素</span></span><br><span class="line">myList.PushBack(<span class="string">"a"</span>)</span><br><span class="line">printList(myList) <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">myList.PushFront(<span class="string">"b"</span>)</span><br><span class="line">printList(myList) <span class="comment">// b a</span></span><br><span class="line"></span><br><span class="line">myList.PushBack(<span class="string">"c"</span>)</span><br><span class="line">printList(myList) <span class="comment">// b a c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历双向列表list</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(theList *list.List)</span></span> &#123;</span><br><span class="line">currElement := theList.Front()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; theList.Len(); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v "</span>, currElement.Value)</span><br><span class="line">currElement = currElement.Next()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在指定值的前-后插入"><a href="#在指定值的前-后插入" class="headerlink" title="在指定值的前/后插入"></a>在指定值的前/后插入</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myList := list.New()</span><br><span class="line"><span class="comment">// 在列表最后添加元素</span></span><br><span class="line">myList.PushBack(<span class="string">"a"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"b"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"c"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"d"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"e"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"f"</span>)</span><br><span class="line"></span><br><span class="line">printList(myList) <span class="comment">// a b c d e f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向第一个元素后面添加元素</span></span><br><span class="line">myList.InsertAfter(<span class="string">"x"</span>, myList.Front())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向最后一个元素前面添加元素</span></span><br><span class="line">myList.InsertBefore(<span class="string">"z"</span>, myList.Back())</span><br><span class="line"></span><br><span class="line">printList(myList) <span class="comment">// a x b c d e z f</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历双向列表list</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(theList *list.List)</span></span> &#123;</span><br><span class="line">currElement := theList.Front()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; theList.Len(); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v "</span>, currElement.Value)</span><br><span class="line">currElement = currElement.Next()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取出值"><a href="#取出值" class="headerlink" title="取出值"></a>取出值</h3><h4 id="取出第一个值和最后一个值"><a href="#取出第一个值和最后一个值" class="headerlink" title="取出第一个值和最后一个值"></a>取出第一个值和最后一个值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myList := list.New()</span><br><span class="line"><span class="comment">// 在列表最后添加元素</span></span><br><span class="line">myList.PushBack(<span class="string">"a"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"b"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"c"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"d"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"e"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"f"</span>)</span><br><span class="line"></span><br><span class="line">printList(myList) <span class="comment">// a b c d e f</span></span><br><span class="line"></span><br><span class="line">frontValue := myList.Front().Value</span><br><span class="line">backValue := myList.Back().Value</span><br><span class="line">fmt.Println(frontValue, backValue) <span class="comment">// a f</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按索引取出值"><a href="#按索引取出值" class="headerlink" title="按索引取出值"></a>按索引取出值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myList := list.New()</span><br><span class="line"><span class="comment">// 在列表最后添加元素</span></span><br><span class="line">myList.PushBack(<span class="string">"a"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"b"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"c"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"d"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"e"</span>)</span><br><span class="line">myList.PushBack(<span class="string">"f"</span>)</span><br><span class="line"></span><br><span class="line">printList(myList)   <span class="comment">// a b c d e f</span></span><br><span class="line"></span><br><span class="line">result := getEleFromListByIndex(myList, <span class="number">4</span>)</span><br><span class="line">fmt.Println(result) <span class="comment">// e</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按取出第几个值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEleFromListByIndex</span><span class="params">(theList *list.List, index <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; theList.Len()<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> theList.Front().Value</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">currElem := theList.Front()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; index; i++ &#123;</span><br><span class="line">currElem = currElem.Next()</span><br><span class="line"><span class="keyword">if</span> i == index<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> currElem.Value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历双向列表list</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(theList *list.List)</span></span> &#123;</span><br><span class="line">currElement := theList.Front()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; theList.Len(); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v "</span>, currElement.Value)</span><br><span class="line">currElement = currElement.Next()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习的注意点</title>
      <link href="/2019/06/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2019/06/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="000-关于环境"><a href="#000-关于环境" class="headerlink" title="000_关于环境"></a>000_关于环境</h2><p>Golang的官网是<a href="https://golang.org" target="_blank" rel="noopener">https://golang.org</a>，不过因为众所周知的原因，国内不能正常访问，那么替代方案有这么几种：</p><ul><li>方案一：<a href="https://golang.google.cn/" target="_blank" rel="noopener">Google CN提供的镜像网站</a>：该网站最大的好处就是原版英文，可以获得等同于原官网的体验</li><li>方案二：<a href="https://go-zh.org/" target="_blank" rel="noopener">中文版官网</a>：该网站已经部分汉化了，可以帮助阅读英文有困难的同学们</li><li>方案三：使用Golang起一个本地服务：安装Golang后，在命令行里输入<code>godoc -http=:8080</code>，并在浏览器访问<code>http://localhost:8080/</code>即可访问本地官网（英文），8080是端口号，可以更改，这种方式优点在于不依赖网络</li><li>方案四：<a href="https://tip.golang.org/" target="_blank" rel="noopener">https://tip.golang.org/</a>是golang.org的完全限定域名，由Google提供，目前中国大陆可以正常访问</li></ul><h3 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h3><p>Golang有两个重要的环境变量<code>GOOS</code>和<code>GOARCH</code>,其中<code>GOOS</code>指的是目标操作系统，它的可用值为：</p><ol><li>darwin</li><li>freebsd</li><li>linux</li><li>windows</li><li>android</li><li>dragonfly</li><li>netbsd</li><li>openbsd</li><li>plan9</li><li>solaris</li></ol><p>一共支持10中操作系统。<code>GOARCH</code>指的是目标处理器的架构，目前支持的有：</p><ol><li>arm</li><li>arm64</li><li>386</li><li>amd64</li><li>ppc64</li><li>ppc64le</li><li>mips64</li><li>mips64le</li><li>s390x</li></ol><p>一共支持9中处理器的架构</p><p>如果我们要生成不同平台架构的可执行程序，只要改变这两个环境变量就可以了（临时禁用CGO，以防出问题），比如要生成<code>linux</code> <code>64位</code>的程序，命令如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=<span class="number">0</span> GOOS=linux GOARCH=amd64 <span class="keyword">go</span> build github.com/xxx/hello</span><br></pre></td></tr></table></figure><p>前面两个赋值，是更改环境变量，这样的好处是只针对本次运行有效，不会更改我们默认的配置。</p><p>以上这些用法差不多够我们用的了，更多关于<code>go build</code>的用法，可以通过以下命令查看:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> help build</span><br></pre></td></tr></table></figure><p><strong>此段摘自 <em>飞雪无情</em> 的<a href="https://www.flysnow.org/2017/03/08/go-in-action-go-tools.html" target="_blank" rel="noopener">博客</a></strong></p><h2 id="001-数据类型"><a href="#001-数据类型" class="headerlink" title="001_数据类型"></a>001_数据类型</h2><h3 id="rune类型"><a href="#rune类型" class="headerlink" title="rune类型"></a>rune类型</h3><p>Golang没有Java里面的<code>char</code>类型，取而代之的是<code>rune</code>类型，Golang源码对该类型的注释是这样的：</p><blockquote><p>rune is an alias for int32 and is equivalent to int32 in all ways.<br>译：rune是int32的别名，在所有方面都等同于int32。</p></blockquote><p>因此，它在执行以下代码的时候，输出的结果并不是预期的字符<code>a</code>，而是数字<code>97</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myChar := <span class="string">'a'</span></span><br><span class="line">fmt.Println(myChar) <span class="comment">// 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个地方的对应关系是基于<code>ASCII</code>码表的，<code>myChar</code>是一个<code>rune</code>类型变量，而<code>rune</code>其实就是代表整数的<code>int32</code>类型，参照码表，<code>a</code>对应为十进制下的<code>97</code>，所以这里的输出结果是数字<code>97</code>。</p><p>要输出字符<code>a</code>的话，需要进行类型转换，将<code>rune</code>类型转换为字符串类型的<code>a</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myChar := <span class="string">'a'</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(myChar))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正因为这个特点，我们大概会遇到这个困扰：</p><p>如何将一个数字，例如：<code>97</code>转换为字符串使用？</p><p>如果我们套用<code>Python</code>或<code>Java</code>等语言的经验的话，大概会写出这样的代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num := <span class="number">97</span></span><br><span class="line">s := <span class="keyword">string</span>(num)</span><br><span class="line">fmt.Println(s) <span class="comment">// a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样显然是不符合我们的预期的，而正确的方法是这样的：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num := <span class="number">97</span></span><br><span class="line">s := strconv.Itoa(num)</span><br><span class="line">fmt.Println(s) <span class="comment">// 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><h4 id="忽视转义字符，以纯文本输出"><a href="#忽视转义字符，以纯文本输出" class="headerlink" title="忽视转义字符，以纯文本输出"></a>忽视转义字符，以纯文本输出</h4><p>使用键盘1左边的键<code>&#96;</code>而不是双引号，就可以实现对<code>转义字符</code>以纯文本输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">`Ja\nck`</span></span><br><span class="line">fmt.Println(name)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ja\nck</span><br></pre></td></tr></table></figure><h4 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h4><p>string是字符串类型，采用<code>unicode</code>编码，因此在表示非<code>ASCII</code>字符的时候，其大小不是一个字节，具体看示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"我爱中国"</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str)) <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们在遍历的时候，不能直接使用其他编程语言里面常用的按照长度遍历，否则会是这样的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">fmt.Println(str[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">230</span><br><span class="line">136</span><br><span class="line">145</span><br><span class="line">231</span><br><span class="line">136</span><br><span class="line">177</span><br><span class="line">228</span><br><span class="line">184</span><br><span class="line">173</span><br><span class="line">229</span><br><span class="line">155</span><br><span class="line">189</span><br></pre></td></tr></table></figure><p>使用<code>string()</code>转换类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(str[i]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出就是彻底的乱码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">æ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ç</span><br><span class="line"></span><br><span class="line">±</span><br><span class="line">ä</span><br><span class="line">¸</span><br><span class="line">­</span><br><span class="line">å</span><br><span class="line"></span><br><span class="line">½</span><br></pre></td></tr></table></figure><p>出现这个问题的原因就是，汉字是由多个字节来表示的，而Golang当中的<code>len()</code>是获取的字节长度，而非<code>字符数</code></p><p>正确遍历一个字符串中每一个字符的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str1 := <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">fmt.Println(key, <span class="keyword">string</span>(value))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">str2 := <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> []<span class="keyword">rune</span>(str2) &#123;</span><br><span class="line">fmt.Println(key, <span class="keyword">string</span>(value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0 我</span><br><span class="line">3 爱</span><br><span class="line">6 中</span><br><span class="line">9 国</span><br><span class="line"></span><br><span class="line">0 我</span><br><span class="line">1 爱</span><br><span class="line">2 中</span><br><span class="line">3 国</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>前者的下标依然是按照字节来计算的，而后者则是按照字符</p><p>计算真实长度的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"我爱中国"</span></span><br><span class="line">fmt.Println(utf8.RuneCount([]<span class="keyword">byte</span>(str))) <span class="comment">// 4</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(str)) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不使用<code>range</code>的情况下遍历：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"我爱中国"</span></span><br><span class="line">strBytes := []<span class="keyword">byte</span>(str)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(strBytes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">ch, size := utf8.DecodeRune(strBytes)</span><br><span class="line">strBytes = strBytes[size:]</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(ch))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我</span><br><span class="line">爱</span><br><span class="line">中</span><br><span class="line">国</span><br></pre></td></tr></table></figure><h4 id="其他字符串操作常用函数"><a href="#其他字符串操作常用函数" class="headerlink" title="其他字符串操作常用函数"></a>其他字符串操作常用函数</h4><p><code>strings.Fields</code>：按空格分隔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"     我        爱 中 国"</span></span><br><span class="line">fields := strings.Fields(str)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(fields)) <span class="comment">// 4</span></span><br><span class="line">fmt.Println(fields)      <span class="comment">// [我 爱 中 国]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h3><h4 id="关于内存地址"><a href="#关于内存地址" class="headerlink" title="关于内存地址"></a>关于内存地址</h4><p>Golang当中的<code>int</code>类型的变量，在值改变的时候，其内存地址不会改变</p><p>具体示例如下：</p><p>例1:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i的值%d，i的地址%p\n"</span>, i, &amp;i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i的值1，i的地址0xc000094000</span><br><span class="line">i的值2，i的地址0xc000094000</span><br><span class="line">i的值3，i的地址0xc000094000</span><br><span class="line">i的值4，i的地址0xc000094000</span><br><span class="line">i的值5，i的地址0xc000094000</span><br></pre></td></tr></table></figure><p>例2:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">fmt.Println(&amp;a)</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">fmt.Println(&amp;a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xc000094028</span><br><span class="line">0xc000094028</span><br></pre></td></tr></table></figure><h3 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h3><h4 id="数组和切片的不同"><a href="#数组和切片的不同" class="headerlink" title="数组和切片的不同"></a>数组和切片的不同</h4><ul><li>切片是类似指针的引用类型，所以可以直接打印地址，而不需要取地址符号<code>&amp;</code></li><li>数组定义时就会分配内存空间；切片不会</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;s1) <span class="comment">// 0xc0000180c0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 []<span class="keyword">int</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, s2) <span class="comment">// 0x0，没有分配内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组可以和相同类型的数组直接比较，切片只能和<code>nil</code>作比较，刚刚定义的切片为<code>nil</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(s1 == s2) <span class="comment">// 这是错误的！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid operation: s1 == s2 (slice can only be compared to nil)</span><br></pre></td></tr></table></figure><h4 id="切片的扩容"><a href="#切片的扩容" class="headerlink" title="切片的扩容"></a>切片的扩容</h4><p>当容量小于1024，当长度超出容量，则容量翻倍，如果翻倍后容量已经大于长度，则容量就是这个数字；如果容量依然小于长度，则容量等于长度</p><h4 id="切片的删除元素"><a href="#切片的删除元素" class="headerlink" title="切片的删除元素"></a>切片的删除元素</h4><p><code>Golang</code>并没有提供删除的相关功能，但是我们可以利用<code>切片</code>和<code>append</code>实现</p><p>这是一个遍历集合，并删除特定元素的例子：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> value == <span class="string">"c"</span> &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s[:i:i], s[i+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s) <span class="comment">// [a b d]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式1:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明一个切片，作为初始切片</span></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"初始切片："</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我要删除索引为2的元素</span></span><br><span class="line">n := <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先取索引2前面的元素</span></span><br><span class="line">newSlice := s[<span class="number">0</span>:n]</span><br><span class="line">fmt.Printf(<span class="string">"索引n之前的部分：%v，内存地址为：%p\n"</span>, newSlice, newSlice)</span><br><span class="line">fmt.Printf(<span class="string">"此时原切片为：%v，内存地址为：%p\n"</span>, s, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再取索引2后面的元素，并和索引2前面的元素合并</span></span><br><span class="line">newSlice = <span class="built_in">append</span>(newSlice, s[n+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Printf(<span class="string">"索引n之前和索引n之后元素合并后的切片：%v，内存地址为：%p\n"</span>, newSlice, newSlice)</span><br><span class="line">fmt.Printf(<span class="string">"此时原切片为：%v，内存地址为：%p\n"</span>, s, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始切片： [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">索引n之前的部分：[<span class="number">1</span> <span class="number">2</span>]，内存地址为：<span class="number">0xc00001a0c0</span></span><br><span class="line">此时原切片为：[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc00001a0c0</span></span><br><span class="line">索引n之前和索引n之后元素合并后的切片：[<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc00001a0c0</span></span><br><span class="line">此时原切片为：[<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc00001a0c0</span></span><br></pre></td></tr></table></figure><p>分析：</p><p>由于<code>newSlice</code>是从初始切片截取所得，其拥有相同的初始索引位置（索引位置：0）的值（值：1），索引<code>newSlice</code>的内存地址和原始切片的内存地址是相同的</p><blockquote><p>切片的内存地址等于其第一个元素的内存地址，因为此处我们是从0号索引截取，所以<code>s</code>和<code>newSlice</code>的内存地址相同</p></blockquote><p>因此，当我们对<code>newSlice</code>做<code>append</code>操作时，原切片的值也被一起改变了，这并不好</p><p><strong>方式2:</strong></p><p>解决上述问题的思路就是，我们确实需要一个切片，它的初始元素等于原切片的初始元素，而内存地址不同，我们即想到了创建一个新的slice，而不是在原有slice（或其切片上）上直接操作</p><p>我们可以运用<code>copy</code>函数，来拷贝需要的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明一个切片，作为初始切片</span></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"初始切片："</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我要删除索引为2的元素</span></span><br><span class="line">n := <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先取索引2前面的元素</span></span><br><span class="line">newSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line"><span class="built_in">copy</span>(newSlice, s[<span class="number">0</span>:n]) <span class="comment">// 此处的newSlice的内存地址不同于s了</span></span><br><span class="line">fmt.Printf(<span class="string">"索引n之前的部分：%v，内存地址为：%p\n"</span>, newSlice, newSlice)</span><br><span class="line">fmt.Printf(<span class="string">"此时原切片为：%v，内存地址为：%p\n"</span>, s, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再取索引2后面的元素，并和索引2前面的元素合并</span></span><br><span class="line">newSlice = <span class="built_in">append</span>(newSlice, s[n+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Printf(<span class="string">"索引n之前和索引n之后元素合并后的切片：%v，内存地址为：%p\n"</span>, newSlice, newSlice)</span><br><span class="line">fmt.Printf(<span class="string">"此时原切片为：%v，内存地址为：%p\n"</span>, s, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始切片： [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">索引n之前的部分：[<span class="number">1</span> <span class="number">2</span>]，内存地址为：<span class="number">0xc00009e040</span></span><br><span class="line">此时原切片为：[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc000094000</span></span><br><span class="line">索引n之前和索引n之后元素合并后的切片：[<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc0000a0020</span></span><br><span class="line">此时原切片为：[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]，内存地址为：<span class="number">0xc000094000</span></span><br></pre></td></tr></table></figure><h3 id="关于Set和去重"><a href="#关于Set和去重" class="headerlink" title="关于Set和去重"></a>关于Set和去重</h3><p><code>Golang</code>是不提供<code>set</code>这种数据类型的，但是这也并没有什么，因为<code>set</code>完全就可以通过使用<code>map</code>来实现</p><p>我们在其他语言中，<code>set</code>最常用的就是去重，在<code>Golang</code>中，我们这样写即可：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 这是一个带有重复元素的切片</span></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">m[value] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\t"</span>, key) <span class="comment">// 561234</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>无论是<code>map</code>还是<code>set</code>，都无法保证集合内元素的顺序和插入时的顺序一致，甚至<code>Golang</code>还刻意提高了其顺序的随机性</p><h2 id="002-关于对象声明"><a href="#002-关于对象声明" class="headerlink" title="002_关于对象声明"></a>002_关于对象声明</h2><p>Golang中常规变量声明有两种方式：</p><p>方式一：使用<code>var</code>关键字声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>方式二：使用<code>:=</code>的方式声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">""</span></span><br></pre></td></tr></table></figure><p>不过值得注意的是，这两种方式还是存在区别的：</p><ul><li><code>var</code>关键字声明可以被用在全局位置。也就是说，<code>:=</code>这种方式只能够在函数内部使用</li><li>我们知道Golang中的变量一经声明必须使用，否则会抛出<code>xxx declared and not used</code>的错误，不过全局变量可以声明而不使用</li></ul><h2 id="003-关于对象的初始化"><a href="#003-关于对象的初始化" class="headerlink" title="003_关于对象的初始化"></a>003_关于对象的初始化</h2><p>此处参考<a href="https://www.flysnow.org/2017/10/23/go-new-vs-make.html" target="_blank" rel="noopener">飞雪无情的文章：Go语言中new和make的区别</a></p><p>尝试思考下面代码的执行结果，并分析原因：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i *<span class="keyword">int</span></span><br><span class="line">*i = <span class="number">10</span></span><br><span class="line">fmt.Println(*i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br></pre></td></tr></table></figure><p>原因是这样的：当我们使用引用类型的时候，必须先分配其内存空间，然后我们存储的值才能有地方放</p><p>所以需要像这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i *<span class="keyword">int</span> = <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">*i = <span class="number">10</span></span><br><span class="line">fmt.Println(*i) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang源码中的<code>new</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The new built-in function allocates memory. The first argument is a type,</span></span><br><span class="line"><span class="comment">// not a value, and the value returned is a pointer to a newly</span></span><br><span class="line"><span class="comment">// allocated zero value of that type.</span></span><br><span class="line"><span class="comment">// 分配内存的内置函数。接收的第一个参数是一个类型，而不是一个值</span></span><br><span class="line"><span class="comment">// 返回的值是一个指向new的指针</span></span><br><span class="line"><span class="comment">// 会分配这个类型的零值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">(Type)</span> *<span class="title">Type</span></span></span><br></pre></td></tr></table></figure><p><code>make</code>也是用于内存分配的，但是和new不同，它只用于<code>chan</code>、<code>map</code>以及<code>切片</code>的内存创建，而且它返回的类型就是这三个类型本身，<strong>而不是他们的指针类型</strong>，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。</p><h3 id="make和new的异同"><a href="#make和new的异同" class="headerlink" title="make和new的异同"></a>make和new的异同</h3><ul><li>二者都是内存的分配（堆上），但是make只用于slice、map以及channel的初始化（非零值）；而new用于类型的内存分配，并且内存置为零</li><li>make返回的还是这三个引用类型本身；而new返回的是指向类型的指针</li></ul><h3 id="其实new不常用"><a href="#其实new不常用" class="headerlink" title="其实new不常用"></a>其实new不常用</h3><p>所以有new这个内置函数，可以给我们分配一块内存让我们使用，但是现实的编码中，它是不常用的。我们通常都是采用<strong>短语句声明</strong>以及<strong>结构体的字面量</strong>达到我们的目的，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i:=<span class="number">0</span></span><br><span class="line">u:=user&#123;&#125;</span><br></pre></td></tr></table></figure><p>这样更简洁方便，而且不会涉及到指针这种比麻烦的操作。</p><p><code>make</code>函数是无可替代的，我们在使用<code>slice</code>、<code>map</code>以及<code>channel</code>的时候，还是要使用make进行初始化，然后才才可以对他们进行操作。</p><h2 id="004-for…range"><a href="#004-for…range" class="headerlink" title="004_for…range"></a>004_for…range</h2><h3 id="当需要在循环中改变值"><a href="#当需要在循环中改变值" class="headerlink" title="当需要在循环中改变值"></a>当需要在循环中改变值</h3><p>当我们试图在<code>for...range</code>中改变一个切片的值的时候，会遇到这个问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> s1 &#123;</span><br><span class="line"><span class="keyword">if</span> value == <span class="number">3</span> &#123;</span><br><span class="line">value = <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4 5]</span><br></pre></td></tr></table></figure><p>其原因是<code>value</code>只是遍历出来的值的拷贝，要对其进行修改，需要使用下标：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> s1 &#123;</span><br><span class="line"><span class="keyword">if</span> value == <span class="number">3</span> &#123;</span><br><span class="line">s1[key] = <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1 2 9 4 5]</span><br></pre></td></tr></table></figure><h3 id="当需要在循环中存储值"><a href="#当需要在循环中存储值" class="headerlink" title="当需要在循环中存储值"></a>当需要在循环中存储值</h3><p>当我们试图存储被<code>for...range</code>遍历的内容的引用时，可能会出现这样的问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">myMap := <span class="keyword">map</span>[<span class="keyword">int</span>]*<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">myMap[key] = &amp;value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代输出myMap的内容</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">"key = %d, value = %d\n"</span>, key, *value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key = 0, value = 5</span><br><span class="line">key = 1, value = 5</span><br><span class="line">key = 2, value = 5</span><br><span class="line">key = 3, value = 5</span><br><span class="line">key = 4, value = 5</span><br></pre></td></tr></table></figure><p>原因其实很简单：<code>value</code>虽然在遍历过程中，其值一直在修改，但是它的内存地址其实一直都没有变，所以在最后一次循环前放入<code>myMap</code>的引用所存储的值也都被修改为最后的<code>5</code>了</p><p>解决方法：其实也很简单，每次循环时创建一个新的变量来存储<code>value</code>的值就可以了，这样放入<code>myMap</code>的内存地址每次也都是不同的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">myMap := <span class="keyword">map</span>[<span class="keyword">int</span>]*<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">temp := value</span><br><span class="line">myMap[key] = &amp;temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代输出myMap的内容</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">"key = %d, value = %d\n"</span>, key, *value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key = 2, value = 3</span><br><span class="line">key = 3, value = 4</span><br><span class="line">key = 4, value = 5</span><br><span class="line">key = 0, value = 1</span><br><span class="line">key = 1, value = 2</span><br></pre></td></tr></table></figure><h3 id="当在循环中遇到闭包"><a href="#当在循环中遇到闭包" class="headerlink" title="当在循环中遇到闭包"></a>当在循环中遇到闭包</h3><p>如果我们执行以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fs := [<span class="number">5</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">fs[key] = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> fs &#123;</span><br><span class="line">value()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>为什么不是输出<code>1 2 3 4 5</code>呢？因为，在匿名函数中，<code>fmt.Println(value)</code>语句的<code>value</code>不是该匿名函数内声明的，而是从外层函数那里获得的<code>引用</code></p><p>没错，<strong>闭包内的变量和闭包外的是相同的内存地址</strong>，而不是值拷贝</p><h2 id="005-关于常量"><a href="#005-关于常量" class="headerlink" title="005_关于常量"></a>005_关于常量</h2><ul><li>数值类型常量如果<strong>不明确指定类型</strong>可以直接运算（如：float64和int32）</li><li>常量可以声明但不使用</li><li>常量的声明只需要使用<code>=</code>，而不是<code>:=</code>或者<code>var</code></li></ul><h3 id="关于iota"><a href="#关于iota" class="headerlink" title="关于iota"></a>关于iota</h3><p><strong>注意：</strong><code>iota</code>无论你是否使用，其值都是从0依次递增，直到遇到新的<code>const</code>，<code>iota</code>的值即重制为0</p><p>例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="number">9</span>    <span class="comment">// iota值为0，虽然没有被使用，iota依然存在</span></span><br><span class="line">b = <span class="literal">iota</span> <span class="comment">// iota值为1</span></span><br><span class="line">c        <span class="comment">// iota值为2，没有明确声明，继续使用b的表达式</span></span><br><span class="line">d = <span class="number">10</span>   <span class="comment">// iota值为3，虽然没有被使用，iota依然存在</span></span><br><span class="line">e = <span class="literal">iota</span> <span class="comment">// iota值为4</span></span><br><span class="line">f        <span class="comment">// iota值为5，没有明确声明，继续使用e的表达式</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> g = <span class="literal">iota</span> <span class="comment">// 新的const，iota重制为0</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a = %d\nb = %d\nc = %d\nd = %d\ne = %d\nf = %d\n"</span>, a, b, c, d, e, f)</span><br><span class="line">fmt.Println(<span class="string">"g ="</span>, g)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 9</span><br><span class="line">b = 1</span><br><span class="line">c = 2</span><br><span class="line">d = 10</span><br><span class="line">e = 4</span><br><span class="line">f = 5</span><br><span class="line">g = 0</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习21——bytes、bytearray和编码</title>
      <link href="/2019/04/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A021%E2%80%94%E2%80%94bytes%E3%80%81bytearray%E5%92%8C%E7%BC%96%E7%A0%81/"/>
      <url>/2019/04/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A021%E2%80%94%E2%80%94bytes%E3%80%81bytearray%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="一）bytes和bytearray的对比"><a href="#一）bytes和bytearray的对比" class="headerlink" title="(一）bytes和bytearray的对比"></a>(一）bytes和bytearray的对比</h2><blockquote><p><code>bytes</code>是不可变的，而<code>bytearray</code>则是可变类型</p></blockquote><h2 id="（二）bytes类型"><a href="#（二）bytes类型" class="headerlink" title="（二）bytes类型"></a>（二）bytes类型</h2><p>定义一个<code>bytes</code>类型：</p><p><code>bytes</code>接收的是一个可迭代类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ bytes()</span><br><span class="line"><span class="string">b''</span></span><br><span class="line"></span><br><span class="line">$ bytes([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">b'\x01\x02\x03'</span></span><br><span class="line"></span><br><span class="line">$ bytes([<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>])</span><br><span class="line"><span class="string">b'abc'</span></span><br><span class="line"></span><br><span class="line">$ bytes(range(<span class="number">5</span>))</span><br><span class="line"><span class="string">b'\x00\x01\x02\x03\x04'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="（三）编解码"><a href="#（三）编解码" class="headerlink" title="（三）编解码"></a>（三）编解码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串编码为bytes对象</span></span><br><span class="line"><span class="string">'123'</span>.encode()</span><br></pre></td></tr></table></figure><p>声明一个bytes类型的对象str，并使用默认编码utf-8将其解码为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ str = <span class="string">b'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line">$ str.decode()</span><br><span class="line"><span class="string">'中国'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习20——随机数的使用</title>
      <link href="/2019/04/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A020%E2%80%94%E2%80%94%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A020%E2%80%94%E2%80%94%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="（一）获得-a-b-之间的随机整数"><a href="#（一）获得-a-b-之间的随机整数" class="headerlink" title="（一）获得[a, b]之间的随机整数"></a>（一）获得[a, b]之间的随机整数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(random.randint(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="（二）从一个非空序列中随机挑选一个元素"><a href="#（二）从一个非空序列中随机挑选一个元素" class="headerlink" title="（二）从一个非空序列中随机挑选一个元素"></a>（二）从一个非空序列中随机挑选一个元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print(random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从0～9中随机取一整数</span></span><br><span class="line">print(random.choice(range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="（三）按指定基数递增的集合中获取随机数"><a href="#（三）按指定基数递增的集合中获取随机数" class="headerlink" title="（三）按指定基数递增的集合中获取随机数"></a>（三）按指定基数递增的集合中获取随机数</h2><p>基数缺省值为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># randrange([start,]stop[,step]) 取不到stop对应的值</span></span><br><span class="line">print(random.randrange(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="（四）随机打乱列表的元素"><a href="#（四）随机打乱列表的元素" class="headerlink" title="（四）随机打乱列表的元素"></a>（四）随机打乱列表的元素</h2><p>就地修改，返回值为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac运行Swift的REPL时报错的问题</title>
      <link href="/2019/03/31/Mac%E8%BF%90%E8%A1%8CSwift%E7%9A%84REPL%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/31/Mac%E8%BF%90%E8%A1%8CSwift%E7%9A%84REPL%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>当在Mac的终端输入<code>swift</code>后，出现报错，经查阅，报错由于使用了Mac版本的Swift和非Mac自带的Python导致，可以通过以下命令解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install six</span><br></pre></td></tr></table></figure><p>解决方法原文：<a href="https://github.com/Homebrew/homebrew-core/issues/2712" target="_blank" rel="noopener">点我</a></p><p>报错信息如下：</p><a id="more"></a><p>$ swift<br>Traceback (most recent call last):<br>File “”, line 1, in<br>File “/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python/lldb/init.py”, line 98, in<br>import six<br>ImportError: No module named six<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined<br>Traceback (most recent call last):<br>File “”, line 1, in<br>NameError: name ‘run_one_line’ is not defined</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故障解决 </tag>
            
            <tag> Mac </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift语言快速入门01——语言基础</title>
      <link href="/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A801%E2%80%94%E2%80%94%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A801%E2%80%94%E2%80%94%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本系列是自学经历的笔记，不提供多余文字说明，默认有编程基础</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0.hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.常量和变量的声明</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="number">2</span>       <span class="comment">// 可以改变值的是变量，使用var声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1  = <span class="number">1</span> <span class="comment">// 常量就是不能改变值的类型，使用let声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.类型标注</span></span><br><span class="line"><span class="keyword">var</span> a2 : <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">a2 = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a3 : <span class="type">Int</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a4 : <span class="type">Double</span> = <span class="number">1.66666666666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a5 : <span class="type">Float</span> = <span class="number">1.66666666666</span> <span class="comment">// Float类型只到后6位</span></span><br><span class="line"></span><br><span class="line">type(of: a2) <span class="comment">// 查看变量类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.常量变量的命名</span></span><br><span class="line"><span class="keyword">let</span> name : <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> 姓名 : <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> 😆 = <span class="string">"小王"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.输出常量和变量</span></span><br><span class="line"><span class="built_in">print</span>(😆) <span class="comment">// print函数会自动在结尾加上‘\n’，表示换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.1字符串插值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"😆代表的是\(😆)"</span>) <span class="comment">// 反斜杠和括号是Swift语言字符串插值的使用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.分号</span></span><br><span class="line"><span class="keyword">let</span> catName = <span class="string">"Tom"</span>; <span class="built_in">print</span>(catName) <span class="comment">// 在同一行写两条独立语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.数据类型与类型转换</span></span><br><span class="line"><span class="keyword">let</span> three = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> point = <span class="number">0.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PI = "</span> + <span class="type">String</span>(<span class="type">Double</span>(three) + point))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PI ="</span>, <span class="number">3</span> + <span class="number">0.14</span>) <span class="comment">// 注意，虽然整型变量不能直接和浮点数变量相加，但是如果直接是数字就是可以的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.1整型</span></span><br><span class="line"><span class="keyword">let</span> intMin = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line"><span class="keyword">let</span> intMax = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"整型的范围:\(intMin)~\(intMax)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.2千分位计数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1_000_000</span> == <span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.3多进制</span></span><br><span class="line"><span class="keyword">let</span> fifteenInDecimal = <span class="number">15</span> <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> fifteenInHex = <span class="number">0xF</span>    <span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> fifteenInOctal = <span class="number">0o17</span> <span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> fifteenInBinary = <span class="number">0b1111</span> <span class="comment">// 二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.可选类型</span></span><br><span class="line"><span class="keyword">let</span> age : <span class="type">Int</span>? = <span class="literal">nil</span> <span class="comment">// 表示一个确定但缺失的值，避免空指针异常， = nil可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.if语句以及强制解析</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"age == nil"</span>)</span><br><span class="line">    <span class="comment">// print(age!) // 强制解析，消除警告，仅在可选值一定有值时才可以使用，否则会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"age == nil"</span>)</span><br><span class="line">    <span class="built_in">print</span>(age ?? <span class="number">20</span>) <span class="comment">// 当age是nil时，赋值为20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.可选绑定</span></span><br><span class="line"><span class="keyword">let</span> school : <span class="type">String</span>? = <span class="string">"外国语"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> mySchool = school &#123; <span class="comment">// 如果school不为nil才进行变量的绑定</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"mySchool = "</span> + mySchool)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"school = nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift语言快速入门03——字符串和集合类型</title>
      <link href="/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本系列是自学经历的笔记，不提供多余文字说明，默认有编程基础</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 用Character类型定义字符串</span></span><br><span class="line"><span class="keyword">var</span> a : <span class="type">Character</span> = <span class="string">"好"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 获得字符串的下标，并通过下标取出字符串中的字符</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"我爱中国"</span></span><br><span class="line"><span class="keyword">let</span> index = str2.index(str2.startIndex, offsetBy: <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(str2[index])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 字符串和字符拼接，不能使用+号</span></span><br><span class="line"><span class="keyword">var</span> ch : <span class="type">Character</span> = <span class="string">"国"</span></span><br><span class="line"><span class="keyword">var</span> begin : <span class="type">String</span> = <span class="string">"我爱中"</span></span><br><span class="line">begin.append(ch)</span><br><span class="line"><span class="built_in">print</span>(begin)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 使用Tuple打包数据</span></span><br><span class="line"><span class="keyword">let</span> success = (<span class="number">200</span>, <span class="string">"HTTP ok"</span>)</span><br><span class="line"><span class="keyword">let</span> fileNotFound = (<span class="number">404</span>, <span class="string">"File not found"</span>)</span><br><span class="line">success.<span class="number">0</span></span><br><span class="line">success.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">type(of: success) <span class="comment">// 类型：(Int, String)组成的Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> me = (name : <span class="string">"Sherlock"</span>, age : <span class="number">23</span>, job : <span class="string">"Developer"</span>) <span class="comment">// 让Tuple更容易取值</span></span><br><span class="line">me.name</span><br><span class="line">me.job</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (successCode, successMsg) = success <span class="comment">// 使用Tuple给多个变量赋值</span></span><br><span class="line">successCode</span><br><span class="line">successMsg</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift语言快速入门02——基本运算符</title>
      <link href="/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2019/03/31/Swift%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本系列是自学经历的笔记，不提供多余文字说明，默认有编程基础</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 算术运算</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line">a + b</span><br><span class="line"></span><br><span class="line"><span class="string">"3"</span> + <span class="string">".14"</span> <span class="comment">// 字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 赋值运算符</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 求余数</span></span><br><span class="line">b % a</span><br><span class="line">a % b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 组合赋值运算符</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">1</span></span><br><span class="line">d += <span class="number">1</span>  <span class="comment">// 等同于d = d + 1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 比较运算符</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">A</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">B</span> = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">A</span> == <span class="type">B</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">A</span> &gt; <span class="type">B</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">A</span> != <span class="type">B</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 三元运算符</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">C</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">D</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">E</span> = <span class="type">C</span> &gt; <span class="type">D</span> ? <span class="type">C</span> : <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">E</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 空合运算符</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">F</span> : <span class="type">String</span>? = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">F</span> ?? <span class="string">"123"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 区间运算符</span></span><br><span class="line"><span class="comment">// 8.1 闭区间运算符</span></span><br><span class="line"><span class="comment">// a...b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"开始打印闭区间运算符..."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"打印闭区间运算符结束"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.2 半开区间运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"开始打印半开区间运算符..."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"打印半开区间运算符结束"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.3 单侧区间运算符</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"打印单侧区间运算符开始..."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr1[..&lt;<span class="number">2</span>] &#123; <span class="comment">// 打印索引为0、1的元素</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"打印单侧区间运算符结束"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 逻辑运算符</span></span><br><span class="line"><span class="comment">// 与、或、非</span></span><br><span class="line"><span class="comment">// &amp;&amp; || !</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅21——结构体</title>
      <link href="/2019/03/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8521%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2019/03/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8521%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      <content type="html"><![CDATA[<h2 id="结构体的写法与初始化"><a href="#结构体的写法与初始化" class="headerlink" title="结构体的写法与初始化"></a>结构体的写法与初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">id   <span class="keyword">int</span></span><br><span class="line">age  <span class="keyword">int</span> <span class="comment">// 代表字符类型</span></span><br><span class="line">sex  <span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化结构体1，顺序初始化</span></span><br><span class="line"><span class="keyword">var</span> stu1 Student = Student&#123;<span class="string">"tom"</span>, <span class="number">101</span>, <span class="number">13</span>, <span class="string">'m'</span>&#125;</span><br><span class="line">fmt.Println(stu1) <span class="comment">// &#123;tom 101 13 109&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>结构体的成员不需要使用<code>var</code>关键字来声明；字符类型的sex将会打印对应ASCII码，如果你需要声明为汉子，则需要使用<code>rune</code>类型，代表一个 UTF-8 字符</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化结构体2，指定初始化</span></span><br><span class="line">stu2 := Student&#123;name: <span class="string">"tom"</span>, age: <span class="number">13</span>&#125;</span><br><span class="line">fmt.Println(stu2) <span class="comment">// &#123;tom 0 13 0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="结构体指针类型的初始化"><a href="#结构体指针类型的初始化" class="headerlink" title="结构体指针类型的初始化"></a>结构体指针类型的初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化好对象类型后取地址，由指针类型接收</span></span><br><span class="line">    <span class="keyword">var</span> stu1 *Student = &amp;Student&#123;name: <span class="string">"tom"</span>&#125;</span><br><span class="line">    <span class="comment">// 取内存空间</span></span><br><span class="line">fmt.Println(*stu1) <span class="comment">// &#123;tom 0 0 0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅20——生成随机数</title>
      <link href="/2019/02/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8520%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2019/02/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8520%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>生成随机数我们需要设置一个随机数的seed（种子），不过要注意的是，相同的seed每次生成的随机数是同一组的</p><p>为了保证随机数能够更加随机且无规律，我们可以使用当前时间作为随机数的seed</p><p>具体看代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano()) <span class="comment">// 设置种子数为当前时间</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(rand.Int()) <span class="comment">// 生成一组大数随机数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8850436535121827008</span></span><br><span class="line"><span class="comment">// 6377841482169103266</span></span><br><span class="line"><span class="comment">// 4457291880434124677</span></span><br><span class="line"><span class="comment">// 3123534825015967222</span></span><br><span class="line"><span class="comment">// 3174816732139892017</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>我们可以这样指定其生成的范围，以免数字过大：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(rand.Intn(<span class="number">10</span>)) <span class="comment">// 生成一组[0,9]范围内的整数作为随机数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅19——new函数的使用</title>
      <link href="/2019/02/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8519%E2%80%94%E2%80%94new%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/02/01/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8519%E2%80%94%E2%80%94new%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>声明一个指针类型的变量，我们会这么做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;nil&gt;</span><br><span class="line">*int</span><br></pre></td></tr></table></figure><p>由此可见，<code>a</code>确实是一个<code>int类型的指针</code>，但是并没有为其分配内存空间，所以在我们试图打印其内存地址的时候，输出结果是<code>&lt;nil&gt;</code></p><p>如果我们需要修改该指针指向的值，就不得不为其先分配一个内存地址，我们知道：当变量被声明的时候，会创建内存并分配地址，所以方法一如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">b := <span class="number">10</span></span><br><span class="line">a = &amp;b <span class="comment">// 将变量b的地址赋给指针a</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(*a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xc000090000</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>但是显然这样做太麻烦了：我们需要创建一个中间变量<code>b</code>才能完成给指针类型分配内存地址的工作，这时候，就需要使用<code>new</code>函数了</p><a id="more"></a><p>方法二：使用<code>new</code>函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span> = <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">*a = <span class="number">10</span></span><br><span class="line">fmt.Println(*a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new</code>函数可以分配内存地址并返回保存该内存地址的指针</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅17——init函数</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8517%E2%80%94%E2%80%94init%E5%87%BD%E6%95%B0/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8517%E2%80%94%E2%80%94init%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>init函数将会在程序运行的一开始执行，如果导入了其他的依赖包，依赖包的init函数也会自动执行，即使没有使用依赖包内的任何函数</p><p>由于go语言导入的包不使用就会报错，因此需要在包名前加上<code>_</code>，代表引入此包仅为了执行其<code>init</code>函数，而无需调用其他方法</p><a id="more"></a><p>被引入的包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test_init</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"test init..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">_ <span class="string">"sherlockgy.com/LearnGo/test_init"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main init"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test init...</span><br><span class="line">main init</span><br><span class="line">test</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅18——指针</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8518%E2%80%94%E2%80%94%E6%8C%87%E9%92%88/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8518%E2%80%94%E2%80%94%E6%8C%87%E9%92%88/</url>
      <content type="html"><![CDATA[<p>Go语言的指针还是比较简单的，我们首先先了解基本的使用：</p><p>取址运算符：<code>&amp;</code></p><p>取出变量的内存地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(&amp;a) <span class="comment">// 输出：0xc000070008</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针类型：<code>*int</code></p><p>定义一个指针类型并接受一个内存地址作为该变量的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></span><br><span class="line">p = &amp;a</span><br><span class="line">fmt.Println(*p) <span class="comment">// 取指针类型变量所指向的内存地址里，保存的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>注意：</strong>指针类型不赋值的时候，默认为<code>&lt;nil&gt;</code>，而不是<code>NULL</code></p><p>不要使用没有合法指向的内存：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> point *<span class="keyword">int</span></span><br><span class="line">fmt.Println(*point)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x1090d27]</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br></pre></td></tr></table></figure><p>因为该指针类型的变量并没有被赋值，因此取对应内存所保存的值时会报错</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅16——接收命令行参数</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8516%E2%80%94%E2%80%94%E6%8E%A5%E6%94%B6%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8516%E2%80%94%E2%80%94%E6%8E%A5%E6%94%B6%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>我们如果编写的是Linux或Mac等的命令行程序，需要在执行程序的时候接收相关命令，我们就可以使用<code>os</code>包来实现</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := os.Args</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(list)</span><br><span class="line">fmt.Println(<span class="string">"命令行参数长度为："</span>, <span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, v := <span class="keyword">range</span> list &#123;</span><br><span class="line">fmt.Printf(<span class="string">"list[%d] = %s"</span>, index, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅15——延迟调用defer</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8515%E2%80%94%E2%80%94%E5%BB%B6%E8%BF%9F%E8%B0%83%E7%94%A8defer/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8515%E2%80%94%E2%80%94%E5%BB%B6%E8%BF%9F%E8%B0%83%E7%94%A8defer/</url>
      <content type="html"><![CDATA[<p><code>defer</code>关键字修饰的语句将获得<code>延时执行</code>的特性，将会在该方法结束前调用</p><p><strong>注意：</strong><code>defer</code>语句只能出现在方法内部</p><h2 id="defer的使用"><a href="#defer的使用" class="headerlink" title="defer的使用"></a>defer的使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"print defer"</span>)</span><br><span class="line">fmt.Println(<span class="string">"print 1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print 1</span></span><br><span class="line"><span class="comment">// print defer</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="多个defer的调用顺序"><a href="#多个defer的调用顺序" class="headerlink" title="多个defer的调用顺序"></a>多个defer的调用顺序</h2><p><code>defer</code>是延时加载的，当普通语句执行完毕后，<code>defer</code>的语句遵循逆序执行：最先写的<code>defer</code>语句最后执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"2"</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 3</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不管程序是否报错中断，<code>defer</code>语句总会执行，可以理解为Java的<code>finally</code></p><h2 id="defer和匿名函数的结合使用"><a href="#defer和匿名函数的结合使用" class="headerlink" title="defer和匿名函数的结合使用"></a>defer和匿名函数的结合使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"内部：a的函数内值：%d，b的函数内值%d\n"</span>, a, b)</span><br><span class="line">&#125;(a, b)</span><br><span class="line"></span><br><span class="line">a = <span class="number">888</span></span><br><span class="line">b = <span class="number">999</span></span><br><span class="line">fmt.Printf(<span class="string">"外部：a的函数内值：%d，b的函数内值%d\n"</span>, a, b)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部：a的函数内值：888，b的函数内值999</span><br><span class="line">内部：a的函数内值：888，b的函数内值999</span><br></pre></td></tr></table></figure><p>我们可以看到，a和b的函数内打印的值是在<code>+=</code>执行后的</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅14——匿名函数和闭包</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8514%E2%80%94%E2%80%94%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8514%E2%80%94%E2%80%94%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>在go语言当中，匿名函数可以作为一个函数当中的变量，它没有函数名称但是却可以访问其作用域外的变量，这样的能力被称为<code>闭包</code></p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 01、匿名函数的声明和调用</span></span><br><span class="line">a := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 02、直接调用匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你好"</span>)</span><br><span class="line">&#125;() <span class="comment">// ()代表调用函数和传参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 03、下面演示闭包，匿名函数可以访问函数外的变量</span></span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">str1 := <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"num1 = %d, str1 = %s\n"</span>, num1, str1)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 04、闭包的参数传递特性测试，由于num1被改变了，所以闭包是传递的引用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">num1 = num1 + <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">"num1现在等于%d\n"</span>, num1)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Printf(<span class="string">"num1现在等于%d\n"</span>, num1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>闭包内变量的生命周期与普通函数不同，普通函数的变量在被调用时初始化，调用结束后即被回收，而闭包内的变量的生命周期和作用域无关</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包内变量的生命周期不受其作用域限制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">x := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">x++</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := test()</span><br><span class="line">fmt.Println(t())</span><br><span class="line">fmt.Println(t())</span><br><span class="line">fmt.Println(t())</span><br><span class="line">fmt.Println(t())</span><br><span class="line">fmt.Println(t())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上输出结果分别为：1、2、3、4、5</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅13——回调函数</title>
      <link href="/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8513%E2%80%94%E2%80%94%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2019/01/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8513%E2%80%94%E2%80%94%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>使用回调函数可以帮助我们提高代码的灵活性，避免硬编码问题，下面我们就来看一下go语言当中，要如何实现回调吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数类型的变量</span></span><br><span class="line"><span class="keyword">type</span> FuncMath <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/*</span></span><br><span class="line"><span class="function"> * 用来作为参数传给数学计算方法的函数，代表加法功能</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 进行数学计算的方法，通过传入函数作为参数来决定其具体作用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMath</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>, funcMath FuncMath)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> funcMath(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result := doMath(<span class="number">1</span>, <span class="number">2</span>, add)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>由此可见，所谓回调，即是将一个函数作为变量类型传递给另一个函数作为参数，从而实现程序的<code>多态性</code></p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅12——goto和标签</title>
      <link href="/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8512%E2%80%94%E2%80%94goto%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8512%E2%80%94%E2%80%94goto%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>Go语言还是保留了<code>goto</code>这个功能的，但是不建议使用太多，因为会使得代码比较混乱，不易于后续的阅读和维护</p><p><code>goto</code>可以无条件跳转执行的位置，但不能跨函数，需要配合标签<code>label</code>使用</p><p>先看这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">goto</span> printThree</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line">printThree:</span><br><span class="line">fmt.Println(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*result:</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如上所示，<code>goto</code>可以跳过代码直接执行标签位置的语句</p><a id="more"></a><p>不过标签还有一种使用方式，就是配合跳出多层循环，因为<code>break</code>只能跳出当前所在的循环，因此，我们可以配合标签使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">break</span> outer</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    fmt.Println(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">/*result:</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        3</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅11——类型别名的使用</title>
      <link href="/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8511%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8511%E2%80%94%E2%80%94%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>类型别名和原类型完全一样，只不过是另一种叫法而已，而类型定义和原类型是不同的两个类型。</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> bigInt <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a bigInt</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"变量a的类型是%T"</span>, a) <span class="comment">// 变量a的类型是main.bigInt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅10——接收键盘输入</title>
      <link href="/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8510%E2%80%94%E2%80%94%E6%8E%A5%E6%94%B6%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5/"/>
      <url>/2019/01/13/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8510%E2%80%94%E2%80%94%E6%8E%A5%E6%94%B6%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>我们除了需要输出值到屏幕，有时候也需要接收来自键盘输入的值，可以使用<code>fmt</code>包内的<code>Scan</code>或<code>Scanf</code></p><p>如果使用<code>Scanf</code>，需要传入格式化类型；或者直接使用<code>Scan</code></p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请任意输入："</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Scanf("%s", &amp;a)</span></span><br><span class="line">fmt.Scan(&amp;a)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"您输入的是："</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>传入的变量需取址</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言知识点02——格式化输出类型梳理</title>
      <link href="/2019/01/13/Go%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B902%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E6%A2%B3%E7%90%86/"/>
      <url>/2019/01/13/Go%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B902%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>这里梳理一下go语言中，<code>printf</code>可以使用的格式化输出类型：</p><a id="more"></a><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">%%</td><td style="text-align:center">一个%字面量</td></tr><tr><td style="text-align:center">%b</td><td style="text-align:center">一个二进制整数值(基数为2)，或者是一个(高级的)用科学计数法表示的指数为2的浮点数</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">（常用）字符型，可以把输入的数字按照ASCII码相应转换为对应的字符</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">（常用）一个十进制数值(基数为10)</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">以科学记数法e表示的浮点数或者复数值</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:center">以科学记数法E表示的浮点数或者复数值</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">以标准记数法表示的浮点数或者复数值</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">以%e或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:center">以%E或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">一个以八进制表示的数字(基数为8)</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">以十六进制(基数为16)表示的一个值的地址，前缀为0x,字母使用小写的a-f表示</td></tr><tr><td style="text-align:center">%q</td><td style="text-align:center">以双引号括起来的字符串或者字节切片[]byte，或者是以单引号括起来的数字</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td></tr><tr><td style="text-align:center">%t</td><td style="text-align:center">（常用）以true或者false输出的布尔值</td></tr><tr><td style="text-align:center">%T</td><td style="text-align:center">（常用）输出的值的数据类型</td></tr><tr><td style="text-align:center">%U</td><td style="text-align:center">一个用Unicode表示法表示的整型码点，默认值为4个数字字符</td></tr><tr><td style="text-align:center">%v</td><td style="text-align:center">（常用）使用默认格式输出的内置或者自定义类型的值，或者是使用其类型的String()方式输出的自定义值，如果该方法存在的话。自动匹配类型的格式化</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">以十六进制表示的整型值(基数为十六)，数字a-f使用小写表示</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">以十六进制表示的整型值(基数为十六)，数字A-F使用小写表示</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言知识点01——字符和字符串的区别</title>
      <link href="/2019/01/13/Go%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B901%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/13/Go%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B901%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>在这里梳理一下go语言两大数据类型——字符和字符串的区别及联系</p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><ul><li>字符声明使用<strong>单引号</strong></li><li>字符往往只有一个字符，但转义字符除外，如’\n’</li><li>格式化输出为<code>%c</code></li></ul><a id="more"></a><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>字符串的声明使用<strong>双引号</strong></li><li>字符串可以有一个或多个字符组成</li><li>字符串都隐藏了一个结束符，’\0’</li><li>格式化输出为<code>%s</code></li></ul><p>例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"a"</span> <span class="comment">// 由'a'和'\0'组成一个字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅09——map</title>
      <link href="/2019/01/12/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8509%E2%80%94%E2%80%94map/"/>
      <url>/2019/01/12/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8509%E2%80%94%E2%80%94map/</url>
      <content type="html"><![CDATA[<h2 id="map的定义"><a href="#map的定义" class="headerlink" title="map的定义"></a>map的定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map 方法一</span></span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"A"</span>: <span class="string">"a"</span>,</span><br><span class="line"><span class="string">"B"</span>: <span class="string">"b"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义map 方法二 empty map</span></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义map 方法三 nil</span></span><br><span class="line"><span class="keyword">var</span> m3 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">fmt.Println(m1) <span class="comment">// map[A:a B:b]</span></span><br><span class="line">fmt.Println(m2) <span class="comment">// map[]</span></span><br><span class="line">fmt.Println(m3) <span class="comment">// map[]，注意：此map为nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map的赋值"><a href="#map的赋值" class="headerlink" title="map的赋值"></a>map的赋值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Println(m1, <span class="built_in">len</span>(m1)) <span class="comment">// map[] 0，注意：这里只是初始化了他的容量，但是len依然是0</span></span><br><span class="line">m1[<span class="string">"A"</span>] = <span class="string">"a"</span> <span class="comment">// go语言的赋值方式</span></span><br><span class="line">m1[<span class="string">"B"</span>] = <span class="string">"b"</span></span><br><span class="line">fmt.Println(m1, <span class="built_in">len</span>(m1)) <span class="comment">// map[A:a B:b] 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"A"</span>: <span class="string">"a"</span>,</span><br><span class="line"><span class="string">"B"</span>: <span class="string">"b"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">"ket = %s, v = %s\n"</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>map的遍历不保证顺序</p></blockquote><a id="more"></a><h2 id="map的取值"><a href="#map的取值" class="headerlink" title="map的取值"></a>map的取值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"sherlock"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(m1[<span class="string">"name"</span>]) <span class="comment">// sherlock</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当所取的key不存在时：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"sherlock"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, m1[<span class="string">"age"</span>]) <span class="comment">// ""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过接收第二个返回值来保证map的key存在：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"sherlock"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name, result1 := m1[<span class="string">"name"</span>]</span><br><span class="line">age, result2 := m1[<span class="string">"age"</span>]</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"name = %q, result1 = %t\n"</span>, name, result1) <span class="comment">// name = "sherlock", result1 = true</span></span><br><span class="line">fmt.Printf(<span class="string">"age = %q, result2 = %t\n"</span>, age, result2)   <span class="comment">// age = "", result2 = false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><code>m1[key]</code>有两个返回值，第一个返回值是key对应的value，第二个返回值是key是否存在的布尔值；若key不存在，取出的value是空字符串</p></blockquote><p>安全取值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"sherlock"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v, result := m1[<span class="string">"name"</span>]; result &#123;</span><br><span class="line">fmt.Println(<span class="string">"value ="</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"map中不存在该key"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"A"</span>: <span class="string">"a"</span>, <span class="string">"B"</span>: <span class="string">"b"</span>, <span class="string">"C"</span>: <span class="string">"c"</span>&#125;</span><br><span class="line"><span class="comment">// 删除键为B的键值对</span></span><br><span class="line"><span class="built_in">delete</span>(m1, <span class="string">"B"</span>)</span><br><span class="line">fmt.Println(m1) <span class="comment">// map[A:a C:c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map作函数参数是引用传递"><a href="#map作函数参数是引用传递" class="headerlink" title="map作函数参数是引用传递"></a>map作函数参数是引用传递</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"A"</span>: <span class="string">"a"</span>,</span><br><span class="line"><span class="string">"B"</span>: <span class="string">"b"</span>,</span><br><span class="line"><span class="string">"C"</span>: <span class="string">"c"</span>,</span><br><span class="line">&#125;</span><br><span class="line">testMap(m1)</span><br><span class="line">fmt.Println(m1) <span class="comment">// map[B:Z C:c A:a]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testMap</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">m[<span class="string">"B"</span>] = <span class="string">"Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅08——切片Slice</title>
      <link href="/2018/12/24/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8508%E2%80%94%E2%80%94%E5%88%87%E7%89%87/"/>
      <url>/2018/12/24/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8508%E2%80%94%E2%80%94%E5%88%87%E7%89%87/</url>
      <content type="html"><![CDATA[<h2 id="Go语言切片"><a href="#Go语言切片" class="headerlink" title="Go语言切片"></a>Go语言切片</h2><p>切片可以传入三个参数，分别是<code>[low, high, max]</code>，取元素就是从low开始，取high - low个数（等同于Java和Python），max - low的数作为新的切片的容量cap，可以不传max，当max不传时，容量默认和长度len相同。</p><p>即：新切片的len = high - low，cap = max - low</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:<span class="number">6</span>]) <span class="comment">// [2 3 4 5]</span></span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:])  <span class="comment">// [2 3 4 5 6 7]</span></span><br><span class="line">fmt.Println(arr[:<span class="number">6</span>])  <span class="comment">// [0 1 2 3 4 5]</span></span><br><span class="line">fmt.Println(arr[:])   <span class="comment">// [0 1 2 3 4 5 6 7]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>切片包头不包尾</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>由数组执行切片所返回的对象是一个<code>view</code>，即视图，若我们在视图上操作数组，会改变原数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123; <span class="comment">// 接收一个切片的view作为参数，而不是不限制长度的数组</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"前arr1 = "</span>, arr1) <span class="comment">// 前arr1 =  [0 1 2 3 4 5 6 7]</span></span><br><span class="line">updateSlice(arr1[:])</span><br><span class="line">fmt.Println(<span class="string">"后arr1 = "</span>, arr1) <span class="comment">// 后arr1 =  [99 1 2 3 4 5 6 7]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>可以在view的基础上继续执行切片（slice），称为<code>Reslice</code></p><a id="more"></a><h2 id="slice的扩展"><a href="#slice的扩展" class="headerlink" title="slice的扩展"></a>slice的扩展</h2><p>先看示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"前arr1 = "</span>, arr1) <span class="comment">// [0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">fmt.Println(<span class="string">"第一次slice = "</span>, arr2) <span class="comment">// [3 4 5]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr2[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(<span class="string">"第二次slice = "</span>, arr3) <span class="comment">// [6 7]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于切片，存在<code>len()</code>和<code>cap()</code>两个概念，len范围内的元素是可以直接获取到的，而超出的部分如果依然在cap的返回内可以通过拓展获取，如果超出cap的长度，则会报错</p><p><strong>注意：</strong>slice可以向后扩展，不可以向前扩展</p><h2 id="slice的操作"><a href="#slice的操作" class="headerlink" title="slice的操作"></a>slice的操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 声明一个切片</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">append</span>(s1, <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">"原切片s1 = "</span>, s1) <span class="comment">// 原切片s1 =  [1 2 3]</span></span><br><span class="line">fmt.Println(<span class="string">"原切片s2 = "</span>, s2) <span class="comment">// 原切片s2 =  [1 2 3 4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>slice如果append的长度超过了cap，那么底层会重新给他分配一个更大的数组</p><p><strong>补充：</strong>由于值传递的原因，必须接受append的返回值</p><h3 id="slice的创建"><a href="#slice的创建" class="headerlink" title="slice的创建"></a>slice的创建</h3><p>slice的默认值是nil，len为0，cap为0，cap每一次扩充大小都是乘以2</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;     <span class="comment">// 分配初值</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">4</span>)     <span class="comment">// 不分配初始值，指定切片类型，指定长度。不指定容量cap时，容量和长度相同</span></span><br><span class="line">s4 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">4</span>, <span class="number">10</span>) <span class="comment">// 不分配初始值，指定切片类型，指定长度和容量cap</span></span><br><span class="line">fmt.Println(<span class="string">"s1 ="</span>, s1, <span class="string">"len ="</span>, <span class="built_in">len</span>(s1), <span class="string">"cap ="</span>, <span class="built_in">cap</span>(s1)) <span class="comment">// s1 = [] len = 0 cap = 0</span></span><br><span class="line">fmt.Println(<span class="string">"s2 ="</span>, s2, <span class="string">"len ="</span>, <span class="built_in">len</span>(s1), <span class="string">"cap ="</span>, <span class="built_in">cap</span>(s2)) <span class="comment">// s2 = [1 2 3] len = 3 cap = 3</span></span><br><span class="line">fmt.Println(<span class="string">"s3 ="</span>, s3, <span class="string">"len ="</span>, <span class="built_in">len</span>(s1), <span class="string">"cap ="</span>, <span class="built_in">cap</span>(s3)) <span class="comment">// s3 = [0 0 0 0] len = 4 cap = 4</span></span><br><span class="line">fmt.Println(<span class="string">"s4 ="</span>, s4, <span class="string">"len ="</span>, <span class="built_in">len</span>(s1), <span class="string">"cap ="</span>, <span class="built_in">cap</span>(s4)) <span class="comment">// s4 = [0 0 0 0] len = 4 cap = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slice的删除"><a href="#slice的删除" class="headerlink" title="slice的删除"></a>slice的删除</h3><p>删除某一下标的元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"原分片s1 ="</span>, s1) <span class="comment">// 原分片s1 = [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除下标1的元素</span></span><br><span class="line">s2 := <span class="built_in">append</span>(s1[:<span class="number">1</span>], s1[<span class="number">2</span>:]...)      <span class="comment">// append可以接受可变参数，s1[2:]...语法可以分解分片为多个元素</span></span><br><span class="line">fmt.Println(<span class="string">"s1删除下标元素1后 ="</span>, s2) <span class="comment">// s1删除下标元素1后 = [1 3 4 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除分片的头元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 := s1[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(s2) <span class="comment">// [2 3 4 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除分片的末元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 := s1[:<span class="built_in">len</span>(s1)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(s2) <span class="comment">// [1 2 3 4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slice的拷贝"><a href="#slice的拷贝" class="headerlink" title="slice的拷贝"></a>slice的拷贝</h3><p><code>copy()</code>内建函数在第一个参数的基础上，将第二个参数的元素加在其前面，第一个元素被修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(s1, s2)</span><br><span class="line">fmt.Println(s1) <span class="comment">// [8 9 3 4 5]</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [8 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片和数组的区别"><a href="#切片和数组的区别" class="headerlink" title="切片和数组的区别"></a>切片和数组的区别</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明一个数组，数组的长度不可改变，len和cap永远都是5</span></span><br><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"数组的长度：%d，数组的容量：%d\n"</span>, <span class="built_in">len</span>(arr), <span class="built_in">cap</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个切片，切片的长度可变</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"原切片的长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给切片的末尾追加一个成员</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"append后切片的长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组的长度：5，数组的容量：5</span><br><span class="line">原切片的长度：0，数组容量：0</span><br><span class="line">append后切片的长度：1，数组容量：1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅07——数组</title>
      <link href="/2018/12/24/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8507%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
      <url>/2018/12/24/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8507%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span>                 <span class="comment">// 声明数组，不赋值</span></span><br><span class="line">arr2 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;   <span class="comment">// 声明数组并赋值，指定数组长度，完整赋值</span></span><br><span class="line">arr3 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;         <span class="comment">// 不完整赋值，未赋值的为0</span></span><br><span class="line">arr4 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">2</span>&#125;      <span class="comment">// 指定下标赋值，为下标2赋值1，下标3赋值2，其余为0</span></span><br><span class="line">arr5 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">// 声明数组，长度由编译器自动识别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的比较，比较其每一个元素是否都相同：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">arr2 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(arr1 == arr2) <span class="comment">// 返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义二维数组"><a href="#定义二维数组" class="headerlink" title="定义二维数组"></a>定义二维数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr4 [<span class="number">4</span>][<span class="number">5</span>]<span class="keyword">int</span>  <span class="comment">// 定义4个长度为5的数组</span></span><br><span class="line">fmt.Println(arr4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr4); i++ &#123;  <span class="comment">// 一般遍历方法</span></span><br><span class="line">fmt.Println(arr4[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> arr2 &#123;      <span class="comment">// 推荐遍历方法</span></span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用<code>range</code>进行遍历的时候，可以接受两个返回值，返回值1是下标，返回值2是对应下标的内容，下划线可以表示不需要该返回值</p><h3 id="为什么要使用range"><a href="#为什么要使用range" class="headerlink" title="为什么要使用range"></a>为什么要使用range</h3><ul><li>意义明确、美观</li><li>C++原生没有该能力</li><li>Java、Python原生不能同时获取下标和值</li></ul><p><strong>注意：</strong>在go语言中，数组也是值类型，作为参数传递时，传递的是其拷贝，而不是其引用，因此需要指针才能修改</p><h2 id="数组作为函数的参数"><a href="#数组作为函数的参数" class="headerlink" title="数组作为函数的参数"></a>数组作为函数的参数</h2><p><strong>注意：</strong>数组作为参数是值传递，即，我们形参是实参的拷贝，如果需要同步修改，就要使用指针数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">modify(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(arr *[5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">(*arr)[<span class="number">0</span>] = <span class="number">99</span> <span class="comment">// 使用*取值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：[99 2 3 4 5]</p><p>进过测试，这样写也可以，当前go版本为：go version go1.11 darwin/amd64</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">modify(&amp;arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(arr *[5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">99</span> <span class="comment">// 没有取值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux&amp;Mac系统环境变量配置</title>
      <link href="/2018/12/23/Linux&amp;Mac%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/23/Linux&amp;Mac%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>mac 一般使用bash作为默认shell</p><p>Mac系统的环境变量，加载顺序为：</p><ul><li>/etc/profile </li><li>/etc/paths </li><li>~/.bash_profile </li><li>~/.bash_login </li><li>~/.profile </li><li>~/.bashrc</li></ul><p>当然<code>/etc/profile</code>和<code>/etc/paths</code>是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。</p><p>后面3个按照从前往后的顺序读取，如果<code>~/.bash_profile</code>文件存在，则后面的几个文件就会被忽略不读了，如果<code>~/.bash_profile</code>文件不存在，才会以此类推读取后面的文件。<code>~/.bashrc没有上述规则</code>，它是bash shell打开的时候载入的。</p><p>如果没特殊说明,设置PATH的语法都为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">中间用冒号隔开</span></span><br><span class="line">export PATH=$PATH:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="一、全局设置"><a href="#一、全局设置" class="headerlink" title="一、全局设置"></a>一、全局设置</h2><p>下面的几个文件设置是全局的，修改时需要root权限</p><h3 id="1）-etc-paths-（全局建议修改这个文件-）"><a href="#1）-etc-paths-（全局建议修改这个文件-）" class="headerlink" title="1）/etc/paths （全局建议修改这个文件 ）"></a>1）/etc/paths （全局建议修改这个文件 ）</h3><p>编辑 paths，将环境变量添加到 paths文件中 ，一行一个路径<br>Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</p><h3 id="2）-etc-profile-（建议不修改这个文件-）"><a href="#2）-etc-profile-（建议不修改这个文件-）" class="headerlink" title="2）/etc/profile （建议不修改这个文件 ）"></a>2）/etc/profile （建议不修改这个文件 ）</h3><p>全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</p><h3 id="3）-etc-bashrc-（一般在这个文件中添加系统级环境变量）"><a href="#3）-etc-bashrc-（一般在这个文件中添加系统级环境变量）" class="headerlink" title="3）/etc/bashrc （一般在这个文件中添加系统级环境变量）"></a>3）/etc/bashrc （一般在这个文件中添加系统级环境变量）</h3><p>全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。</p><h3 id="4）操作步骤"><a href="#4）操作步骤" class="headerlink" title="4）操作步骤"></a>4）操作步骤</h3><h4 id="1-创建一个文件："><a href="#1-创建一个文件：" class="headerlink" title="1.创建一个文件："></a>1.创建一个文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/paths.d/mysql</span><br></pre></td></tr></table></figure><h4 id="2-用-vim-打开这个文件（如果是以-open-t-的方式打开，则不允许编辑）："><a href="#2-用-vim-打开这个文件（如果是以-open-t-的方式打开，则不允许编辑）：" class="headerlink" title="2.用 vim 打开这个文件（如果是以 open -t 的方式打开，则不允许编辑）："></a>2.用 vim 打开这个文件（如果是以 open -t 的方式打开，则不允许编辑）：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/paths.d/mysql</span><br></pre></td></tr></table></figure><h4 id="3-编辑该文件，键入路径并保存（关闭该-Terminal-窗口并重新打开一个，就能使用-mysql-命令了）"><a href="#3-编辑该文件，键入路径并保存（关闭该-Terminal-窗口并重新打开一个，就能使用-mysql-命令了）" class="headerlink" title="3.编辑该文件，键入路径并保存（关闭该 Terminal 窗口并重新打开一个，就能使用 mysql 命令了）"></a>3.编辑该文件，键入路径并保存（关闭该 Terminal 窗口并重新打开一个，就能使用 mysql 命令了）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>这样可以自己生成新的文件，不用把变量全都放到 paths 一个文件里，方便管理。</p><h2 id="二、单个用户设置"><a href="#二、单个用户设置" class="headerlink" title="二、单个用户设置"></a>二、单个用户设置</h2><h3 id="1）-bash-profile-（任意一个文件中添加用户级环境变量）"><a href="#1）-bash-profile-（任意一个文件中添加用户级环境变量）" class="headerlink" title="1）~/.bash_profile （任意一个文件中添加用户级环境变量）"></a>1）~/.bash_profile （任意一个文件中添加用户级环境变量）</h3><p>（注：Linux 里面是 .bashrc 而 Mac 是 .bash_profile）<br>若bash shell是以login方式执行时，才会读取此文件。该文件仅仅执行一次!默认情况下,他设置一些环境变量<br>设置命令别名alias ll=’ls -la’</p><p>设置环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/opt/local/bin:/opt/local/sbin:$PATH</span><br></pre></td></tr></table></figure><h3 id="2）-bashrc-同上"><a href="#2）-bashrc-同上" class="headerlink" title="2）~/.bashrc 同上"></a>2）~/.bashrc 同上</h3><p>如果想立刻生效，则可执行下面的语句：<br>$ source 相应的文件<br>一般环境变量更改后，重启后生效。</p>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
            <tag> 系统配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅06——指针初见</title>
      <link href="/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8506%E2%80%94%E2%80%94%E6%8C%87%E9%92%88%E5%88%9D%E8%A7%81/"/>
      <url>/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8506%E2%80%94%E2%80%94%E6%8C%87%E9%92%88%E5%88%9D%E8%A7%81/</url>
      <content type="html"><![CDATA[<p>go语言的指针没有C语言那么复杂，这里稍加举例</p><p>详细一点的介绍请看学习之旅第18篇</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">passByValue</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">passByRef</span><span class="params">(a *<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">*a += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> *a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, passByValue(a))</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, passByRef(&amp;a))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅05——函数</title>
      <link href="/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8505%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/"/>
      <url>/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8505%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>关于函数之前已经举过一些例子，这里再做详细的介绍</p><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><p>go语言的函数由：关键字<code>func</code> + 函数名称 + 参数列表 + 返回值列表 + 函数体组成，若是匿名函数，则可以省略函数名称</p><h3 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h3><p>go语言允许一个函数返回多个值，如果调用者只需要其中的部分返回值，不需要的返回值可以使用下划线<code>_</code>符号接收，这样编辑器就不会认为存在没有使用的变量了。</p><p><strong>注意：</strong>go语言变量一经声明，必须使用，否则编译不通过，通过上述方法可以接收不需要使用的返回值</p><p>go语言的返回值可以命名，方式类似参数列表，这样做的好处是有：</p><ul><li><p>假设我们将返回值命名为score，那么我们如果在函数体内只需要给score赋完值，返回时只需要写return即可，而不是return score</p></li><li><p>调用该函数的时候，可以通过返回值名称（由IDE工具生成或显示）来判断每一个返回值得含义</p></li></ul><a id="more"></a><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>我们可以将一个函数传入作为入参，这样就可以实现动态化的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fp</span><span class="params">(op <span class="keyword">func</span>(a, b <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数式编程，函数作为入参</span></span><br><span class="line"><span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数式编程</span></span><br><span class="line">result := fp(<span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(a), <span class="keyword">float64</span>(b)))</span><br><span class="line">&#125;, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><p>go语言没有默认参数默认值这样的设计，但是依然拥有可变参数列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 可变参数列表</span></span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">result += nums[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅04——循环语句</title>
      <link href="/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8504%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8504%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h2 id="简单for循环："><a href="#简单for循环：" class="headerlink" title="简单for循环："></a>简单for循环：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，go语言的for循环不同于Java或C语言，不需要用括号来包裹表达式</p><p>go语言没有while循环，所以所有其他语言while的使用场景，go语言的for循环都可以完成：</p><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forever</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="省略for循环的定义和递增，仅保留判断条件"><a href="#省略for循环的定义和递增，仅保留判断条件" class="headerlink" title="省略for循环的定义和递增，仅保留判断条件"></a>省略for循环的定义和递增，仅保留判断条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">(fileName <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">result := <span class="string">""</span></span><br><span class="line">file, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">error := fmt.Errorf(<span class="string">"打开文件错误"</span>)</span><br><span class="line"><span class="keyword">return</span> result, error</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">scanner := bufio.NewScanner(file) <span class="comment">// 一行一行地读文件</span></span><br><span class="line">fmt.Println(<span class="string">"文件内容：start"</span>)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;              <span class="comment">// scanner.Scan()返回布尔类型，此处for循环只保留了循环条件，代替while</span></span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件内容：end"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span> <span class="comment">// nil代表不存在，这里指没有error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅03——条件语句</title>
      <link href="/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8503%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/12/23/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8503%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">88</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">100</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"满分"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a &gt;= <span class="number">90</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"优秀"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"一般"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在go语言当中，if语句还可以同时赋值并判断，两条语句使用分号<code>;`</code>隔开</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> chinese <span class="keyword">int</span> = <span class="number">88</span></span><br><span class="line"><span class="keyword">var</span> math <span class="keyword">int</span> = <span class="number">79</span></span><br><span class="line"><span class="keyword">if</span> total := chinese + math; total &lt; <span class="number">180</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"不够好"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"还不错"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>go语言的switch语句中，每一个case都默认有break，如果需要<code>穿透</code>的效果，则使用<code>fallthrough</code>关键字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="keyword">int</span>, op <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 四则运算</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">result = a + b</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">result = a - b</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">result = a * b</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">result = a / b</span><br><span class="line"><span class="keyword">case</span> <span class="string">"?"</span>:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"unsupported operator:"</span> + op) <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常switch需要传入一个表达式才可以和case匹配，但是在go语言的设计当中，表达式不是必须的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scoreLevel</span><span class="params">(score <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 计算成绩等级</span></span><br><span class="line">result := <span class="string">""</span></span><br><span class="line"><span class="keyword">switch</span> &#123;                                         <span class="comment">// switch可以没有表达式</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"wrong score:%d"</span>, score))  <span class="comment">// 强制报错并中断程序的执行</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">60</span>:</span><br><span class="line">result = <span class="string">"E"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">70</span>:</span><br><span class="line">result = <span class="string">"D"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">80</span>:</span><br><span class="line">result = <span class="string">"C"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">90</span>:</span><br><span class="line">result = <span class="string">"B"</span></span><br><span class="line"><span class="keyword">case</span> score &lt; <span class="number">100</span>:</span><br><span class="line">result = <span class="string">"A"</span></span><br><span class="line"><span class="keyword">case</span> score == <span class="number">100</span>:</span><br><span class="line">result = <span class="string">"S"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>go语言的返回值类型写在方法的后方</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅02——常量与枚举</title>
      <link href="/2018/10/10/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8502%E2%80%94%E2%80%94%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/"/>
      <url>/2018/10/10/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8502%E2%80%94%E2%80%94%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>首先需要强调：定义常量，<strong>Go语言常量不需要全部大写</strong>，因为在Go语言当中，大小写带有特殊含义</p><p>Go语言定义常量的关键字是<code>const</code>，可以显式地指名类型，也可以不指明，例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consts</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> filename <span class="keyword">string</span> = <span class="string">"abc.txt"</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="number">3</span>, <span class="number">4</span>             <span class="comment">// 不指名类型 类型不确定 可做各种类型</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int</span></span><br><span class="line">c = <span class="keyword">int</span>(math.Sqrt(a*a + b*b)) <span class="comment">// a和b都被视作float64类型</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>声明常量自动推导类型，使用<code>=</code>而不是<code>:=</code></p><a id="more"></a><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Go语言中的枚举是通过一组常量实现的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 枚举类型，一组const，必须指定值</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">cpp    = <span class="number">0</span></span><br><span class="line">java   = <span class="number">1</span></span><br><span class="line">python = <span class="number">2</span></span><br><span class="line">golang = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(cpp, java, python, golang)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的枚举类型的例子可以这样简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enumsSimple</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 枚举类型，简化</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">cpp = <span class="literal">iota</span> <span class="comment">// 自增</span></span><br><span class="line">java</span><br><span class="line">python</span><br><span class="line">golang</span><br><span class="line">)</span><br><span class="line">fmt.Println(<span class="string">"枚举类型简化："</span>, cpp, java, python, golang)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong><code>iota</code>是常量自动生成器，给常量赋值使用。从0开始，每行自动累加1；可以仅第一行写<code>iota</code>；如果是在同一行，值都为同一个值</p><p><strong>补充：</strong><code>iota</code>如果遇到下一个<code>const</code>，值重置为0</p><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p>使用枚举类型的简化运算计算：打印字节单位b、kb、mb、gb、tb、pb的字节数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execise</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 枚举类型，简化运算</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>) <span class="comment">// 自增，iota从0开始，1左移10即:1乘以（2的10次方）</span></span><br><span class="line">kb                   <span class="comment">// 1乘以（2的20次方） </span></span><br><span class="line">mb</span><br><span class="line">gb</span><br><span class="line">tb</span><br><span class="line">pb</span><br><span class="line">)</span><br><span class="line">fmt.Println(<span class="string">"枚举类型的简化运算 练习"</span>, b, kb, mb, mb, gb, tb, pb)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言学习之旅01——变量与数据</title>
      <link href="/2018/09/15/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8501%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/09/15/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%8501%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="大道至简"><a href="#大道至简" class="headerlink" title="大道至简"></a>大道至简</h2><p>Go语言（Golang）作为一门崇尚简洁的编程语言，主张使用20%的设计，解决80%的问题，他的全新设计思路，在如今21世纪非常值得我们去学习参考</p><p>它没有隐式数据类型转换，没有构造函数或者析构函数，没有运算符重载也没有继承、泛型、异常…但它却拥有垃圾搜集、一等函数、词法作用域以及channel等等</p><p>学习Go语言，就犹如打开编程语言世界的一扇新窗</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>按类别</p><table><thead><tr><th style="text-align:center">整体类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">布尔型</td><td style="text-align:center">布尔型的值只可以是常量 true 或者 false。例：var b bool = true</td></tr><tr><td style="text-align:center">数字类型</td><td style="text-align:center">整型 int 和浮点型 float32、float64，Go 语言原生支持复数，其中位的运算采用补码</td></tr><tr><td style="text-align:center">字符串类型</td><td style="text-align:center">字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</td></tr><tr><td style="text-align:center">派生类型</td><td style="text-align:center">包括：<br>(a) 指针类型（Pointer）<br>(b) 数组类型<br>(c) 结构化类型(struct)<br>(d) Channel 类型<br>(e) 函数类型<br>(f) 切片类型<br>(g)接口类型（interface）<br>(h) Map 类型</td></tr></tbody></table><a id="more"></a><table><thead><tr><th style="text-align:center">整数类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">uint8</td><td style="text-align:center">无符号 8 位整型 (0 到 255)</td></tr><tr><td style="text-align:center">uint16</td><td style="text-align:center">无符号 16 位整型 (0 到 65535)</td></tr><tr><td style="text-align:center">uint32</td><td style="text-align:center">无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td style="text-align:center">uint64</td><td style="text-align:center">无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td style="text-align:center">int8</td><td style="text-align:center">有符号 8 位整型 (-128 到 127)</td></tr><tr><td style="text-align:center">int16</td><td style="text-align:center">有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td style="text-align:center">int32</td><td style="text-align:center">有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td style="text-align:center">int64</td><td style="text-align:center">有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><table><thead><tr><th style="text-align:center">浮点数&amp;复数类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">float32</td><td style="text-align:center">IEEE-754 32位浮点型数</td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">IEEE-754 64位浮点型数，浮点数默认类型</td></tr><tr><td style="text-align:center">complex64</td><td style="text-align:center">32 位实数和虚数</td></tr><tr><td style="text-align:center">complex128</td><td style="text-align:center">64 位实数和虚数，复数默认类型</td></tr></tbody></table><table><thead><tr><th style="text-align:center">其他数字类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">uint8别名，用来存放字符</td></tr><tr><td style="text-align:center">rune</td><td style="text-align:center">等价int32，存放Unicode编码</td></tr><tr><td style="text-align:center">uint</td><td style="text-align:center">32 或 64 位</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">与 uint 一样大小</td></tr><tr><td style="text-align:center">uintptr</td><td style="text-align:center">无符号整型，用于存放一个指针</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">复数回顾：</span><br><span class="line">    定义i = 根号下-1</span><br><span class="line">    复数：3 + 4i</span><br><span class="line">    i平方 = -1  i三次方 = -i  i四次方 = 1...</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 强制类型转换，Go语言没有隐式类型转换</span></span><br><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int</span></span><br><span class="line"><span class="comment">// c = math.Sqrt(a * a + b * b)         // 返回平方根</span></span><br><span class="line">c = <span class="keyword">int</span>(math.Sqrt(<span class="keyword">float64</span>(a*a + b*b)))  <span class="comment">// 强制类型转换</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义变量，注意，变量名在前，类型在后</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">fmt.Println(a, s)            <span class="comment">// 打印Go语言变量的初值</span></span><br><span class="line">fmt.Printf(<span class="string">"%d, %q\n"</span>, a, s) <span class="comment">// quotation，字符串打印引号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableTypeDeduction</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 自动推断类型</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"abcd"</span></span><br><span class="line"><span class="keyword">var</span> a, b, c = <span class="number">1</span>, <span class="literal">true</span>, <span class="string">"hello"</span> <span class="comment">// 定义多个变量，即使不是同一类型</span></span><br><span class="line">fmt.Println(s, a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableShorter</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="literal">true</span>, <span class="string">"hello"</span>   <span class="comment">// 定义变量，不使用var关键字（在函数外面定义变量不可以简写）</span></span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableInit</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义变量并赋初值</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">4</span>, <span class="number">5</span> <span class="comment">// 同时定义多个变量，Go定义变量必须要被使用到</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"abc"</span></span><br><span class="line">fmt.Println(a, b, c, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    variable()              <span class="comment">// 定义变量</span></span><br><span class="line">    variableTypeDeduction() <span class="comment">// 自动推断类型</span></span><br><span class="line">variableShorter()       <span class="comment">// 自动推断类型 简写（函数外的包变量不可以简写）</span></span><br><span class="line">variableInit()          <span class="comment">// 定义变量并赋初值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>Go定义变量必须要被使用到，如不需要使用，使用下划线<code>_</code>接收</p><p><strong>补充：</strong>Go在调用函数的时候，如果需要省略包名，使用下点<code>.</code>接收</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL学习步骤分享</title>
      <link href="/2018/09/01/SQL%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4%E5%88%86%E4%BA%AB/"/>
      <url>/2018/09/01/SQL%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h1 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h1><p><strong>学习SQL基本语句、关系型数据库的基本知识</strong></p><p>推荐零基础入门者从此部分开始学习</p><p>推荐书籍：</p><ul><li>《关系数据库和SQL语言》或同类数据，每天两小时两天就可以看完</li></ul><p>学习建议：</p><ul><li>结合书本自己操作一遍</li></ul><a id="more"></a><h1 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h1><p><strong>学习ORACLE数据库和PL/SQL编程</strong></p><p>对数据库和SQL有了一定的了解之后，可以进入该阶段</p><p>推荐书籍：</p><ul><li>《Oracle PL/SQL从入门到精通》</li><li>《精通Oracle Database 12c SQL&amp;PL/SQL编程》</li></ul><p>学习建议：</p><ul><li>最好看书结合网络上的一些视频学习（也可以是带视频的书籍），这样会轻松很多，书本可作为以后的工具书使用</li><li>建议不要在本地数据库进行练习</li></ul><h1 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h1><p><strong>选择性的深入学习</strong></p><p>根据岗位和职业规划，选择深入学习的方向：</p><ul><li>数据库管理</li><li>SQL调优</li><li>大数据</li><li>数据库编程接口</li></ul>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL简述02——SQL基础知识</title>
      <link href="/2018/09/01/SQL%E7%AE%80%E8%BF%B002%E2%80%94%E2%80%94SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/09/01/SQL%E7%AE%80%E8%BF%B002%E2%80%94%E2%80%94SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h2><h3 id="（一）DDL数据定义语言"><a href="#（一）DDL数据定义语言" class="headerlink" title="（一）DDL数据定义语言"></a>（一）DDL数据定义语言</h3><p><strong>作用：</strong>用于检索或修改数据</p><p><strong>命令：</strong></p><ul><li>SELECT：用于检索数据</li><li>INSERT：用于添加数据到数据库</li><li>UPDATE：用于修改数据库数据</li><li>DELETE：用于删除数据库数据</li></ul><h3 id="（二）DML数据操作语言"><a href="#（二）DML数据操作语言" class="headerlink" title="（二）DML数据操作语言"></a>（二）DML数据操作语言</h3><p><strong>作用：</strong>用于定义数据结构，比如：创建、修改或删除数据库对象，包括：用于创建用户和重建数据库对象</p><p><strong>命令：</strong></p><ul><li>CREATE TABLE：创建表</li><li>ALTER TABLE：修改表</li><li>DROP TABLE：删除表</li><li>CREATE INDEX</li><li>DROP INDEX</li></ul><a id="more"></a><h3 id="（三）DCL数据控制语言"><a href="#（三）DCL数据控制语言" class="headerlink" title="（三）DCL数据控制语言"></a>（三）DCL数据控制语言</h3><p><strong>作用：</strong>用于定义用户权限</p><p><strong>命令：</strong></p><ul><li>ALTER PASSWORD</li><li>GRANT</li><li>REVOKE</li><li>CREATE SYNONYM</li></ul><h2 id="语句介绍"><a href="#语句介绍" class="headerlink" title="语句介绍"></a>语句介绍</h2><h3 id="（一）SELECT"><a href="#（一）SELECT" class="headerlink" title="（一）SELECT"></a>（一）SELECT</h3><p><strong>作用：</strong></p><p><code>SELECT</code>语句用于从数据库中选取数据</p><p><strong>语法：</strong></p><ol><li>SELECT 列名称 FROM 表名称</li><li>SELECT * FROM 表名称</li></ol><p><strong>补充：</strong></p><p>结果集：SELECT语句将取出的数据存储在一个结果表，也称结果集<code>result set</code></p><h3 id="（二）DISTINCT"><a href="#（二）DISTINCT" class="headerlink" title="（二）DISTINCT"></a>（二）DISTINCT</h3><p><strong>作用：</strong></p><p><code>DISTINCT</code>用于不重复的显示查询结果集，即重复数据只显示一次</p><p><strong>语法：</strong></p><p>SELECT DISTINCT 列名称 FROM 表名称</p><h3 id="（三）WHERE语句"><a href="#（三）WHERE语句" class="headerlink" title="（三）WHERE语句"></a>（三）WHERE语句</h3><p><strong>作用：</strong></p><p><code>WHERE</code>能有条件的从表中选取数据</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 列运算符值</p><p><strong>补充：</strong></p><p>列运算中的常见运算符：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于（注意只有一个等号）</td></tr><tr><td style="text-align:center">!= 或 &lt;&gt;</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">在某个范围内</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">模糊搜索</td></tr><tr><td style="text-align:center">AND</td><td style="text-align:center">并且</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:center">或者</td></tr><tr><td style="text-align:center">NOT</td><td style="text-align:center">取反</td></tr></tbody></table><p>引号的使用：</p><ul><li>数值类型无需加单引号</li><li>字符类型要加单引号</li><li>别名使用双引号</li><li>双引号还被用来将文本放入日期格式</li></ul><h3 id="（四）ORDER-BY语句"><a href="#（四）ORDER-BY语句" class="headerlink" title="（四）ORDER BY语句"></a>（四）ORDER BY语句</h3><p><strong>作用：</strong></p><p><code>ORDER BY</code>能给查询的结果集排序</p><p><strong>语法：</strong></p><ol><li>ORDER BY DESC</li><li>ORDER BY ASC</li></ol><p><strong>补充：</strong></p><ol><li>ORDER BY默认是升序排列（从小到大）</li><li>DESC代表降序排列</li><li>ASC代表升序排列</li><li>Oracle数据库中，null默认为最大值</li><li>指定NULLS FIRST，则表示null值的记录将排在最前(不管是asc，还是desc) </li><li>指定NULLS LAST，则表示null值的记录将排在最后(不管是asc，还是desc)</li></ol><h3 id="（五）INSERT语句"><a href="#（五）INSERT语句" class="headerlink" title="（五）INSERT语句"></a>（五）INSERT语句</h3><p><strong>作用：</strong></p><p><code>INSERT INTO</code>用于向表中插入数据</p><p><strong>语法：</strong></p><ol><li>INSERT INTO 表名称 VALUES (值1, 值2…)</li><li>INSERT INTO 表名称 (列1, 列2…) VALUES (值1, 值2…)</li></ol><h3 id="（六）UPDATE语句"><a href="#（六）UPDATE语句" class="headerlink" title="（六）UPDATE语句"></a>（六）UPDATE语句</h3><p><strong>作用：</strong></p><p><code>UPDATE</code>用于更新表中记录</p><p><strong>语法：</strong></p><p>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</p><h3 id="（七）DELETE语句"><a href="#（七）DELETE语句" class="headerlink" title="（七）DELETE语句"></a>（七）DELETE语句</h3><p><strong>作用：</strong></p><p><code>DELETE</code>用于删除表中的行</p><p><strong>语法：</strong></p><p>DELETE FROM 表名称 WHERE 列名称 = 某值</p><h2 id="进阶语句介绍"><a href="#进阶语句介绍" class="headerlink" title="进阶语句介绍"></a>进阶语句介绍</h2><h3 id="（一）SELECT-TOP语句"><a href="#（一）SELECT-TOP语句" class="headerlink" title="（一）SELECT TOP语句"></a>（一）SELECT TOP语句</h3><p><strong>作用：</strong></p><p><code>SELECT TOP</code>子句用于规定要返回的记录的数目，该子句对大型表来说非常有用</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称 WHERE ROWNUM &lt;= number</p><h3 id="（二）LIKE操作符"><a href="#（二）LIKE操作符" class="headerlink" title="（二）LIKE操作符"></a>（二）LIKE操作符</h3><p><strong>作用：</strong></p><p><code>LIKE</code>操作符用于在WHERE子句中搜索列中指定模式，加上通配符可以实现很多灵活的条件查询</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 列名称 LIKE 某值</p><p><strong>补充：</strong></p><p>通配符：</p><ul><li><code>%</code>代表一个或多个字符</li><li><code>_</code>代表一个字符</li></ul><h3 id="（三）IN操作符"><a href="#（三）IN操作符" class="headerlink" title="（三）IN操作符"></a>（三）IN操作符</h3><p><strong>作用：</strong></p><p><code>IN</code>操作符允许你在WHERE子句中规定多个值</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 列名称 IN (值1, 值2…)</p><h3 id="（四）BETWEEN…AND操作符"><a href="#（四）BETWEEN…AND操作符" class="headerlink" title="（四）BETWEEN…AND操作符"></a>（四）BETWEEN…AND操作符</h3><p><strong>作用：</strong></p><p><code>BETWEEN...AND</code>选取介于两个值之间的数据范围内的值，这些值可以是数据、文本或日期</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 列名称 BETWEEN 值1 AND 值2</p><p><strong>补充：</strong></p><p>不同数据库对该字段的处理稍有不同，在Oracle数据库中，查找到的数据包含<code>AND</code>字符前后的两个边界数据</p><h3 id="（五）别名"><a href="#（五）别名" class="headerlink" title="（五）别名"></a>（五）别名</h3><p><strong>作用：</strong></p><p>为表名称或列名称指定别名，创建别名主要是为了更强的可读性</p><p><strong>语法：</strong></p><p>SELECT 列名称 别名 FROM 表名称</p><h3 id="（六）SQL连接"><a href="#（六）SQL连接" class="headerlink" title="（六）SQL连接"></a>（六）SQL连接</h3><p><strong>作用：</strong></p><p><code>SQL JOIN</code>用于把两个或多个表的行结合起来</p><p><strong>语法：</strong></p><p>Join的四种类型：</p><ul><li>JOIN，如果表中至少有一个匹配，则返回行</li><li>LEFT JOIN，即使右表没有匹配，也从左表返回所有行</li><li>RIGHT JOIN，即使左表没有匹配，也从右表返回所有行</li><li>FULL JOIN，只要其中一张表存在匹配，就返回行</li></ul><h3 id="（七）UNION操作符"><a href="#（七）UNION操作符" class="headerlink" title="（七）UNION操作符"></a>（七）UNION操作符</h3><p><strong>作用：</strong></p><p><code>SQL UNION</code>操作符合并两个或多个SELECT语句的结果，UNION内部的SELECT语句必须拥有相同数量的列，列必须拥有相似的数据类型</p><p>同时，每个SELECT语句的列的顺序必须相同</p><p><strong>语法：</strong></p><p>SELECT 列名称 FROM 表名称<br>UNION<br>SELECT 列名称 FROM 表名称</p><p><strong>补充：</strong></p><p>UNION默认选取不同的值，如果需要允许重复值，使用<code>UNION ALL</code></p><h2 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h2><h3 id="（一）分组函数"><a href="#（一）分组函数" class="headerlink" title="（一）分组函数"></a>（一）分组函数</h3><table><thead><tr><th style="text-align:center">常用函数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">AVG</td><td style="text-align:center">求平均值</td></tr><tr><td style="text-align:center">COUNT</td><td style="text-align:center">返回查询的行数</td></tr><tr><td style="text-align:center">MAX</td><td style="text-align:center">返回查询列的最大值</td></tr><tr><td style="text-align:center">MIN</td><td style="text-align:center">返回查询列的最小值</td></tr><tr><td style="text-align:center">SUM</td><td style="text-align:center">返回查询列的总和</td></tr></tbody></table><p>分组函数常结合<code>GROUP BY</code>使用</p><h3 id="（二）转换函数"><a href="#（二）转换函数" class="headerlink" title="（二）转换函数"></a>（二）转换函数</h3><table><thead><tr><th style="text-align:center">常用函数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">TO_DATE</td><td style="text-align:center">将字符串转换为日期</td></tr><tr><td style="text-align:center">TO_CHAR</td><td style="text-align:center">转换日期或数值为字符串</td></tr><tr><td style="text-align:center">TO_NUMBER</td><td style="text-align:center">转换字符串为数字</td></tr></tbody></table><p><strong>举例：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取系统当前时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">-- 日期格式化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> ATIME, to_char(<span class="keyword">sysdate</span>, <span class="string">'YYYYMMDDHH24MISS'</span>) STIME <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL简述01——什么是SQL</title>
      <link href="/2018/09/01/SQL%E7%AE%80%E8%BF%B001%E2%80%94%E2%80%94%E4%BB%80%E4%B9%88%E6%98%AFSQL/"/>
      <url>/2018/09/01/SQL%E7%AE%80%E8%BF%B001%E2%80%94%E2%80%94%E4%BB%80%E4%B9%88%E6%98%AFSQL/</url>
      <content type="html"><![CDATA[<p>本系列文章主要基于Oracle</p><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><ol><li>简单来说，数据库就是数据的集合</li><li>我们可以把数据库看成是一种有组织的机制；它能够<strong>存储信息</strong>，用户能够使用有效且高效的方式<strong>检索</strong>其中的信息</li><li>而关系型数据库就是建立在关系模型上的数据库，借助于集合代数等数学概念和方法来处理数据库中的常见数据，在关系型数据库管理系统（RDBMS）中的数据被存储在称为<strong>表</strong>的数据库对象中，表是相关数据项的集合，它由行和列组成</li></ol><p><strong>补充：</strong></p><h3 id="常见的关系型数据库"><a href="#常见的关系型数据库" class="headerlink" title="常见的关系型数据库"></a>常见的关系型数据库</h3><ul><li>MS SQL Server</li><li>IBM DB2</li><li>Oracle</li><li>MySQL</li><li>Microsoft Access</li></ul><a id="more"></a><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>MongoDB</li><li>Redis</li></ul><h3 id="手机应用的数据库"><a href="#手机应用的数据库" class="headerlink" title="手机应用的数据库"></a>手机应用的数据库</h3><ul><li>SQLite</li></ul><h3 id="大数据分布式数据库"><a href="#大数据分布式数据库" class="headerlink" title="大数据分布式数据库"></a>大数据分布式数据库</h3><ul><li>postgreSQL</li></ul><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><ul><li>结构化查询语言</li><li>关系型数据库标准语言</li><li>ANSI标准计算机语言</li></ul><p>虽然存在多个不同版本的SQL语言，但他们必须以<strong>相似的方式</strong>支持一些主要的命令（如：SELECT、UPDATE、DELETE、INSERT、WHERE等）</p><p><strong>补充：</strong>什么是PL/SQL</p><p>PL/SQL（过程化SQL语言）是Oracle对SQL语句的一个拓展，在普通SQL语句上加入了编程语言的特点，</p><p>所以PL/SQL可以把数据操作和查询语句组织在PL/SQL代码的过程性单元中，通过逻辑判断、循环等操作实现复杂的功能或计算</p><h2 id="SQL能做什么"><a href="#SQL能做什么" class="headerlink" title="SQL能做什么"></a>SQL能做什么</h2><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul><li>面向数据库执行查询</li><li>从数据库取回数据</li><li>在数据库中插入新的记录</li><li>更新数据库的数据</li><li>从数据库删除记录</li></ul><h3 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h3><ul><li>可以创建新数据库</li><li>可以在数据库中创建表</li><li>可以在数据库中创建存储过程</li><li>可以在数据库中创建视图</li></ul><h3 id="数据控制"><a href="#数据控制" class="headerlink" title="数据控制"></a>数据控制</h3><p>SQL可以设置表、存储过程、视图的权限</p><h3 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h3><p>可以在你的程序、网站的后台使用SQL</p><h2 id="SQL在工作中的场景"><a href="#SQL在工作中的场景" class="headerlink" title="SQL在工作中的场景"></a>SQL在工作中的场景</h2><h2 id="研发"><a href="#研发" class="headerlink" title="研发"></a>研发</h2><ol><li>编程中数据库操作模块（数据库接口技术、SQL增删改查）</li><li>需求的数据库配置修改（SQL增删改查）</li><li>系统割接中的数据迁移（PL/SQL编程）</li><li>数据库定时任务和辅助工具的开发 （PL/SQL编程）</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>数据库配置SQL脚本测试（SQL增删改查）</li><li>程序数据库操作模块的测试（数据库接口技术、SQL增删改查）</li><li>数据库对象操作的脚本测试（数据库对象操作）</li><li>编写测试工具（PL/SQL编程）</li></ol><h2 id="应用维护"><a href="#应用维护" class="headerlink" title="应用维护"></a>应用维护</h2><ol><li>上线或需求执行数据库脚本（SQL增删改查）</li><li>日常运维任务（SQL增删改查）</li><li>程序数据库操作模块维护（数据库接口技术、SQL增删改查）</li><li>批量数据分析（SQL高级查询、数据分析技术）</li><li>编写数据批量修改脚本（PL/SQL编程：特别是游标的使用、数据库对象操作、SQL调优技术）</li><li>通过编写存储过程和函数开发维护工具（PL/SQL编程）</li></ol><h2 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h2><ol><li>操作数据库对象脚本的编写和执行（数据库对象操作）</li><li>SQL脚本评审（PL/SQL编程、数据库对象操作、SQL调优技术）</li><li>日常数据清理和故障处理（PL/SQL编程、数据库对象操作、数据库管理技术）</li><li>通过编写存储过程和函数开发维护工具（PL/SQL编程、数据库对象操作、数据库管理技术）</li></ol>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设置VsCode自动换行</title>
      <link href="/2018/09/01/%E8%AE%BE%E7%BD%AEVsCode%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/"/>
      <url>/2018/09/01/%E8%AE%BE%E7%BD%AEVsCode%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>我们会发现，Visual Studio Code是默认不会自动换行的</p><p>那么如何设置它按照我们的可视区域自动折行呢？</p><p>方法如下：</p><a id="more"></a><p>文件  -&gt; 首选项 -&gt; 设置</p><p>如果你是Mac则是右上角</p><p>Code -&gt; 首选项 -&gt; 设置</p><p>然后在右侧的编辑窗口中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.wordWrap&quot;: &quot;on&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> 工具 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python命令行工具——iPython安装与使用</title>
      <link href="/2018/08/23/Python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94iPython%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/23/Python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94iPython%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、安装iPython"><a href="#一、安装iPython" class="headerlink" title="一、安装iPython"></a>一、安装iPython</h3><p>通过<code>pip install ipython</code>的方式来安装ipython插件</p><p>如果你使用的是Mac电脑并安装了Python3，那么你也许需要输入<code>pip3 install ipython</code></p><p>如果执行报错，找不到<code>pip</code>命令，可以通过命令行前往python安装路径下的Scripts目录，然后执行以上命令</p><a id="more"></a><h3 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h3><p>在命令行输入<code>ipython</code>进入交互界面</p><p>清屏：输入<code>clear</code></p><p>退出：输入<code>exit()</code></p><h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><ul><li>使用<code>help(name)</code>函数调用python的帮助功能</li><li>使用<code>?</code>查看ipython工具的概要介绍</li><li>使用<code>obj?</code>调用ipython的帮助功能</li><li>使用<code>obj??</code>调用ipython更详细的帮助功能</li></ul><h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><p>在ipython中，<code>_</code>变量具有特殊含义，指代上一次执行的表达式的结果</p><p>类似还有：</p><ul><li><code>__</code>表示倒数第二次执行的表达式的结果</li><li><code>___</code>表示倒数第三次执行的表达式的结果</li><li><code>_dh</code>表示目录历史</li><li><code>_oh</code>表示输出历史</li></ul><h4 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h4><p>在ipython中可以直接使用系统的shell命令，使用<code>!command</code>使用或直接使用<code>command</code>（无叹号调用的不是shell）</p><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><p>%magic</p><p>%alias定义一个系统命令的别名</p><p>%timeit statement（-n 一个循环loop执行语句多少次；-r 循环执行多少次loop，取最好结果）</p><p>%timeit setup_code</p><p>%cd、%ls、%pwd等都是ipython内部实现的魔术方法，与操作系统无关</p><h3 id="三、安装自动补全"><a href="#三、安装自动补全" class="headerlink" title="三、安装自动补全"></a>三、安装自动补全</h3><p>请继续执行命令<code>pip install pyreadline</code>或<code>pip3 install pyreadline</code></p><p>按<code>tab</code>即可自动补全</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习19——IO操作</title>
      <link href="/2018/08/22/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A019%E2%80%94%E2%80%94IO%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/22/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A019%E2%80%94%E2%80%94IO%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>先给出一个示范程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"test.py"</span>, <span class="string">"w"</span>)</span><br><span class="line">f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong><code>close()</code>操作关闭文件是非常必要的，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</p></blockquote><p>这里介绍打开文件常用的几种访问模式</p><a id="more"></a><table><thead><tr><th style="text-align:center">访问模式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">以只读的方式打开文件，文件的指针将会放在文件的开头，这是默认的模式（文件必须存在）</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件只用于写入，如果该文件已经存在则<strong>将其覆盖</strong>；如果该文件不存在，创建新的文件</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于<strong>追加</strong>，如果该文件已存在，文件指针将放在该文件的结尾；如果不存在，创建新文件以供写入</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于读写，文件的指针放在文件的开头，这是默认模式（文件必须存在）</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件用于写入，如果文件已存在则<strong>将其覆盖</strong>；如果文件不存在，创建新文件以供写入</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于<strong>追加</strong>，如果文件已存在，文件指针将放在文件的结尾；如果文件不存在，创建新文件以供写入</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读写，文件指针将放在文件开头</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读写，如果文件已存在，则<strong>将其覆盖</strong>；如果不存在，创建新文件以供读写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读写，如果该文件已存在，文件指针将放在文件结尾；文件打开时会是追加模式；如果文件不存在，创建新文件以供读写</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读写，文件指针将放在开头</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读写，如果该文件已存在则<strong>将其覆盖</strong>；如果不存在，创建新文件以供读写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加，如果该文件已存在，文件指针将放在文件结尾，如果该文件不存在，创建新文件以供读写</td></tr></tbody></table><h3 id="读写（初见）"><a href="#读写（初见）" class="headerlink" title="读写（初见）"></a>读写（初见）</h3><p><strong>读</strong></p><p>如果直接使用<code>read()</code>，将一次性读取文本中所有内容；</p><p>如果使用<code>read(n)</code>，将会一次性读取n个字节，下一次读取将从此处继续</p><p><code>readline()</code>方法可以一行一行地读取文件内容</p><p><code>readlines()</code>方法依旧是一行一行读取，不过会一次性读取完，并将每一行存在列表当中作为一个元素</p><p><strong>写</strong></p><p>使用<code>write()</code>方法写入数据到文件</p><blockquote><p><strong>提示：</strong>当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入，只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了</p></blockquote><h3 id="小练习：复制文件"><a href="#小练习：复制文件" class="headerlink" title="小练习：复制文件"></a>小练习：复制文件</h3><p>让我们用以上知识，先实现一个简单的文件复制功能吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、获取源文件名</span></span><br><span class="line">old_name = <span class="string">"/Users/sherlockgy/Desktop/1.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、计算新文件名</span></span><br><span class="line">position = old_name.rfind(<span class="string">"."</span>)</span><br><span class="line">new_name = old_name[:position] + <span class="string">"[复件]"</span> + old_name[position:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、缓存读取的文件内容</span></span><br><span class="line">file_read = open(old_name, <span class="string">"r"</span>)</span><br><span class="line">file_content = file_read.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、写入新文件</span></span><br><span class="line">file_write = open(new_name, <span class="string">"w"</span>)</span><br><span class="line">file_write.write(file_content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"复制完成！"</span>)</span><br></pre></td></tr></table></figure><h3 id="大文件读取的处理"><a href="#大文件读取的处理" class="headerlink" title="大文件读取的处理"></a>大文件读取的处理</h3><p>如果我们需要读取的文件非常庞大，庞大到超过我们的内存大小，那么我们无论如何都不能使用以上的<code>read()</code>方法去读取文件内容</p><p>那么我们是否可以使用<code>readline()</code>方法去读取呢？我们这里是不建议的，原因如下：有些文件是经过压缩的，整个文件没有换行符和空白符，那么如果使用的是<code>readline()</code>依然会出现“挤爆内存”的情形</p><p>那么我们要怎么做呢？我们可以<strong>指定每一次读取的字节数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    content = old_file.read(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_file.write(content)</span><br></pre></td></tr></table></figure><h3 id="文件的定位读写"><a href="#文件的定位读写" class="headerlink" title="文件的定位读写"></a>文件的定位读写</h3><p>现有一个txt文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123456789</span><br><span class="line">abcdefg</span><br></pre></td></tr></table></figure><p>现在我们执行以下程序，该程序使用了<code>seek()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"/Users/sherlockgy/Desktop/1.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">f.seek(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">print(f.read(<span class="number">1</span>))</span><br><span class="line">print(f.read(<span class="number">1</span>))</span><br><span class="line">print(f.read(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>seek（offset [,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数（偏移量）。From变量指定开始移动字节的参考位置。</p><p>如果from被设为0，这意味着将文件的<strong>开头</strong>作为移动字节的参考位置。如果设为1，则使用<strong>当前</strong>的位置作为参考位置。如果它被设为2，那么该文件的<strong>末尾</strong>将作为参考位置。</p><p>我们可以使用<code>tell()</code>方法查找当前文件指针的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"/Users/sherlockgy/Desktop/1.txt"</span>, <span class="string">"rb"</span>)</span><br><span class="line">print(<span class="string">"初始指针："</span> + str(f.tell()))</span><br><span class="line">f.seek(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">"偏移后指针："</span> + str(f.tell()))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始指针：0</span><br><span class="line">偏移后指针：2</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>在文本文件中，没有使用b模式选项打开的文件，只允许从文件头开始计算相对位置，从文件尾计算时就会引发异常【can’t do nonzero end-relative seeks】</p></blockquote><h3 id="文件的常见操作"><a href="#文件的常见操作" class="headerlink" title="文件的常见操作"></a>文件的常见操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">os.rename(<span class="string">"xxx.txt"</span>, <span class="string">"yyy.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">os.remove(<span class="string">"yyy.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">os.mkdir(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹</span></span><br><span class="line">os.rmdir(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件操作路径</span></span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变默认目录</span></span><br><span class="line">os.chdir(<span class="string">"../"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录列表（重要）</span></span><br><span class="line"><span class="comment"># 该方法获取的不包括文件路径，仅文件名</span></span><br><span class="line">os.listdir(<span class="string">"./"</span>)</span><br></pre></td></tr></table></figure><h3 id="小练习：批量重命名"><a href="#小练习：批量重命名" class="headerlink" title="小练习：批量重命名"></a>小练习：批量重命名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入需要重命名的文件所在路径</span></span><br><span class="line">source = <span class="string">"/Users/sherlockgy/Desktop/123"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要加上的前缀</span></span><br><span class="line">before = <span class="string">"[测试]"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一个文件获得文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter_file</span><span class="params">(file_source)</span>:</span></span><br><span class="line">    <span class="string">"""迭代文件列表"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到目录下所有文件的名称</span></span><br><span class="line">    file_list = os.listdir(file_source)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="comment"># 判断是否是一个文件</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_source + <span class="string">"/"</span> + file_name):</span><br><span class="line">            old_name = file_source + <span class="string">"/"</span> + file_name</span><br><span class="line">            new_name = file_source + <span class="string">"/"</span> + before + file_name</span><br><span class="line">            os.rename(old_name, new_name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_source = file_source + <span class="string">"/"</span> + file_name</span><br><span class="line">            iter_file(new_source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iter_file(source)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> IO </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scala入门03——Scala函数</title>
      <link href="/2018/08/19/Scala%E5%85%A5%E9%97%A803%E2%80%94%E2%80%94Scala%E5%87%BD%E6%95%B0/"/>
      <url>/2018/08/19/Scala%E5%85%A5%E9%97%A803%E2%80%94%E2%80%94Scala%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>在上一章当中，我们定义函数的方法是适用于无参的函数的，接下来，我们一起来学习函数声明的完整方法</p><h3 id="基本函数声明"><a href="#基本函数声明" class="headerlink" title="基本函数声明"></a>基本函数声明</h3><p>上一章的声明方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> x = <span class="number">1</span></span><br><span class="line">x: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> y = <span class="number">2</span></span><br><span class="line">y: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span> </span>= x + y</span><br><span class="line">sum: <span class="type">Int</span></span><br></pre></td></tr></table></figure><p>完整的函数声明方法：</p><a id="more"></a><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">     |   x + y</span><br><span class="line">     | &#125;</span><br><span class="line">sum: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>右括号右边的<code>: Int</code>代表本函数的返回值类型，<code>=</code>代表这是一个有返回值的函数，如果<code>: Int=</code>省略，等于<code>: Unit=</code>，即返回<code>()</code></p></blockquote><p>我们可以让Scala自动推断返回值类型，即可以这样书写：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>) = &#123;</span><br><span class="line">     |   x + y</span><br><span class="line">     | &#125;</span><br><span class="line">sum: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>不过要记得，<code>=</code>一般不能省略，否则等于返回值为<code>()</code></p></blockquote><h3 id="if的使用"><a href="#if的使用" class="headerlink" title="if的使用"></a>if的使用</h3><p>我们也可以尝试实现一下<code>if</code>语句，这是最基本的程序流程控制语句</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">     |   <span class="keyword">if</span> (x &gt; y)&#123;</span><br><span class="line">     |     <span class="keyword">return</span> x</span><br><span class="line">     |   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     |     <span class="keyword">return</span> y</span><br><span class="line">     |   &#125;</span><br><span class="line">     | &#125;</span><br><span class="line">max: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></span><br></pre></td></tr></table></figure><p>以上程序无比的完整，但是他太繁琐了，我们可以尝试这样去书写它：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>) = <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</span><br><span class="line">max: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></span><br></pre></td></tr></table></figure><p>我们可以把如上函数看做Java语言当中的<code>三元表达式</code>或者称为<code>三目运算</code></p><blockquote><p><strong>补充：</strong>必须要告诉大家的是，Scala会返回程序执行中函数最后一行的值，而无需使用return</p></blockquote><h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><h4 id="（1）函数的默认值"><a href="#（1）函数的默认值" class="headerlink" title="（1）函数的默认值"></a>（1）函数的默认值</h4><p>函数的参数可以拥有自己的默认值，如果调用者没有传递相应的参数，则使用默认值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayMyName</span></span>(name : <span class="type">String</span> = <span class="string">"Marry"</span>) = &#123;</span><br><span class="line">  println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  sayMyName()</span><br><span class="line">  sayMyName(<span class="string">"Jack"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>Scala建议的缩进是两个空格</p></blockquote><h4 id="（2）可变长函数"><a href="#（2）可变长函数" class="headerlink" title="（2）可变长函数"></a>（2）可变长函数</h4><p>当不确定函数需要接受几个参数的时候，使用可变长函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printElement</span></span>(x : <span class="type">Int</span>*) = &#123;</span><br><span class="line">  <span class="keyword">for</span> (element &lt;- x)&#123;</span><br><span class="line">    println(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  printElement(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）调用函数的函数"><a href="#（3）调用函数的函数" class="headerlink" title="（3）调用函数的函数"></a>（3）调用函数的函数</h4><p>我们先有这样一个函数，用于计算两个数的和</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>) = x + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(add(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上函数的执行结果显然是：5</p><p>如果我们能够确定其中一个函数的参数，那么我们的函数2可以这样书写</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>) = x + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span> </span>= add(_ : <span class="type">Int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(add2(<span class="number">8</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上函数，<code>_</code>代表通配符，意为任意一个Int类型的参数，<code>2</code>代表固定的参数</p><p><code>add2()</code>的书写方法为该方式的简写：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span></span>(x : <span class="type">Int</span>) = add(x, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="（4）函数递归"><a href="#（4）函数递归" class="headerlink" title="（4）函数递归"></a>（4）函数递归</h4><p>例：计算5的阶乘</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span> </span>(x : <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="number">1</span> <span class="keyword">else</span> fac(x - <span class="number">1</span>) * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(fac(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）柯里化函数"><a href="#（5）柯里化函数" class="headerlink" title="（5）柯里化函数"></a>（5）柯里化函数</h4><p>柯里化函数是一种特殊的书写方式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulitply</span></span>(x : <span class="type">Int</span>)(y : <span class="type">Int</span>) = x * y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(mulitply(<span class="number">2</span>)(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数互相调用（柯里化函数中通配符的使用）：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulitply</span></span>(x : <span class="type">Int</span>)(y : <span class="type">Int</span>) = x * y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulitply2</span> </span>= mulitply(<span class="number">3</span>)_</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(mulitply2(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（6）匿名函数"><a href="#（6）匿名函数" class="headerlink" title="（6）匿名函数"></a>（6）匿名函数</h4><p>在Scala中声明一个匿名函数，方法如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> t = () =&gt; <span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(t())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将匿名函数作为参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> t = () =&gt; <span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testFunc</span></span>(c : () =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">  println(c())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  testFunc(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>上述函数，若<code>println()</code>函数内传递的是<code>c</code>,而不是<code>c()</code>，将打印其内存地址；<code>c()</code>为调用该函数</p></blockquote><p><code>() =&gt; Int</code>为匿名函数的类型：即无参、返回类型为<code>Int</code></p><p>举例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testF1</span></span>(callback: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">  callback(<span class="number">123</span>, <span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> addFunc = (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;x + y&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(testF1(addFunc))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（7）嵌套函数"><a href="#（7）嵌套函数" class="headerlink" title="（7）嵌套函数"></a>（7）嵌套函数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funOut</span></span>(x: <span class="type">Int</span>, y:<span class="type">Int</span>, z: <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">funInner</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = &#123;</span><br><span class="line">    x + y</span><br><span class="line">  &#125;</span><br><span class="line">  funInner(funInner(x, y), z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(funOut(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小测验：能否看懂"><a href="#小测验：能否看懂" class="headerlink" title="小测验：能否看懂"></a>小测验：能否看懂</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>): (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sumF</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> f(a) + sumF(a + <span class="number">1</span>, b)</span><br><span class="line">  &#125;</span><br><span class="line">  sumF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> f = (x: <span class="type">Int</span>) =&gt; x</span><br><span class="line">  <span class="keyword">val</span> sumF = sum(f)</span><br><span class="line">  println(sumF(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>本题意为：</p><ul><li><p>sum()函数，入参f，类型为匿名函数：入参Int；出参Int</p></li><li><p>sum()函数，出参为匿名函数：入参Int，Int；出参Int</p></li><li><p>sumF()函数为sum()函数的嵌套函数，入参a，b皆为Int；出参为Int</p></li><li><p>sumF()函数体：如果a &gt; b，则返回0；否则返回f匿名函数（传入a）和递归调用sumF()函数（传入a + 1，b）的和</p></li></ul><p>main方法测试：</p><p>给sum()函数传递一个符合要求的匿名函数即可得到一个sumF()函数</p><p>给sumF()函数传值</p><p>1 + sumF(2, 2)<br>   |<br>   |<br>1 + 2 + sumF(3, 2)<br>   |<br>   |<br>1 + 2 + 0</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Scala </category>
          
          <category> Scala入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scala入门02——Scala数据类型</title>
      <link href="/2018/08/19/Scala%E5%85%A5%E9%97%A802%E2%80%94%E2%80%94Scala%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/08/19/Scala%E5%85%A5%E9%97%A802%E2%80%94%E2%80%94Scala%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="Scala数据类型"><a href="#Scala数据类型" class="headerlink" title="Scala数据类型"></a>Scala数据类型</h3><p>Scala的数据类型基本与Java一致，并且没有基本数据类型，而是直接使用其包装类型，因此，Scala和Java内存类型布局一致，精度一致</p><p>在scala是可以对数字等基础类型调用方法的</p><p>因此，Scala和Java内存类型布局一致，精度一致</p><a id="more"></a><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Byte</td><td style="text-align:center">8bit（1字节）有符号数字，范围在-128 到 127</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">16bit（2字节）有符号数字，范围在-32768 到 32767</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">32bit（4字节）有符号数字，范围在-2147483648 到 2147483647</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">64bit（8字节）有符号数字，范围在-9223372036854775808 到 9223372036854775807</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">32bit（4字节），IEEE 754标准的单精度浮点数</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">64bit（4字节），IEEE 754标准的双精度浮点数</td></tr><tr><td style="text-align:center">Char</td><td style="text-align:center">16bit Unicode字符，范围在U+0000 到 U+FFFF</td></tr><tr><td style="text-align:center">String</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">布尔类型</td></tr><tr><td style="text-align:center">Unit</td><td style="text-align:center">表示无值，和Java中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()</td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center">空值或空引用，唯一实例是null，AnyRef的子类</td></tr><tr><td style="text-align:center">Nothing</td><td style="text-align:center">Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型，表示没有值，没有实例</td></tr><tr><td style="text-align:center">Option</td><td style="text-align:center">表示可能存在（Some），可能不存在（None）的值</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">Option的两个子类之一，用于安全的函数返回值，比Null安全</td></tr><tr><td style="text-align:center">Some</td><td style="text-align:center">Option的两个子类之一，表示包装了值</td></tr><tr><td style="text-align:center">Any</td><td style="text-align:center">所有其他类的超类</td></tr><tr><td style="text-align:center">AnyRef</td><td style="text-align:center">所有引用类(reference class)的超类</td></tr><tr><td style="text-align:center">AnyVal</td><td style="text-align:center">所有值类型的超类</td></tr><tr><td style="text-align:center">Nil</td><td style="text-align:center">长度为0的List</td></tr></tbody></table><h3 id="Scala字符串"><a href="#Scala字符串" class="headerlink" title="Scala字符串"></a>Scala字符串</h3><h4 id="定义多行字符串"><a href="#定义多行字符串" class="headerlink" title="定义多行字符串"></a>定义多行字符串</h4><p>在Scala中，单行字符串的定义方式和Java中完全相同，不过，Scala还拥有类似于Python的<code>多行字符串</code>定义方式，用<code>三双引号</code>表示即可</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> str = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    | hello</span></span><br><span class="line"><span class="string">    | world</span></span><br><span class="line"><span class="string">    | "</span><span class="string">""</span></span><br><span class="line">str: <span class="type">String</span> = </span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">"</span></span><br></pre></td></tr></table></figure><h4 id="s字符串"><a href="#s字符串" class="headerlink" title="s字符串"></a>s字符串</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> name = <span class="string">"Tom"</span></span><br><span class="line">name: <span class="type">String</span> = <span class="type">Tom</span></span><br><span class="line"></span><br><span class="line">scala&gt; println(<span class="string">s"my name is <span class="subst">$name</span>"</span>)</span><br><span class="line">my name is <span class="type">Tom</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> name = <span class="string">"Tom"</span></span><br><span class="line">name: <span class="type">String</span> = <span class="type">Tom</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> age = <span class="number">10</span></span><br><span class="line">age: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; println(<span class="string">s"两年后，<span class="subst">$&#123;name&#125;</span>就<span class="subst">$&#123;age + 2&#125;</span>岁啦"</span>)</span><br><span class="line">两年后，<span class="type">Tom</span>就<span class="number">12</span>岁啦</span><br></pre></td></tr></table></figure><h4 id="raw字符串"><a href="#raw字符串" class="headerlink" title="raw字符串"></a>raw字符串</h4><p>raw字符串可以使<code>\n</code>这些转义字符被作为普通字符串</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; println(<span class="string">raw"\nhello"</span>)</span><br><span class="line">\nhello</span><br></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量分<code>val</code>和<code>var</code>两种关键字：<code>val</code>关键字声明的是常量，一旦声明不能修改；<code>var</code>关键字声明的是变量</p><p>在Scala当中，鼓励尽量使用<code>val</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">"Tom"</span></span><br><span class="line"><span class="keyword">val</span> age = <span class="number">20</span> <span class="comment">// 类型推断</span></span><br></pre></td></tr></table></figure><h3 id="定义函数（初探）"><a href="#定义函数（初探）" class="headerlink" title="定义函数（初探）"></a>定义函数（初探）</h3><p>在Scala当中定义函数使用<code>def</code>关键字，定义函数并不会直接计算出其结果，而需要等待调用的那一刻</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> v1 = <span class="number">1</span></span><br><span class="line">v1: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> v2 = <span class="number">3</span></span><br><span class="line">v2: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">v3</span> </span>= v1 + v2</span><br><span class="line">v3: <span class="type">Int</span></span><br></pre></td></tr></table></figure><p>定义函数也可以使用如下写法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">v4</span></span>() = v1 + v2</span><br><span class="line">v4: ()<span class="type">Int</span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><p>在Scala当中，如果函数没有参数，则可以不用书写<code>()</code>，在调用时，也是直接书写函数名即可</p><h3 id="调用函数（初探）"><a href="#调用函数（初探）" class="headerlink" title="调用函数（初探）"></a>调用函数（初探）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; v3</span><br><span class="line">res13: <span class="type">Int</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; v4()</span><br><span class="line">res15: <span class="type">Int</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Scala </category>
          
          <category> Scala入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scala入门01——安装Scala（Mac）</title>
      <link href="/2018/08/09/Scala%E5%85%A5%E9%97%A801%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Scala%EF%BC%88Mac%EF%BC%89/"/>
      <url>/2018/08/09/Scala%E5%85%A5%E9%97%A801%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Scala%EF%BC%88Mac%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本篇介绍如何在MacOS上安装Scala</p><p>Scala是运行在JVM上的函数式编程语言，所以要在Mac上安装Scala，先要保证安装了JDK</p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>安装JDK只需要登录Oracle官网下载即可，不赘述</p><p>然后在命令行分别执行以下命令，测试Java是否已经安装完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure><h2 id="使用brew安装Scala"><a href="#使用brew安装Scala" class="headerlink" title="使用brew安装Scala"></a>使用brew安装Scala</h2><p>然后使用<code>brew</code>安装Scala：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install scala</span><br></pre></td></tr></table></figure><h2 id="如何安装brew"><a href="#如何安装brew" class="headerlink" title="如何安装brew"></a>如何安装brew</h2><p>当然，也许你还没安装<code>brew</code>，brew是Mac上安装软件的神器，安装brew也是很简单的</p><p>这里给出几个安装brew的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>不管使用以上哪一种，只要能安装brew就行</p><p>下面执行命令更新一下brew即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h2 id="其他方式安装Scala"><a href="#其他方式安装Scala" class="headerlink" title="其他方式安装Scala"></a>其他方式安装Scala</h2><p>当然直接在搜索引擎搜索Scala，进入其官网下载二进制文件也是可以的，这样的方法同样适用于Windows平台，只不过需要手动配置环境变量</p><p>官网下载地址：<a href="https://www.scala-lang.org/download/" target="_blank" rel="noopener">https://www.scala-lang.org/download/</a></p><p>解压缩文件包，可将其移动至/usr/local/share下</p><p>修改环境变量，修改配置文件profile:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件的末尾加入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="$PATH:/usr/local/share/scala/bin"</span><br></pre></td></tr></table></figure><p>:wq!保存退出，<code>重启终端</code>，执行 scala 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scala</span></span><br><span class="line">Welcome to Scala 2.12.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_141).</span><br><span class="line">Type in expressions for evaluation. Or try :help.</span><br></pre></td></tr></table></figure><p>使用<code>:quit</code>命令退出Scala命令行</p><h2 id="安装sbt启动Scala"><a href="#安装sbt启动Scala" class="headerlink" title="安装sbt启动Scala"></a>安装sbt启动Scala</h2><p>sbt是Scala的构建工具，我们使用brew安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install sbt</span><br></pre></td></tr></table></figure><p>在命令行使用sbt打开Scala交互：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt console</span><br></pre></td></tr></table></figure><p>使用<code>:quit</code>命令退出Scala命令行</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Scala </category>
          
          <category> Scala入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式——工厂模式</title>
      <link href="/2018/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="工厂模式概念"><a href="#工厂模式概念" class="headerlink" title="工厂模式概念"></a>工厂模式概念</h2><p>实例化对象，用工厂方法来代替<code>new</code>操作</p><p>工厂模式包括简单工厂模式、工厂方法模式、抽象工厂模式</p><p>抽象工厂模式是工厂方法模式的拓展</p><h2 id="工厂模式的意图"><a href="#工厂模式的意图" class="headerlink" title="工厂模式的意图"></a>工厂模式的意图</h2><p>实现了创建者和调用者的分离</p><p>定义一个接口来创建对象，让子类决定哪些对象需要被实例化</p><p>工厂方法模式把实例化的工作推迟到子类去实现</p><h2 id="什么情况需要工厂模式"><a href="#什么情况需要工厂模式" class="headerlink" title="什么情况需要工厂模式"></a>什么情况需要工厂模式</h2><ul><li>有一组类似的对象需要被创建</li><li>在编码时不能预见需要创建哪种类的实例</li><li>系统需要考虑拓展性</li></ul><a id="more"></a><h2 id="工厂模式详细分类"><a href="#工厂模式详细分类" class="headerlink" title="工厂模式详细分类"></a>工厂模式详细分类</h2><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h2 id="遵循的面向对象设计原则（了解）"><a href="#遵循的面向对象设计原则（了解）" class="headerlink" title="遵循的面向对象设计原则（了解）"></a>遵循的面向对象设计原则（了解）</h2><ol><li>开闭原则：对拓展开发，对修改关闭。在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码</li><li>依赖倒转原则：针对接口而不是针对实现编程。该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代</li><li>迪米特法则：米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。只与朋友通信，避免和陌生人通信</li></ol><h2 id="没有工厂的情况"><a href="#没有工厂的情况" class="headerlink" title="没有工厂的情况"></a>没有工厂的情况</h2><p>接口：车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：宝马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BmwCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"宝马发动了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：比亚迪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BydCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"比亚迪发动了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car car1 = <span class="keyword">new</span> BmwCar();</span><br><span class="line">Car car2 = <span class="keyword">new</span> BydCar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>在没有工厂模式的情况下，<code>调用者</code>需要知道实现的<code>接口</code>，还需要知道其每一个<code>实现类</code>的实现方式</p><p>若上文演示的实现类都需要设置复杂的参数，那么对于调用者来说是违反<code>迪米特法则</code>的</p><h2 id="（一）简单工厂模式"><a href="#（一）简单工厂模式" class="headerlink" title="（一）简单工厂模式"></a>（一）简单工厂模式</h2><p>我们在其他类都保持原样的情况下，添加这样一个工厂如下：</p><p>简单工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String carName)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"比亚迪"</span>.equals(carName))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BydCar();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"宝马"</span>.equals(carName))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BmwCar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car car1 = SimpleFactory.getCar(<span class="string">"比亚迪"</span>);</span><br><span class="line">Car car2 = SimpleFactory.getCar(<span class="string">"宝马"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (car1 != <span class="keyword">null</span> &amp;&amp; car2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">car1.run();</span><br><span class="line">car2.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>在简单工厂方法当中，我们调用者已经不需要知道实现类被创造的细节，但是依然存在一个问题：</p><p>简单工厂是依赖<code>if</code>、<code>else</code>判断来决定创造哪一个实现类的对象的，那么如果我们需要增加新的实现类、删除原有实现类，都要频繁修改工厂类</p><p>这违反了上述的<code>开闭原则</code>，不过在业务不需要频繁变更的项目当中，已经可以使用了</p><h2 id="（二）工厂方法模式"><a href="#（二）工厂方法模式" class="headerlink" title="（二）工厂方法模式"></a>（二）工厂方法模式</h2><ul><li>为了避免简单工厂模式不遵守开闭原则的缺点</li><li>工厂方法模式和简单工厂模式的不同点在于：简单工厂模式往往只有一个工厂类，而工厂方法模式有一组实现了相同接口的工厂类</li></ul><p>在不改变没有使用工厂模式情况下的代码的前提下，我们创建这样的工厂方法：</p><p>首先，创建一个工厂的接口，用于规范一系列工厂的行为</p><p>工厂的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，我们创建各个种类对象的分工厂，这些分工厂统一实现工厂接口</p><p>分工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBmw</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BmwCar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryByd</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BydCar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些分工厂一样可以隐藏实现这些对象的细节，遵循<code>迪米特法则</code></p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car car1 = <span class="keyword">new</span> FactoryBmw().getCar();</span><br><span class="line">Car car2 = <span class="keyword">new</span> FactoryByd().getCar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (car1 != <span class="keyword">null</span> &amp;&amp; car2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">car1.run();</span><br><span class="line">car2.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>使用工厂方法模式，如果需要添加新的实现类，只需要创建新的分工厂实现工厂接口即可；如果需要删除实现类，只需要删除对应的分工厂即可</p><p>这样的设计完美实现了开闭原则的要求</p><h2 id="（三）抽象工厂模式"><a href="#（三）抽象工厂模式" class="headerlink" title="（三）抽象工厂模式"></a>（三）抽象工厂模式</h2><ul><li>用于生产不同产品族的全部产品（对于增加单个产品无能为力，支持增加一个产品族）</li><li>抽象工厂模式和工厂方法模式处理的是不同的场景。在存在多个业务分类时，可以使用此模式创造一整个族的产品</li></ul><p>由于抽象工厂模式的复杂性，我们这里使用全新的案例分析：</p><p><strong>产品族：</strong></p><p>汽车产品族1：低端轮胎、低端座椅、低端发动机</p><p>汽车产品族2：高端轮胎、高端座椅、高端发动机</p><blockquote><p>抽象工厂模式就是用于直接生成一个产品族内全部对象的工厂模式</p></blockquote><p>发动机模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发动机接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 豪华发动机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryEngine</span>() <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"极速快"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提速快"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低端发动机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowEngine</span>() <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"极速慢"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提速慢"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>座椅模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 座椅接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Seat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 豪华座椅</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxurySeat</span>() <span class="keyword">implements</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"按摩舒服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低端座椅</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowSeat</span>() <span class="keyword">implements</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"按摩不舒服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮胎模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮胎接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Tyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 豪华轮胎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryTyre</span>() <span class="keyword">implements</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"旋转磨损低"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低端轮胎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowTyre</span>() <span class="keyword">implements</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"旋转磨损高"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就要创建整合我们的产品族中每一个模块的整合对象：<code>Car</code>了，汽车工厂接口负责定义每一个汽车分工厂的规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createSeat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createTyre</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高端汽车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LuxuryEngine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LuxurySeat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LuxuryTyre();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低端汽车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LowEngine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LowSeat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LowTyre();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们需要一辆高档车</span></span><br><span class="line">        CarFactory factory = <span class="keyword">new</span> LuxuryCarFactory();</span><br><span class="line">        Engine engine = factory.createEngine();</span><br><span class="line">        Seat seat = factory.createSeat();</span><br><span class="line">        Tyre tyre = factory.createTyre();</span><br><span class="line">        engine.run();   <span class="comment">// 极速快</span></span><br><span class="line">        seat.massage(); <span class="comment">// 按摩舒服</span></span><br><span class="line">        tyre.revolve(); <span class="comment">// 旋转磨损低</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>按照上文演示的测试类，即可创造出一个<code>高端汽车产品族</code>所需的所有模块。如果我们需要一辆中档的汽车（混合高端引擎和低端座椅），那么我们仅需要创建一个<code>中档汽车工厂</code>，并实现汽车工厂接口，在其对应方法中创造出对应产品，即可创造一条新的产品族</p><p>在实际应用当中，如果我们的业务不需要创建一个庞大的产品族，抽象工厂模式很少用到</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式的应用场景：</p><ol><li>JDK中Calendar的getInstance()方法</li><li>JDBC中Connection对象的获取</li><li>Hibernate当中，使用SQLSessionFactory创建SQLSession</li><li>Spring中，IOC容器创建管理Bean对象</li><li>XML文件解析时，DocumentBuilderFactory创建解析器对象</li><li>反射中Class对象的newInstance()方法</li></ol>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习18——匿名函数的使用</title>
      <link href="/2018/08/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A018%E2%80%94%E2%80%94%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A018%E2%80%94%E2%80%94%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>我们先来复习一下列表的一些常用方法：</p><h2 id="列表排序（数字元素）"><a href="#列表排序（数字元素）" class="headerlink" title="列表排序（数字元素）"></a>列表排序（数字元素）</h2><p>默认：从小到大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">33</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(arr)</span><br><span class="line">[<span class="number">9</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">43</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>从大到小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">33</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr.sort(reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(arr)</span><br><span class="line">[<span class="number">43</span>, <span class="number">40</span>, <span class="number">33</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="列表倒序（数字元素）"><a href="#列表倒序（数字元素）" class="headerlink" title="列表倒序（数字元素）"></a>列表倒序（数字元素）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">33</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(arr)</span><br><span class="line">[<span class="number">40</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">33</span>]</span><br></pre></td></tr></table></figure><p>那么如果列表元素是不能直接自然排序的字典元素，要怎么办呢？</p><h2 id="列表排序（字典元素）"><a href="#列表排序（字典元素）" class="headerlink" title="列表排序（字典元素）"></a>列表排序（字典元素）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>infors = [&#123;<span class="string">"name"</span> : <span class="string">"LaoWang"</span>, <span class="string">"age"</span> : <span class="number">12</span>&#125;, &#123;<span class="string">"name"</span> : <span class="string">"BanZhang"</span>, <span class="string">"age"</span> : <span class="number">10</span>&#125;, &#123;<span class="string">"name"</span> : <span class="string">"ChuShi"</span>, <span class="string">"age"</span> : <span class="number">13</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>infors.sort(key = <span class="keyword">lambda</span> x:x[<span class="string">"name"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(infors)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'BanZhang'</span>, <span class="string">'age'</span>: <span class="number">10</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'ChuShi'</span>, <span class="string">'age'</span>: <span class="number">13</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'LaoWang'</span>, <span class="string">'age'</span>: <span class="number">12</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="将匿名函数作为实参"><a href="#将匿名函数作为实参" class="headerlink" title="将匿名函数作为实参"></a>将匿名函数作为实参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, func)</span>:</span></span><br><span class="line">···     <span class="keyword">return</span> func(a, b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(test(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">lambda</span> a, b : a + b))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="字符串作为lambda函数"><a href="#字符串作为lambda函数" class="headerlink" title="字符串作为lambda函数"></a>字符串作为lambda函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, func)</span>:</span></span><br><span class="line">···     <span class="keyword">return</span> func(a, b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = <span class="string">"lambda a, b : a * b"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = eval(func)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(test(<span class="number">1</span>, <span class="number">2</span>, func))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>以上函数，如果没有<code>eval()</code>函数，在<code>Python2</code>当中可以运行，但是在<code>Python3</code>当中，会报出如下错误：</p><blockquote><p>TypeError: ‘str’ object is not callable</p></blockquote><p>原因是，<code>Python3</code>不允许直接把字符串作为函数表达式运行。</p><p><code>eval()</code>函数：eval(expression, globals=None, locals=None)  </p><p>— 官方文档中的解释是，将字符串str当成有效的表达式来求值并返回计算结果。</p><p>globals和locals参数是可选的，如果提供了globals参数，那么它必须是dictionary类型；如果提供了locals参数，那么它可以是任意的map对象。</p><h2 id="eval-使用原因"><a href="#eval-使用原因" class="headerlink" title="eval()使用原因"></a>eval()使用原因</h2><p>1）在编译语言里要动态地产生代码，基本上是不可能的，但动态语言是可以。</p><p>意味着软件已经部署到服务器上了，但只要作很少的更改，只好直接修改这部分的代码，就可立即实现变化，不用整个软件重新加载。</p><p>2）在machin learning里根据用户使用这个软件频率，以及方式，可动态地修改代码，适应用户的变化。</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>读书笔记——MySQL必知必会</title>
      <link href="/2018/08/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2018/08/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      <content type="html"><![CDATA[<h3 id="MySQL基础命令"><a href="#MySQL基础命令" class="headerlink" title="MySQL基础命令"></a>MySQL基础命令</h3><ol><li>MySQL登录：mysql -u -p -h myserver -P 9999</li><li>获取帮助：mysql –help（help select）</li><li>退出程序：quit、exit</li><li>选择数据库：use 数据库名称</li><li>查看可用数据库：show databases</li><li>查看表：show tables</li><li>查看表的字段：show columns from 表名（快捷：describe 表名）</li><li>显示广泛的服务器状态信息：show status</li><li>显示创建数据库和表的语句：show create database、show create table</li><li>显示授予用户的安全权限：show grants</li><li>显示服务器错误或警告信息：show errors、show warnings</li></ol><a id="more"></a><h3 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h3><ol><li>简单搜索：select 字段名 from 表名</li><li>检索多个列：select 字段1，字段2，… from 表名</li><li>检索所有列：select * from 表名</li><li>检索并去除重复：select distinct 字段名 from 表名</li><li>分页查找（5行）：select 字段名 from 表名 limit 5（总是第一行开始）</li><li>分页查找（下一个5行）：select 字段名 from 表名 limit 5，5（开始行，行数）</li></ol><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><ol><li>排序：select * from 表名 order by 字段名（可用不在检索内的列）</li><li>多个列排序：select * from 表名 order by 字段1，字段2</li><li>降序排序：select * from 表名 order by 字段 desc（只针对该desc前的一个列有效）</li><li>找出最昂贵物品的值：select price from products order by price desc limit 1</li><li>字段顺序：order by 在from，where，group by，having后，limit在order by后</li></ol><h3 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h3><ol><li>基础搜索：select * from 表名 where 字段 = 条件</li><li>操作符：&lt;&gt;、!=(不等于)、between a and b（指定两个值之间，包头包尾）</li><li>空值检查：select * from 表名 where 列名 is null</li></ol><h3 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h3><ol><li>and操作符：select * from 表名 where 条件一 and 条件2</li><li>or操作符：select * from 表名 where 条件一 or 条件2</li><li>and 和 or 的优先级：and更高</li><li>in操作符：select * from 表名 where 字段名 in（1002，1003）order by 字段</li><li>in和or相比的优势：<ul><li>多个数值时，in比or直观</li><li>因为使用的操作符少，执行次序更容易管理</li><li>in执行速度更快</li><li>in可以包含其他where语句</li></ul></li><li>not操作符：select * from 表名 where 字段名 not in（1002，1003）order by 字段</li><li>not补充：MySQL的not支持：in、between和exists子句取反，不同于其他DBMS支持各种条件</li></ol><h3 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h3><ol><li><code>%</code>通配符：select * from 表名 where name like ‘jet%’（%代表：任意字符、任意次数）</li><li><code>%</code>通配符不能匹配null</li><li><code>_</code>通配符：select * from 表名 where name like <code>‘_jet’</code>（<code>_</code>代表：一个字符）</li><li>注意事项：<ul><li>尽量少使用通配符</li><li>尽量少放在搜索模式的开始处，因为这样效率最低</li></ul></li></ol><h3 id="用正则表达式进行搜索"><a href="#用正则表达式进行搜索" class="headerlink" title="用正则表达式进行搜索"></a>用正则表达式进行搜索</h3><ol><li>简单正则表达式：select * from 表名 where name REGEXP ‘1000’ order by name</li><li>匹配一个字符：select * from 表名 where name REGEXP ‘.000’ order by name</li><li>like与正则表达式区别：like没有通配符与列值相同并不会返回，正则表达式则会</li><li>正则表达式不区分大小写，除非：select * from 表名 where name REGEXP BINARY ‘.000’</li><li>or匹配：select * from 表名 where name REGEXP ‘1000|2000|3000’</li><li>匹配几个字符之一：select * from 表名 where name REGEXP ‘[123]Tom’</li><li>否定字符集合：select * from 表名 where name REGEXP ‘[^123]Tom’</li><li>简化字符集合：select * from 表名 where name REGEXP ‘[1-5]Tom’</li><li>匹配特殊字符（转义）：select * from 表名 where name REGEXP ‘\.’</li><li>\ \引用元字符：<ul><li>\ \f：换页</li><li>\ \n：换行</li><li>\ \r：回车</li><li>\ \t：制表</li><li>\ \v：纵向制表</li></ul></li><li>匹配字符类：<ul><li>[:alnum:] 任意字母数字（同[a-zA-Z0-9]）</li><li>[:alpha:] 任意字符（同[a-zA-Z]）</li><li>[:blank:] 空格和制表（同\ \t）</li><li>[:cntrl:] ASCII控制字符（ASCII 0到31和127）</li><li>[:digit:] 任意数字（同[0-9]）</li><li>[:graph:] 与[:print:]相同，不包括空格</li><li>[:lower:] 任意小写字母（同[a-z]）</li><li>[:print:] 任意可打印字符</li><li>[:punct:] 既不在[:alnum:]又不在[:cntrl:]内的字符</li><li>[:space:] 包括空格在内的任意空白字符（同\ \f\ \t\ \r\ \n\ \v）</li><li>[:upper:] 任意大写字母（同[A-Z]）</li><li>[:xdigit:] 任意十六进制数字（同a-fA-F0-9）</li></ul></li><li>重复元字符：<ul><li>&#42; ：0个或多个匹配</li><li><ul><li>：一个或多个匹配，等同于{1，}</li></ul></li><li>？：0个或一个匹配，等同于{0，1}</li><li>{n} ：指定数目匹配</li><li>{n，} ：不少于指定数目匹配</li><li>{n，m} ：匹配数目范围（m不超过255）</li></ul></li><li>定位符：<ul><li>^ ：文本开始</li><li>$ ：文本结束</li><li>[[:&lt;:]] ：词的开始</li><li>[[:&gt;:]] ：词的结束</li></ul></li><li>^ 的双重作用：（1）集合中，否定集合；（2）表示文本开始</li></ol><h3 id="创建计算字段（field）"><a href="#创建计算字段（field）" class="headerlink" title="创建计算字段（field）"></a>创建计算字段（field）</h3><ol><li>字段拼接：select Concat(name,’(‘,country,’)’) from vendors order by name</li><li>去除空格：select Concat(Trim(name),’(‘,Trim(country),’)’) from vendors</li><li>去除空格：（1）右空格：RTrim()（2）左空格：LTrim()（3）左右空格：Trim()</li><li>使用别名：select Concat(name,’(‘,country,’)’) AS title from vendors</li><li>省略from子句：select Trim(‘ABC’)</li></ol><h3 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h3><h4 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h4><ol><li>文本大写：select name,Upper(name) as name_upcase from vendors</li><li>常用的文本处理函数：<ul><li>Left() ： 返回串左边的字符</li><li>Length() ： 返回串的长度</li><li>Locate() ： 找出串的一个子串</li><li>Lower() ： 将串转换为小写</li><li>LTrim() ： 去除左空格</li><li>Right() ： 返回串右边字符</li><li>RTrim() ： 去除右空格</li><li>Soundex() ： 返回串的Soundex值（模拟发音）</li><li>SubString() ： 返回子串的字符</li><li>Upper() : 将串转换为大写</li></ul></li></ol><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ol><li>日期函数：select * from 表名 where Date(order_date) = ‘2015-1-10’（仅返回日期，过滤时间）</li><li>日期函数：select * from 表名 where Year(order&#95;date) = 2015 and Month(order_date) = 9</li><li>返回星期几：DayOfWeek()</li><li>返回当前日期：CurDate()</li><li>返回当前时间：CurTime()</li><li>计算日期差：DateDiff()</li></ol><h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h4><ol><li>绝对值 ：Abs()</li><li>余弦函数 ：Cos()</li><li>指数函数 ：Exp()</li><li>返回余数 ：Mod()</li><li>圆周率 ：Pi()</li><li>返回随机数 ：Rand()</li><li>正弦函数 ：Sin()</li><li>平方根 ：Sqrt()</li><li>正切 ：Tan()</li></ol><h3 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h3><h4 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h4><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th><th style="text-align:center">补充</th></tr></thead><tbody><tr><td style="text-align:center">AVG()</td><td style="text-align:center">返回某列的平均值</td><td style="text-align:center">忽略null值的行</td></tr><tr><td style="text-align:center">COUNT()</td><td style="text-align:center">返回某列的行数</td><td style="text-align:center">COUNT(*)：不忽略null<br>COUNT(列名)：忽略null</td></tr><tr><td style="text-align:center">MAX()</td><td style="text-align:center">返回某列最大值</td><td style="text-align:center">忽略null值的行</td></tr><tr><td style="text-align:center">MIN()</td><td style="text-align:center">返回某列最小值</td><td style="text-align:center">忽略null值的行</td></tr><tr><td style="text-align:center">SUM()</td><td style="text-align:center">返回某列值之和</td><td style="text-align:center">忽略null值的行</td></tr></tbody></table><ol><li>聚集不同值：select AVG(DISTINCT price) AS avg_price from products where id=1003</li><li>聚集不同值说明：MySQL 5及后期版本可用</li></ol><h3 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h3><ol><li>分组数据：select vend&#95;id，COUNT(*) AS num_prods from 表名 GROUP BY vend&#95;id</li><li>分组数据补充：聚集函数对每个分组聚集而不是整个结果集</li><li>GROUP BY子句规定：<ul><li>可以包含任意数目列（分组可以嵌套）</li><li>如果嵌套，数据将在最后的分组上汇总（不能从个别列取回数据)</li><li>该子句中所有列必须是检索列或有效表达式（不能是聚集函数），如果select子句中使用表达式，该子句需要使用相同表达式，不能使用别名</li><li>除聚集计算语句外，select语句每个列必须在GROUP BY子句中给出</li><li>若分组列具有null，null将作为一个分组返回；若列有多行null，将他们分为一组</li><li>GROUP BY必须在where后，order by前</li></ul></li><li>获得汇总级别值：select id,COUNT(*) AS num_prods from 表名 group by id WITH ROLLUP</li></ol><h4 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h4><pre><code>HAVING子句：    可以和WHERE子句一样使用    区别：        where过滤行，having过滤分组        where在分组前过滤，having在分组后过滤</code></pre><ol><li>过滤组内超过两项数据的行：select id,COUNT(&#42;) from 表名 group by id having COUNT(*) &gt; 2</li></ol><h4 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h4><table><thead><tr><th style="text-align:center">ORDER BY</th><th style="text-align:center">GROUP BY</th></tr></thead><tbody><tr><td style="text-align:center">排序产生的输出<br>任意列都可以使用（甚至非选择的列）<br>不一定需要</td><td style="text-align:center">分组行，但输出可能不是分组的顺序<br>只能使用选择列或表达式列，而且必须使用每个列表达式<br>如果与聚集函数一起使用列，则必须使用</td></tr></tbody></table><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 子查询从内向外处理</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders </span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="keyword">select</span> order_num </span><br><span class="line">                    <span class="keyword">from</span> orderitems </span><br><span class="line">                    <span class="keyword">where</span> prod_id = <span class="string">'TNT2'</span>)</span><br></pre></td></tr></table></figure><h3 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建联结，无连接条件（笛卡尔积）</span></span><br><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">from</span> vendors,products</span><br><span class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name</span><br></pre></td></tr></table></figure><h4 id="内联接"><a href="#内联接" class="headerlink" title="内联接"></a>内联接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 内联接</span></span><br><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">from</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name</span><br></pre></td></tr></table></figure><h3 id="创建高级联接"><a href="#创建高级联接" class="headerlink" title="创建高级联接"></a>创建高级联接</h3><h4 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">AS</span> c,orders <span class="keyword">AS</span> o,orderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">where</span> c.cust_id = o.cust_id</span><br><span class="line">    <span class="keyword">and</span> oi.order_num = o.order_num</span><br><span class="line">    <span class="keyword">and</span> prod_id = <span class="string">'TNT2'</span></span><br></pre></td></tr></table></figure><p>表别名只在查询中使用。与列别名不同，表别名不会返回客户机</p><h4 id="使用不同类型的联接"><a href="#使用不同类型的联接" class="headerlink" title="使用不同类型的联接"></a>使用不同类型的联接</h4><p><strong>自联接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p1.prod_id,p1_prod_name </span><br><span class="line"><span class="keyword">from</span> products <span class="keyword">AS</span> p1,products <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">where</span> p1.vend_id = p2.vend_id</span><br><span class="line">    <span class="keyword">and</span> p2.prod_id = <span class="string">'DTNTR'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式小练习01</title>
      <link href="/2018/08/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B0%8F%E7%BB%83%E4%B9%A001/"/>
      <url>/2018/08/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B0%8F%E7%BB%83%E4%B9%A001/</url>
      <content type="html"><![CDATA[<p>练习：</p><p>正则表达式优化字符串</p><p>解释：</p><ul><li>String类下匹配正则表达式替换的方法为replaceAll()</li><li>第一步，去除点。点本身是正则的通配符，所以需要转义。</li><li>第二步，去除叠词。点匹配任意词，以小括号包围编组，将1转义过后，<code>\\1</code> 代表引用第一组匹配内容，即是叠词匹配。<code>+</code> 代表第一组内容出现一次或多次。</li><li>不同字符串中，引用组采用 <code>$1</code></li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"我...我...我要...要学...学...学...学编程...程!"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(method(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">method</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">str = str.replaceAll(<span class="string">"\\.+"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> str.replaceAll(<span class="string">"(.)\\1+"</span>,<span class="string">"$1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：</p><ul><li>多个组互相包含时，数左括号数即可判断一共多少组</li><li>以左括号出现顺序，所包含的部分即为该顺序组</li><li>组从1开始计，0组代表整个表达式</li></ul><p>练习：</p><p>IP地址排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.68.1.254</span><br><span class="line">102.49.23.13</span><br><span class="line">10.10.10.10</span><br><span class="line">2.2.2.2</span><br><span class="line">8.109.90.30</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"102.49.23.13  192.68.1.254 10.10.10.10  2.2.2.2 8.109.90.30"</span>;</span><br><span class="line"></span><br><span class="line">String s = str.replaceAll(<span class="string">"(\\d+)"</span>, <span class="string">"00$1"</span>);</span><br><span class="line">s= s.replaceAll(<span class="string">"0*(\\d&#123;3&#125;)"</span>, <span class="string">"$1"</span>);</span><br><span class="line">String[] strings = s.split(<span class="string">" +"</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">set.addAll(Arrays.asList(strings));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s1 : set) &#123;</span><br><span class="line">s1 = s1.replaceAll(<span class="string">"0*(\\d+)"</span>, <span class="string">"$1"</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法基础——冒泡排序和选择排序</title>
      <link href="/2018/08/06/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/06/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理分析：</p><p>索引0和1比；1和2比；2和3比…</p><ul><li>两两比较，较大者和较小者交换位置，最后一个数不需要主动比较</li><li>因此第一轮后，最大数就在最大索引处</li><li>第二轮开始，比较次数因此减1次</li><li>因此，总比较轮数为数组长度减1轮</li></ul><p>代码如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"排序前：\n"</span> + Arrays.toString(arr));</span><br><span class="line">bubbleSort(arr);</span><br><span class="line">System.out.println(<span class="string">"排序后：\n"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制比较轮数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制比较次数</span></span><br><span class="line"><span class="comment">// -1是因为最后一个索引不需要主动比较</span></span><br><span class="line"><span class="comment">// -i是因为每轮比较的最大索引即是最大值，因此，每过1轮即可少比较一次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较大小，大值向后交换</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序</p><p>原理分析：</p><p>索引：0和1比，0和2比，0和3比…</p><ul><li>值小的往前交换，一轮结束，最小索引处即是最小值</li><li>内循环的索引对应被比较的对象，内循环启始索引永远比外循环索引大1位</li><li>每一轮都需要比较直到最大索引处，但是启始索引每一轮都会加1位</li><li>外循环控制比较轮次，也是当前比较者的索引；类似于冒泡排序，轮次等于数组长度减1次</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"排序前：\n"</span> + Arrays.toString(arr));</span><br><span class="line">selectSort(arr);</span><br><span class="line">System.out.println(<span class="string">"排序后：\n"</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="comment">// 比较大小，大值向后交换</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式——单例模式</title>
      <link href="/2018/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ol><li><p>饿汉式（高效，无懒加载，线程安全）<br> 类一加载就创建对象</p><pre><code>由于类加载器是绝对线程安全的，所以不会出现多个实例的问题</code></pre></li><li><p>懒汉式（低效，懒加载，同步锁）<br> 需要对象的时候再实例化，存在线程安全问题，需要同步锁</p></li><li><p>双重检查锁式（高效，懒加载，不可靠）<br> 由于jvm内存模型问题，会导致执行顺序颠倒的可能，不可靠</p></li><li><p>静态内部类式（高效，懒加载，推荐）<br> 类（包括内部类）不会在外部类初始化时初始化，而是需要的时候初始化，保证懒加载<br> private static final保证了利用类加载器初始化实例，绝对线程安全<br> 内部类静态原因：非静态内部类，不能拥有静态属性（容易导致内部类不受外部类限制，直接使用类名得到实例）</p></li><li><p>枚举式（高效，无懒加载，绝对安全，推荐）<br> 由jvm底层保证其绝对安全，不被反射和反序列化破解<br> 枚举类天生单例</p></li></ol><a id="more"></a><p>防止被反射和反序列化破解：</p><p>防止被反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 进一步不允许构造器被使用，防止反射</span></span><br><span class="line">    <span class="keyword">if</span> (demo1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止反序列化获取多个对象的漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> demo1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面开始举例：</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 进一步不允许构造器被使用，防止反射</span></span><br><span class="line">        <span class="keyword">if</span> (demo1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo1 demo1 = <span class="keyword">new</span> Demo1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demo1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止反序列化获取多个对象的漏洞</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demo1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 防止反射破解，进一步阻止对象被创建</span></span><br><span class="line">        <span class="keyword">if</span> (demo2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 懒加载的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo2 demo2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (demo2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            demo2 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止反序列化获取多个对象的漏洞</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demo2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h3><p>因为不推荐使用，暂不实现</p><h3 id="静态内部类式"><a href="#静态内部类式" class="headerlink" title="静态内部类式"></a>静态内部类式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Demo4 demo4 = <span class="keyword">new</span> Demo4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Demo4Inner.demo4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 防止反射破解</span></span><br><span class="line">        <span class="keyword">if</span> (Demo4Inner.demo4 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止反序列化获取多个对象的漏洞</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Demo4Inner.demo4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举式"><a href="#枚举式" class="headerlink" title="枚举式"></a>枚举式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  Demo5 &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用反射破解单例模式"><a href="#使用反射破解单例模式" class="headerlink" title="使用反射破解单例模式"></a>使用反射破解单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Class&lt;Demo1&gt; clazz = Demo1.class;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 破解Demo1</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            Constructor&lt;Demo1&gt; constructor = clazz.getDeclaredConstructor(null);</span></span><br><span class="line"><span class="comment">            constructor.setAccessible(true);</span></span><br><span class="line"><span class="comment">            Demo1 instance1 = constructor.newInstance(null);</span></span><br><span class="line"><span class="comment">            Demo1 instance2 = constructor.newInstance(null);</span></span><br><span class="line"><span class="comment">            System.out.println(instance1);</span></span><br><span class="line"><span class="comment">            System.out.println(instance2);</span></span><br><span class="line"><span class="comment">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 破解Demo4</span></span><br><span class="line">        Class&lt;Demo4&gt; clazz = Demo4.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Demo4&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Demo4 instance1 = constructor.newInstance(<span class="keyword">null</span>);</span><br><span class="line">            Demo4 instance2 = constructor.newInstance(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(instance1);</span><br><span class="line">            System.out.println(instance2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring框架入门</title>
      <link href="/2018/08/05/Spring/"/>
      <url>/2018/08/05/Spring/</url>
      <content type="html"><![CDATA[<h2 id="一、Spring简要"><a href="#一、Spring简要" class="headerlink" title="一、Spring简要"></a>一、Spring简要</h2><h3 id="什么是Spring？"><a href="#什么是Spring？" class="headerlink" title="什么是Spring？"></a>什么是Spring？</h3><pre><code>Spring是一个非倾入容器，用于降低代码间的耦合度。根据不同的代码，使用IoC和AOP两种技术进行解耦。主业务逻辑：逻辑联系紧密，复用性低系统级服务：功能独立，主要是为业务提供系统级服务（日志、安全、事务），复用性强IoC：使主业务不再自己维护关系，由Spring统一管理，“注入”AOP：使系统级服务最大限度复用，不需要混杂进主业务，而是由Spring统一“织入”非倾入：Spring的API不会侵入业务逻辑，不会破坏pojo（Plain Old Java Object）</code></pre><h3 id="ApplicationContext与BeanFactory容器的区别"><a href="#ApplicationContext与BeanFactory容器的区别" class="headerlink" title="ApplicationContext与BeanFactory容器的区别"></a>ApplicationContext与BeanFactory容器的区别</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) ApplicationContext容器在进行初始化时，会将其中所有Bean对象创建</span><br><span class="line">（占用系统资源，响应速度快）</span><br><span class="line"></span><br><span class="line">2）BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在获取该对象时才会被创建</span><br><span class="line">（响应速度慢，不多占用系统资源）</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="最全约束"><a href="#最全约束" class="headerlink" title="最全约束"></a>最全约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启组件扫描器 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"beans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IoC是什么？"><a href="#IoC是什么？" class="headerlink" title="IoC是什么？"></a>IoC是什么？</h3><pre><code>控制反转思想，DI（依赖注入）是主流的实现方式</code></pre><p><strong>其他实现方式：依赖查找</strong></p><h2 id="二、Bean简述"><a href="#二、Bean简述" class="headerlink" title="二、Bean简述"></a>二、Bean简述</h2><h3 id="（一）动态工厂Bean"><a href="#（一）动态工厂Bean" class="headerlink" title="（一）动态工厂Bean"></a>（一）动态工厂Bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"ServiceFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getService"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（二）静态工厂Bean（推荐）"><a href="#（二）静态工厂Bean（推荐）" class="headerlink" title="（二）静态工厂Bean（推荐）"></a>（二）静态工厂Bean（推荐）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要工厂方法为静态方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 静态工厂，工厂对象无需创建，直接引用工厂类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testService"</span> <span class="attr">class</span>=<span class="string">"factory.ServiceFactory"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">"getTestService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（三）Bean的创建模式"><a href="#（三）Bean的创建模式" class="headerlink" title="（三）Bean的创建模式"></a>（三）Bean的创建模式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单例（默认） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原型（对象创建时机：不随容器创建） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Bean生命周期的始末"><a href="#三、Bean生命周期的始末" class="headerlink" title="三、Bean生命周期的始末"></a>三、Bean生命周期的始末</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">class</span>=<span class="string">"ServiceImpl"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">"起始方法名"</span> <span class="attr">destory-method</span>=<span class="string">"结束方法名"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>要执行结束方法，需关闭容器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭容器条件 1. Bean对象是单例的 2. 手动关闭容器</span></span><br><span class="line">((ClassPathXmlApplicationContext)applicationContext).close();</span><br></pre></td></tr></table></figure><h3 id="生命周期顺序："><a href="#生命周期顺序：" class="headerlink" title="生命周期顺序："></a>生命周期顺序：</h3><ol><li>无参构造器</li><li>执行setter（需注入）</li><li>获取到Bean的id（需实现BeanNameAware）</li><li>获取到BeanFactory容器（需实现BeanFactoryAware）</li><li>执行postProcessBeforeInitialization()（需注册Bean后处理器BeanPostProcessor接口实现类）</li><li>Bean初始化完毕（需实现InitializingBean）</li><li>初始化完毕之后（起始方法init-method执行）</li><li>执行postProcessAfterInitialization()方法</li><li>doSome…</li><li>销毁之前（需实现接口DisposableBean）</li><li>销毁之前（执行destory-method=”结束方法名”）</li></ol><h2 id="四、Spring配置文件"><a href="#四、Spring配置文件" class="headerlink" title="四、Spring配置文件"></a>四、Spring配置文件</h2><h3 id="标签id和name区别"><a href="#标签id和name区别" class="headerlink" title="标签id和name区别"></a><bean>标签id和name区别</bean></h3><pre><code>id：必须满足XML的命名规范：    必须字母开头，可以包含数字、字母、下划线、连字符、句号、冒号name：可以包含任何字符</code></pre><h3 id="基于XML的DI"><a href="#基于XML的DI" class="headerlink" title="基于XML的DI"></a>基于XML的DI</h3><h4 id="（一）设值注入"><a href="#（一）设值注入" class="headerlink" title="（一）设值注入"></a>（一）设值注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要提供setter方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（二）构造注入"><a href="#（二）构造注入" class="headerlink" title="（二）构造注入"></a>（二）构造注入</h4><p><strong>方法一</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需带参构造器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需带参构造器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方法三</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需带参构造器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（三）实现接口注入"><a href="#（三）实现接口注入" class="headerlink" title="（三）实现接口注入"></a>（三）实现接口注入</h4><h4 id="（四）命名空间注入"><a href="#（四）命名空间注入" class="headerlink" title="（四）命名空间注入"></a>（四）命名空间注入</h4><p> P命名空间设值注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要setter方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">p:name</span>=<span class="string">"王五"</span> <span class="attr">p:school-ref:mySchool</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>C命名空间构造注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要带参构造方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">c:name</span>=<span class="string">"王五"</span> <span class="attr">c:school-ref:mySchool</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（五）集合属性注入"><a href="#（五）集合属性注入" class="headerlink" title="（五）集合属性注入"></a>（五）集合属性注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySome"</span> <span class="attr">class</span>=<span class="string">"Some"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组：引用类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schools"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mySchool"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mySchool2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字符串数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- list：字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>云南<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- set：字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>苏州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>常州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- map：字符串 Object --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Properyies对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myPros"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"education"</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"gender"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>简单写法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span> <span class="attr">value</span>=<span class="string">"北京，上海"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span> <span class="attr">value</span>=<span class="string">"广州，云南"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span> <span class="attr">value</span>=<span class="string">"苏州，常州"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（六）自动注入"><a href="#（六）自动注入" class="headerlink" title="（六）自动注入"></a>（六）自动注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"school"</span> <span class="attr">class</span>=<span class="string">"School"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- byName:从容器中自动找寻与属性名称相同的Bean的id，自动织入school属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"School"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- byType:从容器中自动找寻与属性类型相同(包括子类)的Bean，自动织入school属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（七）SpEL表达式"><a href="#（七）SpEL表达式" class="headerlink" title="（七）SpEL表达式"></a>（七）SpEL表达式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要求：</span></span><br><span class="line"><span class="comment">    李四年龄随机小于50</span></span><br><span class="line"><span class="comment">    myStudent名称和myPerson相同</span></span><br><span class="line"><span class="comment">    myStudent年龄和myPerson相同，若大于25按25算 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myPerson"</span> <span class="attr">class</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"page"</span> <span class="attr">value</span>=<span class="string">"#&#123;T(java.lang.Math).random()*50&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要getter方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;myPerson.pname&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#&#123;myPerson.page &gt; 25 ? 25 : myPerson.page&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（八）内部Bean"><a href="#（八）内部Bean" class="headerlink" title="（八）内部Bean"></a>（八）内部Bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部Bean无法直接被getBean获取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"School"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（九）同类抽象Bean"><a href="#（九）同类抽象Bean" class="headerlink" title="（九）同类抽象Bean"></a>（九）同类抽象Bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- abstract：阻止base被获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baseStudent"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parent：继承base的property，class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent1"</span> <span class="attr">parent</span>=<span class="string">"baseStudent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent2"</span> <span class="attr">parent</span>=<span class="string">"baseStudent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent3"</span> <span class="attr">parent</span>=<span class="string">"baseStudent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"王五"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（十）异类抽象Bean"><a href="#（十）异类抽象Bean" class="headerlink" title="（十）异类抽象Bean"></a>（十）异类抽象Bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- abstract：阻止base被创建(base无class，无abstract则创建报错) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"base"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parent：继承base的property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"Student"</span> <span class="attr">parent</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTeacher"</span> <span class="attr">class</span>=<span class="string">"Teacher"</span> <span class="attr">parent</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、多个Spring配置文件关系"><a href="#五、多个Spring配置文件关系" class="headerlink" title="五、多个Spring配置文件关系"></a>五、多个Spring配置文件关系</h2><h3 id="平等关系"><a href="#平等关系" class="headerlink" title="平等关系"></a>平等关系</h3><pre><code>配置文件：    spring-beans.xml    spring-base.xml</code></pre><p><strong>写法一（利用重载方法：可变参数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">"spring-base.xml"</span>;</span><br><span class="line">String resource2 = <span class="string">"spring-beans.xml"</span>;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(resource,resource2);</span><br></pre></td></tr></table></figure><p><strong>写法二（利用重载方法：可变参数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">"spring-base.xml"</span>;</span><br><span class="line">String resource2 = <span class="string">"spring-beans.xml"</span>;</span><br><span class="line">String[] resources = &#123;resource,resource2&#125;;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(resources);</span><br></pre></td></tr></table></figure><p><strong>写法三（推荐）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">"spring-*.xml"</span>;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(resource);</span><br><span class="line">Student stu = (Student)ac.getBean(<span class="string">"myStudemt"</span>);</span><br></pre></td></tr></table></figure><h3 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 若使用通配符，主配置文件格式需不同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-base.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-beans.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、基于注解的DI"><a href="#六、基于注解的DI" class="headerlink" title="六、基于注解的DI"></a>六、基于注解的DI</h2><p>必须1：导入aop包<br></p><p>必须2：开启组件扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启组件扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"beans"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>) <span class="comment">// 单例 or 原型（默认单例）</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"mySchool"</span>) <span class="comment">// 组件，表示当前类被Spring容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"清华大学"</span>) <span class="comment">// 注入值</span></span><br><span class="line">    <span class="keyword">private</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（一）base-package相关"><a href="#（一）base-package相关" class="headerlink" title="（一）base-package相关"></a>（一）base-package相关</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描com.ssm这个包及其子包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅扫描com.ssm这个包的子包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.*"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（二）和-Component相关的注解"><a href="#（二）和-Component相关的注解" class="headerlink" title="（二）和@Component相关的注解"></a>（二）和@Component相关的注解</h3><table><thead><tr><th style="text-align:center">注解</th><th style="text-align:center">使用位置</th></tr></thead><tbody><tr><td style="text-align:center">Repository</td><td style="text-align:center">使用在Dao实现类上</td></tr><tr><td style="text-align:center">Service</td><td style="text-align:center">使用在Service实现类上</td></tr><tr><td style="text-align:center">Controller</td><td style="text-align:center">使用在SpringMVC的处理器上</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习17——可变类型与不可变类型</title>
      <link href="/2018/08/05/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A017%E2%80%94%E2%80%94%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/08/05/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A017%E2%80%94%E2%80%94%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>在Python当中，这样几种数据类型是不可变的类型：</p><ol><li>整型int</li><li>浮点型float</li><li>字符串string</li><li>元组tuple</li></ol><p>可变数据类型：</p><ol><li>列表list</li><li>字典dict</li></ol><p>这里使用<code>整型</code>稍作演示：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(a))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(b))</span><br><span class="line"><span class="number">4521712544</span></span><br><span class="line"><span class="number">4521712544</span></span><br></pre></td></tr></table></figure><p>在上面的代码当中，<code>id()</code>函数查看的是当前变量的地址值。可以发现，对于同样的整型数据，内存当中仅创建了一份数据对象<code>10</code>。</p><blockquote><p><strong>补充：</strong>在字典当中，仅不可变类型可以作为字典的<code>key</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java单元测试框架——Mockito</title>
      <link href="/2018/08/05/Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Mockito/"/>
      <url>/2018/08/05/Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Mockito/</url>
      <content type="html"><![CDATA[<h2 id="一、建立测试目录"><a href="#一、建立测试目录" class="headerlink" title="一、建立测试目录"></a>一、建立测试目录</h2><blockquote><p>测试包类路径与被测试包类保持一致</p></blockquote><h2 id="二、建立测试类"><a href="#二、建立测试类" class="headerlink" title="二、建立测试类"></a>二、建立测试类</h2><blockquote><p>类名在被测试类名后面加上Test</p></blockquote><h3 id="（一）配置文件"><a href="#（一）配置文件" class="headerlink" title="（一）配置文件"></a>（一）配置文件</h3><p><strong>1、pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mockito是一个流行的Mocking(模拟测试)框架，通过使用Mocking框架，可以尽可能使unit test独立。</p><a id="more"></a><h3 id="（二）构建测试类"><a href="#（二）构建测试类" class="headerlink" title="（二）构建测试类"></a>（二）构建测试类</h3><p>实例化被测试类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BGWorkStorage bgWorkStorage = <span class="keyword">new</span> BGWorkStorage();</span><br></pre></td></tr></table></figure><p>模拟变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> IBGControlManage bgControlManage;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> IBGSeqManage bgSeqManage;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> IBGWorkManage bgWorkManage;</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Date&gt; lastInsertDate = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Integer&gt; currentStep = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br></pre></td></tr></table></figure><p>定义方法内部用到的返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;UsersBo&gt; userBoList;</span><br><span class="line"><span class="keyword">private</span> List&lt;AcctAccountRelationBo&gt; acctAccountRelationBoList;</span><br><span class="line"><span class="keyword">private</span> List&lt;AcctAccountBo&gt; acctAccountBoList;</span><br><span class="line"><span class="keyword">private</span> List&lt;BillDetailItemBo&gt; queryBillDetailItemList;</span><br></pre></td></tr></table></figure><p>初始化mock变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeMethod</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"iBillHangDetailItemManager"</span>,iBillHangDetailItemManager);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"iDayBillSubtotalItemManage"</span>,iDayBillSubtotalItemManage);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"iAcctAccountManage"</span>,iAcctAccountManage);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"iAcctAccountRelationManage"</span>,iAcctAccountRelationManage);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"iUsersManage"</span>,iUsersManage);</span><br><span class="line">        ReflectionTestUtils.setField(AopTargetUtils.getTarget(genBillHang),<span class="string">"genConfig"</span>,genConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置上下文参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置上下文</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContextParams</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Context.getContextParams().put(<span class="string">"deal_mode"</span>,<span class="number">0</span>);</span><br><span class="line">    Context.getContextParams().put(<span class="string">"deal_type"</span>,<span class="number">1</span>);</span><br><span class="line">    Context.getContextParams().put(<span class="string">"dbi_type"</span>,<span class="number">14</span>);</span><br><span class="line">    Context.getContextParams().put(Constants.Key.CITY_ID,<span class="number">14</span>);</span><br><span class="line">    JobConfig jobConfig = <span class="keyword">new</span> JobConfig();</span><br><span class="line">    jobConfig.setTotalTaskNum(<span class="number">2</span>);</span><br><span class="line">    jobConfig.setTaskItemNum(<span class="number">0</span>);</span><br><span class="line">    Context.getContextParams().put(<span class="string">"jobConfig"</span>,jobConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）期望、断言"><a href="#（三）期望、断言" class="headerlink" title="（三）期望、断言"></a>（三）期望、断言</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置返回对象</span></span><br><span class="line">when(bgControl.getBGControlByCityId(anyInt())).thenReturn(<span class="keyword">null</span>);</span><br><span class="line">List list = bgWorkStorage.fetchData();</span><br><span class="line"><span class="comment">// 断言</span></span><br><span class="line">Assert.assertNull(list);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bgWorkStorage.processData(workMQMessageBoList);</span><br><span class="line"><span class="comment">// 断言方法执行次数</span></span><br><span class="line">verify(bgWorkManage, times(<span class="number">1</span>)).updateWorkUsersBgFlagBatch(anyListOf(BGWorkUsersBo.class));</span><br></pre></td></tr></table></figure><p>断言执行次数还有这些函数方法：<code>never()</code>，<code>atLeast()</code>，<code>atLeastOnce()</code>，<code>atMost()</code></p><p><code>timeout(100).times(2)</code>代表100毫秒内被调用两次</p><h3 id="（四）PowerMock"><a href="#（四）PowerMock" class="headerlink" title="（四）PowerMock"></a>（四）PowerMock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PrepareForTest</span>(&#123;BGWorkStorageTest.class,CollectionUtils.class, PropertiesUtil.class&#125;)</span><br><span class="line"><span class="meta">@PowerMockIgnore</span>(<span class="string">"javax.management.*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGWorkStorageTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ObjectFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ITestObjectFactory <span class="title">getObjectFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PowerMockObjectFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mock工具类</span></span><br><span class="line">CollectionUtils collectionUtils = PowerMockito.mock(CollectionUtils.class);     </span><br><span class="line"><span class="comment">// 替换被测试类中的变量</span></span><br><span class="line">PowerMockito.whenNew(CollectionUtils.class).withAnyArguments().thenReturn(collectionUtils);</span><br><span class="line"><span class="comment">// mock静态方法</span></span><br><span class="line">PowerMockito.mockStatic(CollectionUtils.class);     </span><br><span class="line"><span class="comment">// 断言</span></span><br><span class="line">PowerMockito.when(collectionUtils.isEmpty(anyList())).thenReturn(<span class="keyword">false</span>);</span><br><span class="line">PowerMockito.when(collectionUtils.isNotEmpty(anyList())).thenReturn(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="（五）期望异常、模拟异常捕获"><a href="#（五）期望异常、模拟异常捕获" class="headerlink" title="（五）期望异常、模拟异常捕获"></a>（五）期望异常、模拟异常捕获</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 期望捕获异常：</span></span><br><span class="line"><span class="meta">@Test</span>(expectedExceptions = com.newland.common.NLException.class)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟void函数</span></span><br><span class="line">doNothing().when(spy).add(anyInt(), anyString());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟方法抛出异常</span></span><br><span class="line">when(mock.someMethod()).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"><span class="comment">// 模拟void方法抛出异常</span></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mock).someMethod();</span><br></pre></td></tr></table></figure><p>补充：</p><p>when()匹配固定字符串的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">when(AcctFileProcessUtil.getNodeElement(anyString(), eq(<span class="string">"MemProvCode"</span>), eq(<span class="string">"MemProvCode"</span>))).thenReturn(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>对于工具类没有返回值的情况，跳过执行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PowerMockito.mockStatic(FileUtils.class);</span><br><span class="line">PowerMockito.doNothing().when(FileUtils.class, <span class="string">"moveFile"</span>, (File) anyObject(), (File) anyObject());</span><br></pre></td></tr></table></figure><p>对静态方法进行断言（前提：先使用PowerMock的注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PowerMockito.verifyStatic(times(<span class="number">1</span>));</span><br><span class="line">FileTool.writeFile(anyString(), anyString(), anyString(), anyListOf(String.class));</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Mockito </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习16——不定长参数</title>
      <link href="/2018/08/04/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A016%E2%80%94%E2%80%94%E4%B8%8D%E5%AE%9A%E9%95%BF%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/04/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A016%E2%80%94%E2%80%94%E4%B8%8D%E5%AE%9A%E9%95%BF%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>当我们不确定需要的参数个数时，可以使用<code>不定长参数</code>来作为形式参数。</p><p>不定长参数可以选择传递0~多个值，并将这些值保存为一个元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args)</span>:</span></span><br><span class="line">···     print(<span class="string">"a = "</span>, a)</span><br><span class="line">···     print(<span class="string">"b = "</span>, b)</span><br><span class="line">···     print(<span class="string">"args = "</span>, args)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a =  <span class="number">1</span></span><br><span class="line">b =  <span class="number">2</span></span><br><span class="line">args =  (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>当然不定长参数也可以接受0个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args)</span>:</span></span><br><span class="line">···     print(a)</span><br><span class="line">···     print(b)</span><br><span class="line">···     print(args)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>不定长参数还有这样一种格式：结合<code>字典</code>的不定长参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">···     print(<span class="string">"a ="</span>, a)</span><br><span class="line">···     print(<span class="string">"b ="</span>, b)</span><br><span class="line">···     print(<span class="string">"args ="</span>, args)</span><br><span class="line">···     print(<span class="string">"kwargs ="</span>, kwargs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">kwargs = &#123;&#125;</span><br></pre></td></tr></table></figure><p>若是这样给不定长参数传值，<code>**kwargs</code>并不会接收到值，因为我们需要以字典的方式传值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">···     print(<span class="string">"a ="</span>, a)</span><br><span class="line">···     print(<span class="string">"b ="</span>, b)</span><br><span class="line">···     print(<span class="string">"args ="</span>, args)</span><br><span class="line">···     print(<span class="string">"kwargs ="</span>, kwargs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>, name = <span class="number">3</span>, age = <span class="number">4</span>, addr = <span class="number">5</span>)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = ()</span><br><span class="line">kwargs = &#123;<span class="string">'name'</span>: <span class="number">3</span>, <span class="string">'age'</span>: <span class="number">4</span>, <span class="string">'addr'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>拆包：</strong></p><p>如果需要直接给两种不定长参数分别传递元组和字典，应该怎么做呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">···     print(<span class="string">"a ="</span>, a)</span><br><span class="line">···     print(<span class="string">"b ="</span>, b)</span><br><span class="line">···     print(<span class="string">"args ="</span>, args)</span><br><span class="line">···     print(<span class="string">"kwargs ="</span>, kwargs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">"name"</span>:<span class="string">"Tom"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>, a, b)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = ((<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>), &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">kwargs = &#123;&#125;</span><br></pre></td></tr></table></figure><p>可见，这并不是我们想要的结果，因为Python将我们传递的元组和字典都作为第一种不定长参数的元组的元素了。</p><p>但是如果我们这样传递实际参数，就可以分别为两种不定长形式参数赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">···     print(<span class="string">"a ="</span>, a)</span><br><span class="line">···     print(<span class="string">"b ="</span>, b)</span><br><span class="line">···     print(<span class="string">"args ="</span>, args)</span><br><span class="line">···     print(<span class="string">"kwargs ="</span>, kwargs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">"name"</span>:<span class="string">"Tom"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>, *a, **b)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">kwargs = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习15——缺省参数</title>
      <link href="/2018/08/02/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A015%E2%80%94%E2%80%94%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/02/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A015%E2%80%94%E2%80%94%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>观察以下代码，思考缺省参数存在的意义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(get_sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">print(get_sum(<span class="number">11</span>, <span class="number">20</span>))</span><br><span class="line">print(get_sum(<span class="number">12</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>我们发现，参数<code>b</code>的值一直都是<code>10</code>，那么怎么样使其值默认为<code>20</code>呢？</p><p>我们这样修改代码：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b = <span class="number">20</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(get_sum(<span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">11</span>))</span><br><span class="line">print(get_sum(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充：</strong>含缺省值的参数，必须在参数列表的最后</p></blockquote><p>当存在多个缺省参数时，亦可单独给某个缺省参数赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b = <span class="number">20</span>, c = <span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">print(get_sum(<span class="number">10</span>, c = <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">11</span>, c = <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">12</span>, c = <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>在传递多个缺省值时，参数顺序就不再重要了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b = <span class="number">20</span>, c = <span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">print(get_sum(<span class="number">10</span>, c = <span class="number">10</span>, b = <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">11</span>, c = <span class="number">10</span>, b = <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">12</span>, c = <span class="number">10</span>, b = <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>如果不指定缺省参数的名称，则是按顺序赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b = <span class="number">20</span>, c = <span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">print(get_sum(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">11</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">print(get_sum(<span class="number">12</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习14——局部变量与全局变量</title>
      <link href="/2018/08/01/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A014%E2%80%94%E2%80%94%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/2018/08/01/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A014%E2%80%94%E2%80%94%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><code>局部变量</code>就是只能在定义他的函数当中使用，而在其他函数当中不能使用的变量。</p><p><code>全局变量</code>就是在函数外部定义，在任意函数当中都可以使用的变量。</p><p><strong>重点：</strong></p><p>如果函数当中需要修改全局变量的值的话，需要使用<code>global</code>关键字，否则Python将会把函数当中的修改当作一个重名的<code>局部变量</code>对待</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_age</span><span class="params">()</span>:</span></span><br><span class="line">···     age = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_age()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(age)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>下面使用<code>global</code>关键字：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_age</span><span class="params">()</span>:</span></span><br><span class="line">···     <span class="keyword">global</span> age</span><br><span class="line">···     age = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_age()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(age)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><p><strong>应该尽量减少使用全局变量，避免全局变量和局部变量重名</strong></p><blockquote><p><strong>补充：</strong>如果是字典、列表作为全局变量，在函数当中对其进行增删改，可以不使用global声明</p></blockquote>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础02——CSS</title>
      <link href="/2018/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%8002%E2%80%94%E2%80%94CSS/"/>
      <url>/2018/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%8002%E2%80%94%E2%80%94CSS/</url>
      <content type="html"><![CDATA[<h3 id="一、互联网前端开发三层"><a href="#一、互联网前端开发三层" class="headerlink" title="一、互联网前端开发三层"></a>一、互联网前端开发三层</h3><table><thead><tr><th style="text-align:center">技术</th><th style="text-align:center">说明</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">HTML</td><td style="text-align:center">超文本标记语言</td><td style="text-align:center">从语义的角度描述页面结构</td></tr><tr><td style="text-align:center">CSS</td><td style="text-align:center">层叠式样式表</td><td style="text-align:center">从审美的角度负责页面样式</td></tr><tr><td style="text-align:center">JS</td><td style="text-align:center">JavaScript</td><td style="text-align:center">从交互的角度描述页面行为</td></tr></tbody></table><h3 id="二、常见属性"><a href="#二、常见属性" class="headerlink" title="二、常见属性"></a>二、常见属性</h3><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">设置</th><th style="text-align:center">sublime快捷键</th></tr></thead><tbody><tr><td style="text-align:center">颜色</td><td style="text-align:center">color:red;</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">字号大小</td><td style="text-align:center">font-size:40px;</td><td style="text-align:center">fsize</td></tr><tr><td style="text-align:center">背景颜色</td><td style="text-align:center">background-color:blue;</td><td style="text-align:center">bgc</td></tr><tr><td style="text-align:center">加粗</td><td style="text-align:center">font-weight:bold;(加粗)<br>font-weight:normal;(正常)</td><td style="text-align:center">fwb / fwn</td></tr><tr><td style="text-align:center">斜体</td><td style="text-align:center">font-style:italic(normal);</td><td style="text-align:center">fos</td></tr><tr><td style="text-align:center">下划线</td><td style="text-align:center">text-decoration:underline(none);<br>（decoration：装饰）</td><td style="text-align:center">td</td></tr></tbody></table><a id="more"></a><h3 id="三、基础选择器"><a href="#三、基础选择器" class="headerlink" title="三、基础选择器"></a>三、基础选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*标签选择器*/</span></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*id选择器*/</span></span><br><span class="line"><span class="selector-id">#head</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、类选择器"><a href="#四、类选择器" class="headerlink" title="四、类选择器"></a>四、类选择器</h3><p>一个标签可以属于多个类！</p><p>要使用原子类！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*类选择器*/</span></span><br><span class="line"><span class="selector-class">.important</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.special</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 属于多个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"important special"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>id选择器与类选择器的取舍</strong></p><p>类上样式，id上行为</p><blockquote><p><strong>提示：</strong>一般来说，CSS使用类选择器（class），id给JS使用，减少共用情况</p></blockquote><h3 id="五、后代选择器"><a href="#五、后代选择器" class="headerlink" title="五、后代选择器"></a>五、后代选择器</h3><p>后代选择器选择的是“后代”，而非“儿子”，包含即可！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> <span class="selector-tag">li2</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、交集选择器"><a href="#六、交集选择器" class="headerlink" title="六、交集选择器"></a>六、交集选择器</h3><p>特点：没有空格，可以多个交集</p><p>常用：标签名 + 类名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.special</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、并集选择器"><a href="#七、并集选择器" class="headerlink" title="七、并集选择器"></a>七、并集选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、通配符选择器"><a href="#八、通配符选择器" class="headerlink" title="八、通配符选择器"></a>八、通配符选择器</h3><p>注意：效率不高，页面标签越多效率越低，不建议使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、一些CSS3选择器"><a href="#九、一些CSS3选择器" class="headerlink" title="九、一些CSS3选择器"></a>九、一些CSS3选择器</h3><p><strong>一、儿子选择器（IE7开始兼容）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 仅作用于儿子，而非后代 */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、序选择器（IE8开始兼容）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、下一个兄弟选择器（IE7开始兼容）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*紧跟着的下一个兄弟标签*/</span></span><br><span class="line"><span class="selector-tag">h3</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十、CSS的继承性和层叠性（重要！）"><a href="#十、CSS的继承性和层叠性（重要！）" class="headerlink" title="十、CSS的继承性和层叠性（重要！）"></a>十、CSS的继承性和层叠性（重要！）</h3><p><strong>一、继承性</strong></p><p>可继承的属性（文字样式属性）</p><ol><li>color</li><li>text-开头的</li><li>line-开头的</li><li>font-开头的</li></ol><p><strong>二、层叠性</strong></p><p>权重统计方法：（无兼容问题）</p><ul><li>数id选择器的数量、类选择器的数量、标签选择器的数量：按位比较大小</li><li>如果权重相同，写在后面的有效</li><li>注意1：继承得到的样式权重为0（未真实选中）</li><li>注意2：实际权重都为0时（即都是通过继承），属性描述更接近目标标签的有效</li><li>注意3：若&lt;注意2&gt;的接近程度相同，判断继承权重；权重再相同，判断书写顺序</li></ul><p><strong>提示：</strong>标签含有多个类名并分别设置样式，和类名顺序无关，仅和CSS顺序相关</p><h3 id="提高权重（了解）"><a href="#提高权重（了解）" class="headerlink" title="提高权重（了解）"></a>提高权重（了解）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 提高样式，不提高选择器本身</span></span><br><span class="line"><span class="comment">2. 对继承样式无效*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、盒子模型（重要！）"><a href="#十一、盒子模型（重要！）" class="headerlink" title="十一、盒子模型（重要！）"></a>十一、盒子模型（重要！）</h3><p><strong>宽度和真实占有宽度不同！（需要考虑padding和border）</strong></p><table><thead><tr><th style="text-align:center">盒子属性</th><th style="text-align:center">属性含义</th></tr></thead><tbody><tr><td style="text-align:center">width</td><td style="text-align:center">宽度（描述内容）</td></tr><tr><td style="text-align:center">heigth</td><td style="text-align:center">高度（描述内容）</td></tr><tr><td style="text-align:center">padding</td><td style="text-align:center">内边距</td></tr><tr><td style="text-align:center">border</td><td style="text-align:center">边框</td></tr><tr><td style="text-align:center">margin</td><td style="text-align:center">外边距</td></tr></tbody></table><p>（一）认识padding</p><p><strong>1、padding区域有背景颜色（CSS2.1下和内容区域相同）</strong></p><p><strong>2、padding有方向（空格隔开：上右下左）</strong></p><ol><li>padding-top</li><li>padding-right</li><li>padding-bottom</li><li>padding-left</li></ol><p>（二）认识border（上右下左）</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">效果</th><th style="text-align:center">全称</th></tr></thead><tbody><tr><td style="text-align:center">粗细</td><td style="text-align:center">10px</td><td style="text-align:center">border-width</td></tr><tr><td style="text-align:center">线型</td><td style="text-align:center">solid：实线<br>dashed：虚线<br>dotted：点线<br>double：双横线<br>groove：内阴影<br>inset：内陷<br>outset：外凸<br>ridge：垄状边框</td><td style="text-align:center">border-style</td></tr><tr><td style="text-align:center">颜色</td><td style="text-align:center">默认黑色</td><td style="text-align:center">border-color</td></tr></tbody></table><p><strong>1、样式拆分</strong></p><ol><li>border-top-style</li><li>border-bottom-color</li><li>border-left-width</li></ol><p><strong>2、border可以没有</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-left</span>:none;<span class="comment">/*法一*/</span></span><br><span class="line">    <span class="attribute">border-left-width</span>:<span class="number">0</span>;<span class="comment">/*法二*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二、标准文档流"><a href="#十二、标准文档流" class="headerlink" title="十二、标准文档流"></a>十二、标准文档流</h3><p><strong>一、文档流现象</strong></p><p>（1）空白折叠现象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要让图片没有缝隙，必须紧密连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/0.jpg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）高矮不齐，底边对齐现象<br>（3）自动换行现象</p><p><strong>二、块级元素和行内元素</strong></p><p>（1）块级元素</p><ul><li>独占一行（不与其他元素并列）</li><li>可以设置宽高</li><li>若不设置宽度，默认宽度变为父级元素的100%</li></ul><p>（2）行内元素</p><ul><li>与其他元素并排</li><li>不能设置宽高，默认宽高就是文字宽高</li></ul><p>（3）块级元素和行内元素的相互转换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline;<span class="comment">/*显示模式：行内*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;<span class="comment">/*显示模式：块级*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、脱离标准文档流</strong></p><p>（1）浮动（重要！！！）</p><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">浮动元素自动脱离标准文档流</td><td style="text-align:center">任何元素都可以设置宽高</td></tr><tr><td style="text-align:center">浮动元素自动贴靠</td><td style="text-align:center">有空间的情况下会自动寻找边</td></tr><tr><td style="text-align:center">浮动元素有“字围”效果</td><td style="text-align:center">浮动元素可以遮挡未浮动元素，但不能遮挡文字</td></tr></tbody></table><p>（2）绝对定位</p><p>（3）固定定位</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础01——HTML</title>
      <link href="/2018/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%8001%E2%80%94%E2%80%94HTML/"/>
      <url>/2018/07/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%8001%E2%80%94%E2%80%94HTML/</url>
      <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>关于HTML的DTD区别</strong></p><pre><code>DTD：三种文档类型：S（Strict）、T（Transitional）、F（Frameset）。 html5没有XHTML 1.0 Transitional严格的要求，并且简化了很多东西可以直接使用 &lt;!DOCTYPE HTML&gt; </code></pre><table><thead><tr><th style="text-align:center">DTD类型</th><th>使用环境</th></tr></thead><tbody><tr><td style="text-align:center">Strict</td><td>如果您需要干净的标记，免于表现层的混乱，请使用此类型。请与层叠样式表（CSS）配合使用</td></tr><tr><td style="text-align:center">Transitional</td><td>DTD 可包含 W3C 所期望移入样式表的呈现属性和元素。如果您的读者使用了不支持层叠样式表（CSS）的浏览器以至于您不得不使用 HTML 的呈现特性时使用</td></tr><tr><td style="text-align:center">Frameset</td><td>DTD 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset DTD 等同于 Transitional DTD</td></tr></tbody></table><a id="more"></a><h3 id="HTML与XHTML区别"><a href="#HTML与XHTML区别" class="headerlink" title="HTML与XHTML区别"></a>HTML与XHTML区别</h3><p>最主要的不同：</p><ul><li>XHTML 元素必须被正确地嵌套</li><li>XHTML 元素必须被关闭</li><li>标签名必须用小写字母</li><li>XHTML 文档必须拥有根元素</li></ul><h3 id="一、关键字和页面描述"><a href="#一、关键字和页面描述" class="headerlink" title="一、关键字和页面描述"></a>一、关键字和页面描述</h3><p><strong>设置页面描述：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">"描述内容"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义关键词：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"关键词"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、基本标签以及属性"><a href="#二、基本标签以及属性" class="headerlink" title="二、基本标签以及属性"></a>二、基本标签以及属性</h3><table><thead><tr><th style="text-align:center">标签 <br> （文本级：只含文字、图片、表单）</th><th style="text-align:left">属性</th></tr></thead><tbody><tr><td style="text-align:center">img</td><td style="text-align:left">src：相对路径 <br> alt：图片出错提示</td></tr><tr><td style="text-align:center">a<br>（文本级）</td><td style="text-align:left">href：超链接地址 <br> title：鼠标悬停文本 <br> target：是否新标签打开（_blank）<br> 锚点：href=”#xxx” (xxx为其他a标签的name或id属性)</td></tr></tbody></table><h3 id="三、定义表格"><a href="#三、定义表格" class="headerlink" title="三、定义表格"></a>三、定义表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dt和dd都是容器级标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、div和span"><a href="#四、div和span" class="headerlink" title="四、div和span"></a>四、div和span</h3><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center">div</td><td style="text-align:center">容器级</td></tr><tr><td style="text-align:center">span</td><td style="text-align:center">文本级</td></tr></tbody></table><h3 id="五、表单"><a href="#五、表单" class="headerlink" title="五、表单"></a>五、表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"提交路径"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">“xxx”/</span>&gt;</span></span><br><span class="line">    密码框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">    单选框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span></span><br><span class="line">    复选框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    文本域：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、三种按钮"><a href="#六、三种按钮" class="headerlink" title="六、三种按钮"></a>六、三种按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">普通按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> /&gt;</span></span><br><span class="line">提交按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">重置按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="七、label标签"><a href="#七、label标签" class="headerlink" title="七、label标签"></a>七、label标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请选择性别：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"female"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八、转义字符"><a href="#八、转义字符" class="headerlink" title="八、转义字符"></a>八、转义字符</h3><p>常用字符：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">转义（分号结尾）</th><th style="text-align:center">实体编号（分号结尾）</th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">&amp;lt</td><td style="text-align:center">&amp;#60</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">&amp;gt</td><td style="text-align:center">&amp;#62</td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">&amp;copy</td><td style="text-align:center">&amp;#169</td></tr><tr><td style="text-align:center">空格</td><td style="text-align:center">&amp;nbsp</td><td style="text-align:center">&amp;#160</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">&amp;amp</td><td style="text-align:center">&amp;#38</td></tr><tr><td style="text-align:center">&#34;&#34;</td><td style="text-align:center">&amp;quot</td><td style="text-align:center">&amp;#34</td></tr></tbody></table><p>其他特殊字符：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">转义（分号结尾）</th><th style="text-align:center">实体编号（分号结尾）</th></tr></thead><tbody><tr><td style="text-align:center">&#39;</td><td style="text-align:center">&amp;apos</td><td style="text-align:center">&amp;#39</td></tr><tr><td style="text-align:center">￥</td><td style="text-align:center">&amp;yen</td><td style="text-align:center">&amp;#165</td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">&amp;reg</td><td style="text-align:center">&amp;#174</td></tr><tr><td style="text-align:center">§</td><td style="text-align:center">&amp;sect</td><td style="text-align:center">&amp;#167</td></tr><tr><td style="text-align:center">£</td><td style="text-align:center">&amp;pound</td><td style="text-align:center">&amp;#163</td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">&amp;times</td><td style="text-align:center">&amp;#215</td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">&amp;divide</td><td style="text-align:center">&amp;#247</td></tr><tr><td style="text-align:center">¢</td><td style="text-align:center">&amp;cent</td><td style="text-align:center">&amp;#162</td></tr><tr><td style="text-align:center">&#95;</td><td style="text-align:center">&#95;</td><td style="text-align:center">&amp;#95</td></tr><tr><td style="text-align:center">&#42;</td><td style="text-align:center">&#42;</td><td style="text-align:center">&amp;#42</td></tr></tbody></table><h3 id="九、html废弃标签介绍"><a href="#九、html废弃标签介绍" class="headerlink" title="九、html废弃标签介绍"></a>九、html废弃标签介绍</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">字体：<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"1~7"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 现作为css钩子使用 --&gt;</span></span><br><span class="line">加粗：<span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">斜体：<span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">下划线：<span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">强调：<span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line">强调：<span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line">水平线：<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">换行（p替代）：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习13——函数的return</title>
      <link href="/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A013%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84return/"/>
      <url>/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A013%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E7%9A%84return/</url>
      <content type="html"><![CDATA[<h3 id="return的基本使用"><a href="#return的基本使用" class="headerlink" title="return的基本使用"></a>return的基本使用</h3><p>有时我们不需要在<code>函数</code>当中输出程序的结果，而仅仅需要其充当一个功能时，我们就需要使用函数的返回值，即<code>return</code>关键字</p><p>示例如下：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (a + b)</span><br><span class="line"></span><br><span class="line">result = get_sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><!--more--><h3 id="一个函数返回多个值"><a href="#一个函数返回多个值" class="headerlink" title="一个函数返回多个值"></a>一个函数返回多个值</h3><p>当一个函数包含多个<code>return</code>会发生什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    c = <span class="number">33</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">result = test()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>打印的结果是<code>11</code>，也就是说，只有<code>a</code>被成功返回了，因为：<code>return</code>不仅仅意味着<code>返回</code>，同时意味着函数<code>执行终止</code>。</p><p>因此以上代码在将<code>a</code>作为返回值返回后也就终止了函数<code>test()</code>的执行。</p><p>要成功返回多个参数，方法可以有：</p><ol><li>将多个参数存放在列表当中</li><li>将多个参数存放在元组当中</li><li>其他类似方法</li></ol><p><strong>将多个参数存放在列表当中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    c = <span class="number">33</span></span><br><span class="line">    <span class="keyword">return</span> [a, b, c]</span><br><span class="line">result = test()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回：[11, 22, 33]</p><p><strong>将多个参数存放在元组当中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    c = <span class="number">33</span></span><br><span class="line">    <span class="keyword">return</span> (a, b, c)</span><br><span class="line">result = test()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回：(11, 22, 33)</p><p><strong>补充：</strong>直接返回多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    c = <span class="number">33</span></span><br><span class="line">    <span class="keyword">return</span> a, b, c</span><br><span class="line">result = test()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>返回：(11, 22, 33)</p><p>由此可见，直接返回多个值等于通过一个元组进行返回</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习12——带参数的函数</title>
      <link href="/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A012%E2%80%94%E2%80%94%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A012%E2%80%94%E2%80%94%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>若我们需要实现一个加法计算器，计算<code>a</code>与<code>b</code>的和，代码可能是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">    print(a + b)</span><br><span class="line"></span><br><span class="line">get_sum()</span><br></pre></td></tr></table></figure><p>不过这样的代码存在一个问题，即函数中<code>a</code>与<code>b</code>的值是固定的。那么怎么才能从函数外部传递值呢？</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br><span class="line"></span><br><span class="line">get_sum(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>佛祖注释版</title>
      <link href="/2018/07/08/%E4%BD%9B%E7%A5%96%E6%B3%A8%E9%87%8A%E7%89%88/"/>
      <url>/2018/07/08/%E4%BD%9B%E7%A5%96%E6%B3%A8%E9%87%8A%E7%89%88/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//                            _ooOoo_                             //</span></span><br><span class="line"><span class="comment">//                           o8888888o                            //    </span></span><br><span class="line"><span class="comment">//                           88" . "88                            //    </span></span><br><span class="line"><span class="comment">//                           (| -_- |)                            //    </span></span><br><span class="line"><span class="comment">//                           O\  =  /O                            //</span></span><br><span class="line"><span class="comment">//                        ____/`---'\____                         //                        </span></span><br><span class="line"><span class="comment">//                      .'  \\|     |//  `.                       //</span></span><br><span class="line"><span class="comment">//                     /  \\|||  :  |||//  \                      //    </span></span><br><span class="line"><span class="comment">//                    /  _||||| -:- |||||-  \                     //</span></span><br><span class="line"><span class="comment">//                    |   | \\\  -  /// |   |                     //</span></span><br><span class="line"><span class="comment">//                    | \_|  ''\---/''  |   |                     //        </span></span><br><span class="line"><span class="comment">//                    \  .-\__  `-`  ___/-. /                     //        </span></span><br><span class="line"><span class="comment">//                  ___`. .'  /--.--\  `. . ___                   //    </span></span><br><span class="line"><span class="comment">//                ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".                //</span></span><br><span class="line"><span class="comment">//              | | :  `- \`.;`\ _ /`;.`/ - ` : | |               //    </span></span><br><span class="line"><span class="comment">//              \  \ `-.   \_ __\ /__ _/   .-` /  /               //</span></span><br><span class="line"><span class="comment">//        ========`-.____`-.___\_____/___.-`____.-'========       //    </span></span><br><span class="line"><span class="comment">//                             `=---='                            //</span></span><br><span class="line"><span class="comment">//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      //</span></span><br><span class="line"><span class="comment">//         佛祖保佑       永无BUG        永不修改                    //</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> 有趣的事物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 趣事 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习11——函数</title>
      <link href="/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A011%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A011%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>函数可以将代码模块化，便于代码的维护和管理，提高代码的复用性，同时也可以降低代码的耦合程度。</p><p>函数在定义之后需要调用才会运行。</p><p>这里介绍一下Python当中的函数的定义和调用：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_fozu</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"                            _ooOoo_                     "</span>)</span><br><span class="line">    print(<span class="string">"                           o8888888o                    "</span>)</span><br><span class="line">    print(<span class="string">"                           88  .  88                    "</span>)</span><br><span class="line">    print(<span class="string">"                           (| -_- |)                    "</span>)</span><br><span class="line">    print(<span class="string">"                            O\\ = /O                    "</span>)</span><br><span class="line">    print(<span class="string">"                        ____/`---'\\____                "</span>)</span><br><span class="line">    print(<span class="string">"                      .   ' \\| |// `.                  "</span>)</span><br><span class="line">    print(<span class="string">"                       / \\||| : |||// \\               "</span>)</span><br><span class="line">    print(<span class="string">"                     / _||||| -:- |||||- \\             "</span>)</span><br><span class="line">    print(<span class="string">"                       | | \\\\\\ - /// | |             "</span>)</span><br><span class="line">    print(<span class="string">"                     | \\_| ''\\---/'' | |              "</span>)</span><br><span class="line">    print(<span class="string">"                      \\ .-\\__ `-` ___/-. /            "</span>)</span><br><span class="line">    print(<span class="string">"                   ___`. .' /--.--\\ `. . __            "</span>)</span><br><span class="line">    print(<span class="string">"                ."</span><span class="string">" '&lt; `.___\\_&lt;|&gt;_/___.' &gt;'"</span><span class="string">".         "</span>)</span><br><span class="line">    print(<span class="string">"               | | : `- \\`.;`\\ _ /`;.`/ - ` : | |     "</span>)</span><br><span class="line">    print(<span class="string">"                 \\ \\ `-. \\_ __\\ /__ _/ .-` / /      "</span>)</span><br><span class="line">    print(<span class="string">"         ======`-.____`-.___\\_____/___.-`____.-'====== "</span>)</span><br><span class="line">    print(<span class="string">"                            `=---='  "</span>)</span><br><span class="line">    print(<span class="string">"                                                        "</span>)</span><br><span class="line">    print(<span class="string">"         .............................................  "</span>)</span><br><span class="line">    print(<span class="string">"                  佛祖镇楼             BUG辟邪          "</span>)</span><br><span class="line">    print(<span class="string">"          Zen of python:                                "</span>)</span><br><span class="line">    print(<span class="string">"                  Beautiful is better than ugly.；      "</span>)</span><br><span class="line">    print(<span class="string">"                  Explicit is better than implicit.     "</span>)</span><br><span class="line">    print(<span class="string">"                  Simple is better than complex.        "</span>)</span><br><span class="line">    print(<span class="string">"                  Complex is better than complicated.   "</span>)</span><br><span class="line">    print(<span class="string">"                  Flat is better than nested.           "</span>)</span><br><span class="line">    print(<span class="string">"                  Sparse is better than dense.          "</span>)</span><br><span class="line">    print(<span class="string">"                  Readability counts.                   "</span>)</span><br><span class="line">    print(<span class="string">"                  Now is better than never.             "</span>)</span><br><span class="line">print_fozu()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac电脑如何查询命令存储位置</title>
      <link href="/2018/07/08/Mac%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
      <url>/2018/07/08/Mac%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>我们会在Mac电脑当中使用很多命令，如<code>Python3</code>，或者<code>java</code>等。那么如果我们忘记了该命令的安装位置，我们要怎么查找呢？</p><p>首先，打卡Mac系统自带的<code>终端</code>或者<code>iTerm</code>，然后在命令行中这样查找你所需要查询的命令：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> java</span></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home/bin/java</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Mac </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习10——元组</title>
      <link href="/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A010%E2%80%94%E2%80%94%E5%85%83%E7%BB%84/"/>
      <url>/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A010%E2%80%94%E2%80%94%E5%85%83%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>元组类型：tuple</p><p>元组是有序的，元组的元素不能修改，否则会报错！</p><p>一个元素的元组定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>但是如果元组内存储的对象地址没有改变，但是该对象内部发生了变化，这样的行为是被允许的</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = (a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"元组b原本的内容：&#123;&#125;"</span>.format(b))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">44</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"元组b现在的内容：&#123;&#125;"</span>.format(b))</span><br><span class="line">元组b原本的内容：[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">元组b现在的内容：[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br></pre></td></tr></table></figure><p>获取元组内的各个元素的小技巧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = tup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"a，b，c分别是&#123;&#125;，&#123;&#125;，&#123;&#125;"</span>.format(a, b, c))</span><br><span class="line">a，b，c分别是<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span></span><br></pre></td></tr></table></figure><p>命名元组：</p><p>使用命名元组可以实现对象的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Student = namedtuple(<span class="string">"Student"</span>, <span class="string">"name age sex"</span>)</span><br><span class="line">stu1 = Student(<span class="string">"王小明"</span>, <span class="number">12</span>, <span class="string">"男"</span>)</span><br></pre></td></tr></table></figure><p><code>name age sex</code>可以使用<code>可迭代对象</code>的方式传入，或者使用<code>空格</code>or<code>逗号</code>分隔</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习09——集&amp;字典</title>
      <link href="/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A009%E2%80%94%E2%80%94%E9%9B%86&amp;%E5%AD%97%E5%85%B8/"/>
      <url>/2018/07/08/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A009%E2%80%94%E2%80%94%E9%9B%86&amp;%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h2 id="（一）Set"><a href="#（一）Set" class="headerlink" title="（一）Set"></a>（一）Set</h2><h3 id="集的定义"><a href="#集的定义" class="headerlink" title="集的定义"></a>集的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个空集</span></span><br><span class="line">s = set()</span><br><span class="line"><span class="comment"># 定义含有元素的集</span></span><br><span class="line">s1 = &#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><code>s = {}</code>这种定义方式是定义一个空字典，而不是空Set</p></blockquote><blockquote><p><strong>注意：</strong>set的元素要求必须可以hash</p></blockquote><h2 id="（二）字典"><a href="#（二）字典" class="headerlink" title="（二）字典"></a>（二）字典</h2><h3 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h3><p>获取字典<code>键值对</code>的个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="number">20</span>&#125;</span><br><span class="line">len(students)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><p>获取字典所有的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>students = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students.keys()</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>在Python2当中，该函数会返回的是一个单纯的列表</p><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><p>获取字典所有的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>students = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students.values()</span><br><span class="line">dict_values([<span class="string">'Jack'</span>, <span class="number">20</span>])</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>在Python2当中，该函数会返回的是一个单纯的列表</p><h3 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h3><p>得到一个<code>列表</code>，该列表的元素由多个<code>元组</code>组成，每一个<code>键值对</code>被以键和值得形式存储到<code>元组</code>当中，分别是<code>元组</code>的第零个元素，和第一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>students = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students.items()</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'Jack'</span>), (<span class="string">'age'</span>, <span class="number">20</span>)])</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>在Python2当中，该函数会返回的是一个单纯的列表</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python中append和extend的区别</title>
      <link href="/2018/07/08/Python%E4%B8%ADappend%E5%92%8Cextend%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/07/08/Python%E4%B8%ADappend%E5%92%8Cextend%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>在Python的列表当中，有这两种列表添加元素的方法，那就是<code>append</code>和<code>extend</code>。那么他们到底有什么区别、有什么不一样呢？</p><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p><code>append</code>用于将一个对象 <strong>整体</strong>作为列表的新元素，这将改变原列表，但<code>append</code>并没有返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">"Jack"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"Peter"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, <span class="string">'Peter'</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果将一个新列表作为<code>append</code>的对象，则会将新列表作为原列表的一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">"Jack"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">"Peter"</span>, <span class="string">"Bob"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, [<span class="string">'Peter'</span>, <span class="string">'Bob'</span>]]</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><p><code>extend</code>用于将列表2的元素添加进列表1当中，这将改变列表1，<code>extend</code>同样没有返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">"Jack"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">"Peter"</span>, <span class="string">"Bob"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, <span class="string">'Peter'</span>, <span class="string">'Bob'</span>]</span><br></pre></td></tr></table></figure><p>如果将一个<code>字符串</code>作为被extend的对象，将会怎么样呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">"Jack"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"Peter"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class="line">[<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, <span class="string">'P'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习08——for循环的else</title>
      <link href="/2018/07/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A008%E2%80%94%E2%80%94for%E5%BE%AA%E7%8E%AF%E7%9A%84else/"/>
      <url>/2018/07/07/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A008%E2%80%94%E2%80%94for%E5%BE%AA%E7%8E%AF%E7%9A%84else/</url>
      <content type="html"><![CDATA[<p>在Python当中，存在一种比较特殊的语法<code>for-else</code>，该语法允许在for循环遍历一个<code>列表</code>时，在<code>列表</code>中已经没有未被遍历的元素时，执行<code>else</code>语句块当中的语句。</p><p><strong>例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"Java"</span>, <span class="string">"Python"</span>, <span class="string">"Ruby"</span>, <span class="string">"C++"</span>]</span><br><span class="line"><span class="keyword">for</span> lang <span class="keyword">in</span> names:</span><br><span class="line">    print(lang)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"============"</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java</span><br><span class="line">Python</span><br><span class="line">Ruby</span><br><span class="line">C++</span><br><span class="line">============</span><br></pre></td></tr></table></figure><p>我们也可以使用这个技巧避免使用<code>flag</code>标记法来判断一些逻辑。</p><p><strong>例：</strong></p><p>判断<code>students</code>列表中，是否存在<code>name</code>为<code>Jack</code>的学生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">students = [&#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="string">"22"</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="string">"19"</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"Peter"</span>, <span class="string">"age"</span>:<span class="string">"23"</span>&#125;]</span><br><span class="line">find_name = <span class="string">"Rose"</span> <span class="comment"># 查询是否存在一个名为Rose学生</span></span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> students:</span><br><span class="line">    <span class="keyword">if</span> stu[<span class="string">"name"</span>] == find_name:</span><br><span class="line">        print(<span class="string">"存在该名学生，该学生名为&#123;&#125;，今年&#123;&#125;岁"</span>.format(stu[<span class="string">"name"</span>], stu[<span class="string">"age"</span>]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不存在该学生"</span>) <span class="comment"># 若执行该条语句，说明列表students已经遍历结束，但尚未break跳出，则说明：未找到目标</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习07——字典</title>
      <link href="/2018/07/06/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A007%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8/"/>
      <url>/2018/07/06/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A007%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<p>字典类型：dict</p><h3 id="Python字典的增删改查"><a href="#Python字典的增删改查" class="headerlink" title="Python字典的增删改查"></a>Python字典的增删改查</h3><p><strong>增：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>&#125;</span><br><span class="line">stu[<span class="string">"age"</span>] = <span class="number">22</span></span><br><span class="line">print(stu)</span><br></pre></td></tr></table></figure><p><strong>删：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="keyword">del</span> stu[<span class="string">"name"</span>]</span><br><span class="line">print(stu)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>如果删除的是不存在的key，则会报错</p></blockquote><a id="more"></a><p><strong>改：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line">stu[<span class="string">"age"</span>] = <span class="number">30</span></span><br><span class="line">print(stu)</span><br></pre></td></tr></table></figure><p><strong>查：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line">age = stu[<span class="string">"age"</span>]</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>使用这种查询方法，如果键不存在，则会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = stu.get(<span class="string">"age"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(age)</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = &#123;<span class="string">"name"</span>:<span class="string">"Rose"</span>, <span class="string">"age"</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address = stu.get(<span class="string">"address"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(address)</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>使用这种查询方法，如果键不存在，不会报错</p></blockquote><p>查询字典当中是否存在某个键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="string">"22"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"name"</span> <span class="keyword">in</span> stu</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="string">"22"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"name"</span> <span class="keyword">in</span> stu.keys()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>查询字典当中是否存在某个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = &#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>, <span class="string">"age"</span>:<span class="string">"22"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Jack"</span> <span class="keyword">in</span> stu.values()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习06——列表</title>
      <link href="/2018/06/28/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A006%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8/"/>
      <url>/2018/06/28/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A006%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="（一）与Java列表的对比"><a href="#（一）与Java列表的对比" class="headerlink" title="（一）与Java列表的对比"></a>（一）与Java列表的对比</h2><p>列表类型：list</p><p>Java语言的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nums = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Java列表的特点"><a href="#Java列表的特点" class="headerlink" title="Java列表的特点"></a>Java列表的特点</h3><ol><li>数组内元素数据类型必须相同</li><li>数组长度固定</li></ol><p>Python语言的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">123</span>, <span class="number">1.23</span>, <span class="string">"123"</span>, <span class="keyword">True</span>]</span><br></pre></td></tr></table></figure><h3 id="Python列表的特点"><a href="#Python列表的特点" class="headerlink" title="Python列表的特点"></a>Python列表的特点</h3><ol><li>列表内元素数据类型可以不同</li><li>列表长度不固定</li><li>python列表不能指定初始化大小</li></ol><a id="more"></a><h2 id="（二）列表的索引"><a href="#（二）列表的索引" class="headerlink" title="（二）列表的索引"></a>（二）列表的索引</h2><p>列表的index方法没有rindex，但是可以接收起始值，只能从左向右查</p><p>index和count方法的时间复杂度都是On，当index方法没有找到匹配元素时，将会报错</p><h3 id="index方法"><a href="#index方法" class="headerlink" title="index方法"></a>index方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表的index方法，返回第一个匹配的元素到索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.index(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表的index方法，指定从哪个索引位置开始查找，还可以指定结束的索引，但是只能从左向右</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.index(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="count方法"><a href="#count方法" class="headerlink" title="count方法"></a>count方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count方法，统计一个元素出现的总次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.count(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="（三）列表的增删改查操作"><a href="#（三）列表的增删改查操作" class="headerlink" title="（三）列表的增删改查操作"></a>（三）列表的增删改查操作</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h4 id="append方法，将元素添加在列表的最后"><a href="#append方法，将元素添加在列表的最后" class="headerlink" title="append方法，将元素添加在列表的最后"></a>append方法，将元素添加在列表的最后</h4><p>时间复杂度为O1，属于就地修改，返回值为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.append(<span class="string">"Peter"</span>)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'Rose'</span>, <span class="string">'Peter'</span>]</span><br></pre></td></tr></table></figure><h4 id="insert方法，将元素插入指定索引位置"><a href="#insert方法，将元素插入指定索引位置" class="headerlink" title="insert方法，将元素插入指定索引位置"></a>insert方法，将元素插入指定索引位置</h4><p>insert也属于就地修改，返回值为None（索引可以溢出，过大则尾部追加，过小则头部追加）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.insert(<span class="number">1</span>, <span class="string">"Peter"</span>)</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Peter'</span>, <span class="string">'Jerry'</span>, <span class="string">'Rose'</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong><code>insert()</code>需要指定插入的索引位置（索引从0计），而<code>append()</code>固定添加在原有列表的最后</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="+/*方法"></a>+/*方法</h4><p>合并两个列表的方法：列表相加，产生一个新的列表，原列表保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names1 = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names2 = [<span class="string">"Peter"</span>, <span class="string">"Rpse"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names3 = names1 + names2</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'Peter'</span>, <span class="string">'Rpse'</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>列表也可以使用乘<code>*n</code>来重复列表元素n次，产生新列表，原列表保持不变</p></blockquote><h4 id="extend方法，将可迭代对象的元素追加进来，就地修改，返回None"><a href="#extend方法，将可迭代对象的元素追加进来，就地修改，返回None" class="headerlink" title="extend方法，将可迭代对象的元素追加进来，就地修改，返回None"></a>extend方法，将可迭代对象的元素追加进来，就地修改，返回None</h4><p>将一个列表合到另一个列表当中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names1 = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names2 = [<span class="string">"Peter"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names1.extend(names2)</span><br><span class="line"><span class="comment"># names1 ['Tom', 'Jerry', 'Peter', 'Rpse']</span></span><br><span class="line"><span class="comment"># names2 ['Peter', 'Rose']</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong><code>names1</code>不仅拥有自己原本的元素，还继承了<code>names2</code>的元素</p></blockquote><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="按元素删除"><a href="#按元素删除" class="headerlink" title="按元素删除"></a>按元素删除</h4><p><code>remove()</code>函数接收一个元素，并将该元素从列表中删除，返回值为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>, <span class="string">"Tom"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.remove(<span class="string">"Tom"</span>)</span><br><span class="line"><span class="comment"># names ['Jerry', 'Rose', 'Tom']</span></span><br></pre></td></tr></table></figure><h4 id="按下标删除"><a href="#按下标删除" class="headerlink" title="按下标删除"></a>按下标删除</h4><p><code>pop()</code>函数将列表最后一个元素删除，并返回该元素</p><p><code>pop(index)</code>可以根据索引删除元素，并返回该元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.pop()</span><br><span class="line"><span class="string">'Rose'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>从左到右删除第一个匹配的元素</p></blockquote><h4 id="使用切片"><a href="#使用切片" class="headerlink" title="使用切片"></a>使用切片</h4><p>使用下标获取列表元素，以及切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>, <span class="string">"Tom"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>]</span><br><span class="line"><span class="string">'Tom'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>, <span class="string">"Tom"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">1</span>: <span class="number">3</span>]</span><br><span class="line">[<span class="string">'Jerry'</span>, <span class="string">'Rose'</span>]</span><br></pre></td></tr></table></figure><h4 id="使用del关键字，根据下标删除元素："><a href="#使用del关键字，根据下标删除元素：" class="headerlink" title="使用del关键字，根据下标删除元素："></a>使用del关键字，根据下标删除元素：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>, <span class="string">"Tom"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">[<span class="string">'Jerry'</span>, <span class="string">'Rose'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><h4 id="使用clear清除元素"><a href="#使用clear清除元素" class="headerlink" title="使用clear清除元素"></a>使用clear清除元素</h4><p><code>clear()</code>可以清空一个列表内的所以元素</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="改变元素"><a href="#改变元素" class="headerlink" title="改变元素"></a>改变元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>, <span class="string">"Tom"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>] = <span class="string">"Tommy"</span></span><br><span class="line"><span class="comment"># names ['Tommy', 'Jerry', 'Rose', 'Tom']</span></span><br></pre></td></tr></table></figure><h4 id="列表的反转（倒序排列）"><a href="#列表的反转（倒序排列）" class="headerlink" title="列表的反转（倒序排列）"></a>列表的反转（倒序排列）</h4><p>就地修改，返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.reverse()</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h4><p><code>sort(key = None, reverse = False) -&gt; None</code></p><p>排序函数，就地修改，默认为升序，key接收一个排序函数</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Rose"</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Jerry"</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"找到了"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">"Jerry"</span> <span class="keyword">not</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"未找到"</span>)</span><br></pre></td></tr></table></figure><p>查询获取目标对象的索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"Tom"</span>, <span class="string">"Peter"</span>, <span class="string">"Rose"</span>]</span><br><span class="line">index = names.index(<span class="string">"Peter"</span>)</span><br><span class="line">print(index)</span><br></pre></td></tr></table></figure></p><h2 id="（四）拓展：列表的复制及比较"><a href="#（四）拓展：列表的复制及比较" class="headerlink" title="（四）拓展：列表的复制及比较"></a>（四）拓展：列表的复制及比较</h2><h3 id="列表复制"><a href="#列表复制" class="headerlink" title="列表复制"></a>列表复制</h3><p><code>copy()</code>方法可以复制列表的元素，赋值给新的变量，但是不是同一个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = lst1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(lst1 == lst2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(lst1 <span class="keyword">is</span> lst2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="小练习01"><a href="#小练习01" class="headerlink" title="小练习01"></a>小练习01</h3><p>已知代码如下，问：</p><ul><li>lst1 == lst2结果是什么</li><li>如何比较lst1和lst2的内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1 = list(range(<span class="number">4</span>))</span><br><span class="line">lst2 = list(range(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><ul><li>如果再执行以下语句，是否发生列表复制的过程？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst1 = lst2</span><br></pre></td></tr></table></figure><ul><li>如果再执行以下语句，求输出结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">print(lst2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><hr><p>答：</p><ul><li><code>lst1 == lst2</code>，返回<code>True</code>，因为在Python中，双等号是依次比较列表元素是否相同</li><li>我们可以通过<code>id(lst1)</code>、<code>id(lst2)</code>来分别获取两个列表的相对内存地址，比较其是否为相同对象；或者直接使用<code>lst1 is lst2</code>来进行比较；注意，列表不可求<code>hash()</code></li><li>不存在列表复制，而是指向的内存地址的更改</li><li>输出99，因为此时，<code>lst1</code>和<code>lst2</code>已经指向相同内存，为同一对象</li></ul><h3 id="小练习02"><a href="#小练习02" class="headerlink" title="小练习02"></a>小练习02</h3><h4 id="问"><a href="#问" class="headerlink" title="问"></a>问</h4><p>已知如下代码，请写出输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">55</span>, <span class="number">88</span>, <span class="number">99</span>], <span class="number">4</span>]</span><br><span class="line">lst2 = lst1.copy()</span><br><span class="line"></span><br><span class="line">lst2[<span class="number">1</span>] = <span class="number">22</span></span><br><span class="line">lst2[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">555</span></span><br><span class="line"></span><br><span class="line">print(lst1[<span class="number">1</span>])</span><br><span class="line">print(lst1[<span class="number">3</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><hr><h4 id="答"><a href="#答" class="headerlink" title="答"></a>答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">555</span></span><br></pre></td></tr></table></figure><h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h4><p>我们都知道，<code>copy()</code>方法是复制列表中的元素，所以乍一看下，<code>lst1</code>的子列表中的元素不应该跟随<code>lst2</code>的子列表元素一起更改。但是，由于<code>lst1</code>中的子列表是引用类型，当执行<code>copy()`</code>lst1<code>操作的时候，并不会将子列表中的元素也一起拷贝，而是拷贝了子列表的内存地址，这被称作</code>浅拷贝`</p><p>浅拷贝：</p><blockquote><p>只拷贝父对象，不会拷贝对象的内部的子对象</p></blockquote><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>使用<em>深拷贝</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">55</span>, <span class="number">88</span>, <span class="number">99</span>], <span class="number">4</span>]</span><br><span class="line">lst2 = copy.deepcopy(lst1)</span><br><span class="line"></span><br><span class="line">lst2[<span class="number">1</span>] = <span class="number">22</span></span><br><span class="line">lst2[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">555</span></span><br><span class="line"></span><br><span class="line">print(lst1[<span class="number">1</span>])</span><br><span class="line">print(lst1[<span class="number">3</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字符串切割小练习</title>
      <link href="/2018/06/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
      <url>/2018/06/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2%E5%B0%8F%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>题：</p><p>对以下字符串进行处理，删除所有的<code>空白符</code>和<code>\t</code>，并返回新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"cwow   uv   j w oiowu  \tcowjcw\tovbub  \t covxoq jcocn"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>析：</p><p>在这里如果使用<code>split(&quot; &quot;)</code>这样的方法，无法去除<code>\t</code>；</p><p>而如果使用<code>split(&quot; \t&quot;)</code>这样的方法，仅能去除<code>空格</code>和<code>\t</code>相连的情况</p><p>因此，在这里<code>split()</code>函数不需要接收任何参数，默认删除所有<code>空格</code>和<code>\t</code></p><p>最后使用<code>join()</code>函数，功能：用一个字符串连接列表中各个元素，组成新的字符串</p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"cwow   uv   j w oiowu  \tcowjcw\tovbub  \t covxoq jcocn"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = a.split()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp = <span class="string">""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp.join(result)</span><br><span class="line"><span class="string">'cwowuvjwoiowucowjcwovbubcovxoqjcocn'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python轻松交换两个变量的值</title>
      <link href="/2018/06/28/Python%E8%BD%BB%E6%9D%BE%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
      <url>/2018/06/28/Python%E8%BD%BB%E6%9D%BE%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>现在假设：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>如果需要交换这两个变量的值得话，我们一般会想到的方法是采用引入一个<code>中间变量</code>的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = a</span><br><span class="line">a = b</span><br><span class="line">b = c</span><br></pre></td></tr></table></figure><p>那么有没有更加简单，不需要引入第三方变量的方法呢？<br><a id="more"></a></p><p>答案自然有，这里介绍两种，一种是语言无关的方法，各种程序设计语言都可以使用；另一种方法则是基于Python的语法糖实现，更为简单，好记！</p><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>此方法不局限于加减法，乘除法等其他运算皆可</p></blockquote><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有用的搜索引擎工具</title>
      <link href="/2018/06/25/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/06/25/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>学会更好地使用搜索引擎，大大提高使用搜索引擎的效率。推荐使用Google搜索引擎（部分功能仅对Google生效）。</p><h4 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h4><p><code>intitle</code>：在<code>title</code>标签中</p><p><code>inurl</code>：在URL字串当中</p><p><code>filetype</code>：明确文件类型</p><p><code>site</code>：规定站点范围</p><a id="more"></a><h4 id="日常类工具"><a href="#日常类工具" class="headerlink" title="日常类工具"></a>日常类工具</h4><p>天气：weather 城市名</p><p>汇率：货币一 in 货币二</p><p>行程/航程：城市一 to 城市二</p><p>倒数计时器：set timer 数字 seconds/minutes/hours</p><h4 id="学术"><a href="#学术" class="headerlink" title="学术"></a>学术</h4><p>绘制函数图像：graph 函数</p>]]></content>
      
      <categories>
          
          <category> 技巧分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习05——字符串操作</title>
      <link href="/2018/06/23/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A005%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/23/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A005%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍两部分内容：</p><ol><li><a href="#字符串与数">字符串与数</a></li><li><a href="#字符串的常见操作">字符串的常见操作</a></li></ol><h4 id="字符串与数："><a href="#字符串与数：" class="headerlink" title="字符串与数："></a><span id="字符串与数">字符串与数</span>：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">str(a) <span class="comment"># 数转字符串</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">"100"</span></span><br><span class="line">int(b) <span class="comment"># 字符串转数</span></span><br></pre></td></tr></table></figure><p>求字符串长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"1234"</span></span><br><span class="line">len(a)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Python字符串拼接的两种方式：</p><p>方式一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"123"</span></span><br><span class="line">b = <span class="string">"456"</span></span><br><span class="line">c = <span class="string">"&lt;"</span> + a + b + <span class="string">"&gt;"</span></span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"123"</span></span><br><span class="line">b = <span class="string">"456"</span></span><br><span class="line">c = <span class="string">"&lt;%s&gt;"</span>%(a + b)</span><br></pre></td></tr></table></figure><p>通过字符串下标获取字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"abcde"</span></span><br><span class="line">print(a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>字符串的切片（包头不包尾）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abcdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>: <span class="number">5</span>]</span><br><span class="line">cde</span><br></pre></td></tr></table></figure><p>字符串的切片——从第三个取到倒数第二个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abcdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>: <span class="number">-1</span>]</span><br><span class="line">cdef</span><br></pre></td></tr></table></figure><p>字符串的切片——从第三个取到最后一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abcdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>: ]</span><br><span class="line">cdefg</span><br></pre></td></tr></table></figure><p>切片的步长——取下列字符串第二个字符到倒数第二个字符，间隔1个字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"123456789"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>: <span class="number">-1</span>: <span class="number">2</span>]</span><br><span class="line"><span class="number">2468</span></span><br></pre></td></tr></table></figure><p>字符串的逆序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"123456789"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>: :<span class="number">-1</span>]</span><br><span class="line"><span class="number">987654321</span></span><br></pre></td></tr></table></figure><p>字符串的逆序——简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"123456789"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[: :<span class="number">-1</span>]</span><br><span class="line"><span class="number">987654321</span></span><br></pre></td></tr></table></figure><h4 id="字符串的常见操作："><a href="#字符串的常见操作：" class="headerlink" title="字符串的常见操作："></a><span id="字符串的常见操作">字符串的常见操作</span>：</h4><p><strong>find()函数</strong>（查找 <strong>首次</strong>出现位置的下标）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr = <span class="string">"hello world！"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr.find(<span class="string">"o"</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>rfind()函数</strong>（查找 <strong>最后一次</strong>出现位置的下标）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr.rfind(<span class="string">"o"</span>)</span><br></pre></td></tr></table></figure><p><strong>index()函数</strong>（查找对应字符串 <strong>首次</strong>出现的索引，类似<code>find()</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr = <span class="string">"hello world！"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr.index(<span class="string">"o"</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>rindex()函数</strong>（查找对应字符串 <strong>最后一次</strong>出现位置的下标，类似<code>rfind()</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myStr.rindex(<span class="string">"o"</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示1：</strong>find()和index()函数都不仅仅可以对单个字符使用，还可以对字符串使用</p></blockquote><blockquote><p><strong>提示2：</strong>find()函数若查询无果，返回-1，而index()函数则会报错</p></blockquote><p><strong>count()函数</strong>（查找该字符串在另一字符串中的出现次数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"hello, just say hello"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"hello"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.count(b))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>replace()函数</strong>（替换）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"I love Java"</span></span><br><span class="line">b = <span class="string">"Python"</span></span><br><span class="line">a.replace(<span class="string">"Java"</span>, b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"I love Java, Java is my love"</span></span><br><span class="line">b = <span class="string">"Python"</span></span><br><span class="line">a.replace(<span class="string">"Java"</span>, b, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>替换并不会修改原字符串，只会把修改后的结果作为返回值返回，因为字符串不可变</p></blockquote><p><strong>split()函数</strong>（切割）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"I love China, China is my country"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.split(<span class="string">" "</span>))</span><br><span class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'China,'</span>, <span class="string">'China'</span>, <span class="string">'is'</span>, <span class="string">'my'</span>, <span class="string">'country'</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>字符串<code>split</code>缺省参数就是按照空白符分割，多个空格也视为是一个整体的空白字符，只会切割一次</p></blockquote><blockquote><p><strong>注意：</strong><code>split</code>可以接收第二个参数，代表切割次数</p></blockquote><p><strong>splitlines()函数</strong>（切割换行符）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1\r2'</span>.splitlines()</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>可以传入<code>True</code>代表保留行分割符，三种行分隔符都已经考虑进去了</p></blockquote><p><strong>capitalize()函数</strong>（把字符串第一个字符大写）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"i love china"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.capitalize()</span><br><span class="line"><span class="string">'I love china'</span></span><br></pre></td></tr></table></figure><p><strong>title()函数</strong>（把字符串每一个单词大写）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"i love china"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.title()</span><br><span class="line"><span class="string">'I Love China'</span></span><br></pre></td></tr></table></figure><p><strong>startswith()函数</strong> &amp; <strong>endwith()函数</strong>（判断字符串是否以某字符串开头或结尾）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"China is a beautiful country"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.startswith(<span class="string">"China"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"China is a beautiful country"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.endswith(<span class="string">"China"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>lower()函数</strong> &amp; <strong>upper()函数</strong>（将字符串中的小写/大写字母转换为大写/小写字母）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"AbCdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.upper())</span><br><span class="line">ABCDEFG</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"AbCdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.lower())</span><br><span class="line">abcdefg</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>大小写转换并不会修改原字符串，只会把修改后的结果作为返回值返回，因为字符串不可变</p></blockquote><p><strong>center()函数</strong>（将字符串用空格填充，字符串居中）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"如果大海能够，带走我的哀愁"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.center(<span class="number">50</span>)</span><br><span class="line"><span class="string">'                  如果大海能够，带走我的哀愁                   '</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>并不会修改a，而是以返回值的形式给出修改结果</p></blockquote><p><strong>ljust()函数</strong>（将字符串用空格填充，字符串居中）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"就让我用一生等待"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.ljust(<span class="number">50</span>)</span><br><span class="line"><span class="string">'就让我用一生等待                                          '</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>同上</p></blockquote><p><strong>rjust()函数</strong>（将字符串用空格填充，字符串居中）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"就让我用一生等待"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.rjust(<span class="number">50</span>)</span><br><span class="line"><span class="string">'                                          就让我用一生等待'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>同上</p></blockquote><p>以上三个函数也可以使用指定字符进行填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"就让我用一生等待"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.rjust(<span class="number">50</span>, <span class="string">"="</span>)</span><br><span class="line"><span class="string">'==========================================就让我用一生等待'</span></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">**lstrip()函数**（去除字符串左边的空白符）</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"     hello world    "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.lstrip()</span><br><span class="line"><span class="string">'hello world    '</span></span><br></pre></td></tr></table></figure><p><strong>rstrip()函数</strong>（去除字符串右边的空白符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"     hello world    "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.rstrip()</span><br><span class="line"><span class="string">'     hello world'</span></span><br></pre></td></tr></table></figure><p><strong>strip()函数</strong>（去除字符串左右两边的空白符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"     hello world    "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.strip()</span><br><span class="line"><span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p><strong>partition()函数</strong>（以给定字符串为中心，切割原字符串为三个元素的元组）</p><p>该函数也较为常用，需要和<code>split()</code>进行对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"hello world, I love use Java!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.partition(<span class="string">"love"</span>)</span><br><span class="line">(<span class="string">'hello world, I '</span>, <span class="string">'love'</span>, <span class="string">' use Java!'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>以从左到右第一个为准，rpartition()函数则相反，这里不再举例</p></blockquote><p><strong>splitlines()函数</strong>（以换行符<code>\n</code>作切割，返回列表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"窗前明月光，\n疑似地上霜。\n举头望明月，\n低头思故乡。"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.splitlines()</span><br><span class="line">[<span class="string">'窗前明月光，'</span>, <span class="string">'疑似地上霜。'</span>, <span class="string">'举头望明月，'</span>, <span class="string">'低头思故乡。'</span>]</span><br></pre></td></tr></table></figure><p><strong>isalpha()函数</strong>（判断字符串内容是否是字母）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abc"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.isalpha()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><strong>isdigit()函数</strong>（判断字符串内容是否是数字）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"1a2"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.isdigit()</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>isalnum()函数</strong>（判断字符串内容是否仅由数字和字母组成）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"1a2"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.isalnum()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>函数名alnum意为：alpha前两个字母 + num</p></blockquote><p><strong>isspace()函数</strong>（判断字符串内容是否是纯空格组成）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"  1"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.isspace()</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>join()函数</strong>（用一个字符串连接列表中各个元素，组成新的字符串）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">","</span>, <span class="string">"I"</span>, <span class="string">"love"</span>, <span class="string">"Java"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">" "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.join(a)</span><br><span class="line"><span class="string">'hello world , I love Java'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习04——循环</title>
      <link href="/2018/06/23/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A004%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF/"/>
      <url>/2018/06/23/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A004%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>比如：打印1-10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">10</span>:</span><br><span class="line">    print(a)</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>这里补充一个Python使用<code>Print()</code>函数输出，实现不换行的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">5</span>:</span><br><span class="line">    print(a, end = <span class="string">""</span>)</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>小练习：</strong>使用Python的while循环打印99乘法表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">while</span> b &lt;= a:</span><br><span class="line">        print(<span class="string">"&#123;&#125; * &#123;&#125; = &#123;&#125;"</span>.format(b, a, a * b), end = <span class="string">"\t"</span>)</span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    print(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h4 id="for循环初见"><a href="#for循环初见" class="headerlink" title="for循环初见"></a>for循环初见</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Tom"</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> name:</span><br><span class="line">    print(temp)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MacOS设置input高度</title>
      <link href="/2018/06/23/MacOS%E8%AE%BE%E7%BD%AEinput%E9%AB%98%E5%BA%A6/"/>
      <url>/2018/06/23/MacOS%E8%AE%BE%E7%BD%AEinput%E9%AB%98%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>我们会发现在MacOS下，无论使用Safari还是其他浏览器，都不能修改input的高度。</p><p>这是因为Mac OS X系统下的Webkit内核对于表单样式有很强的控制，</p><p>所以如果需要自己定义的话，需要重置掉浏览器的默认设置，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-apperaence</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端Fix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习03——Python基础语法3</title>
      <link href="/2018/06/10/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A003%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/06/10/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A003%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>查看Python语言当中所有关键字的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">a - b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">a * b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂运算</span></span><br><span class="line">a ** b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">a / b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 地板除（去除小数部分）</span></span><br><span class="line">a // b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取模</span></span><br><span class="line">a % b</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>在Python当中，不止数值可以乘法，对字符串使用乘法可以起到复制的作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"Hello"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a * <span class="number">10</span></span><br><span class="line"><span class="string">'HelloHelloHelloHelloHelloHelloHelloHelloHelloHello'</span></span><br></pre></td></tr></table></figure><h4 id="print-输出的变量拼接"><a href="#print-输出的变量拼接" class="headerlink" title="print()输出的变量拼接"></a>print()输出的变量拼接</h4><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Tom"</span></span><br><span class="line">print(<span class="string">"your name is %s"</span>%name)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Tom"</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line">addr = <span class="string">"江苏南京"</span></span><br><span class="line">print(<span class="string">"my name is %s, I'm %d years old, my address is %s"</span>%(name, age, addr))</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>这里我们也可以不区分类型，若仅仅是输出变量内容，可以统一使用<code>%s</code></p></blockquote><p>方法三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Tom"</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">print(<span class="string">"my name is &#123;&#125;, I'm &#123;&#125; years old"</span>.format(name, age))</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>基本的比较运算符在这里不做过多的介绍，这里着重介绍一下<code>==</code>和不等于<code>!=</code>或<code>&lt;&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">print(a == b)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong><code>==</code>代表等于比较运算，而<code>=</code>仅代表赋值运算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">print(a != b)</span><br><span class="line">print(a &lt;&gt; b)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>不等于符号<code>&lt;&gt;</code>是Python2当中的，在Python3中不能使用</p></blockquote><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符包括<code>and</code>、<code>not</code>和<code>or</code><br><code>and</code>代表：与<br><code>or</code>代表：或<br><code>not</code>代表取反</p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    print(<span class="string">"a和b相等"</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt; b:</span><br><span class="line">    print(<span class="string">"a大于b"</span>)  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a小于b"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode001_两数之和</title>
      <link href="/2018/06/09/LeetCode001_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2018/06/09/LeetCode001_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      <content type="html"><![CDATA[<p>这是一个记录自己LeetCode算法刷题过程的新系列，以方便日后自己的复习，也能为广大网友朋友提供一些方便。<br>目前LeetCode在国内已经上线了中文版，所以这里我们采用中文版进行记录，这样容易更快理解题干，因为对于解决问题来说，第一步就是充分、正确的理解我们需要做什么。<br>不过我还是会保留英文的原题作为对照，毕竟多掌握一些英语也是很有好处的事情。</p><p><strong>本次要记录的题是LeetCode第001题：两数之和</strong></p><h4 id="题干："><a href="#题干：" class="headerlink" title="题干："></a>题干：</h4><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><a id="more"></a><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><p>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p><h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><p>最初我想到的解答是比较粗暴的双重循环，但是这样是比较低效的，因为他的时间复杂度是O(n^2)，然后经过网友提醒，使用了 <strong>哈希表</strong>的方式降低了算法复杂度。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 声明结果集</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(m.containsKey(temp))&#123;</span><br><span class="line">                result[<span class="number">0</span>] = m.get(temp);</span><br><span class="line">                result[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                m.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h4><p>在通常的<code>contains()</code>验证时，我们需要遍历整个list或数组，因此这里的双重for循环每一层循环的算法复杂度都是O(n)，而不一样的是，Map所使用的hash算法是O(1)的时间复杂度，因此我们可以省去本来的内层循环，算法的执行时间也就这样被降低了。</p><h4 id="最终成绩："><a href="#最终成绩：" class="headerlink" title="最终成绩："></a>最终成绩：</h4><p>这里是我跑这个算法的执行结果，仅供大家参考一下：</p><p><img src="https://SherlockGy.github.io/img/LeetCode001.jpg" alt="-c"></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法练习 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo本地搜索失效解决办法</title>
      <link href="/2018/06/09/Hexo%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/06/09/Hexo%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>起因：</strong><br>最近遇到一个非常奇怪的bug，那就是本来一直非常好用的Hexo博客的搜索功能突然失灵了， <strong>一直处于loading动画</strong>，这让我百思不得其解。<br>幸好，经过数小时的各种尝试后，问题已经解决了，这里记录一下解决的方法，帮助后来遇到该问题的同学。</p><p><img src="https://SherlockGy.github.io/img/hexoSearchError01.jpg" alt="-c"></p><a id="more"></a><p><strong>尝试：</strong><br>在尝试过更换浏览器、清空缓存、更换电脑、手机打开均无果之后，一度怀疑是配置文件设置的问题，经历数小时的检查，发现并非配置文件问题，同时受到该篇<a href="https://www.v2ex.com/amp/t/298727" target="_blank" rel="noopener">文章</a>的启发，才想起里查看Chrome的报错信息。</p><p>这里是问题解决后才截得图，但是不影响叙述问题的解决流程，这里大致说一下。</p><p><img src="https://SherlockGy.github.io/img/hexoSearchError02.jpg" alt="-c"></p><p><strong>解决：</strong></p><ol><li>首先通过Chrome浏览器的检查（审查元素）功能，记录一次鼠标点击<code>search</code>或<code>搜索</code>按钮时的请求与响应</li><li>然后点击<code>network</code>按钮，进入网络相关模块，并选择<code>all</code>，找到<code>search.xml</code>这一项</li><li>然后进入到如上图所示页面，如果这里有问题，或在<code>&lt;entry&gt;</code>标签前说明存在问题的文件，最简单的方法就是先将其移除</li></ol><p><strong>总结：</strong><br>该问题主要由于书写的<code>.md</code>文件中包含了一些奇怪的、不合法的字符，导致在解析这些内容时报解析异常错误。<br>该错误最具迷惑性的是http响应状态是 <strong>200</strong>，使人不会第一时间想到问题的源头，而去从配置文件入手，从而浪费大量时间</p><p>补充：出错的字符是一个退格键，在你最近的md文件中，使用正则表达式搜索 \x08 或者 \u0008就行。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 创建博客 </tag>
            
            <tag> 故障解决 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习02——Python基础语法2</title>
      <link href="/2018/06/05/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A002%E2%80%94%E2%80%94Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/06/05/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A002%E2%80%94%E2%80%94Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="（一）输入语法"><a href="#（一）输入语法" class="headerlink" title="（一）输入语法"></a>（一）输入语法</h4><p>在Python中，我们可以很简单地接收键盘输入的信息，从而实现用户输入的效果，方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">"请输入您的姓名："</span>)</span><br><span class="line">print(<span class="string">"您的名字是："</span> + name)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>字符串拼接仅限于两个（或多个）字符串，如果要将数字类型和字符串拼接，请接着阅读</p></blockquote><p>比如，下面计算年龄的代码就需要用到类型转换才可以正常拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"请输入您的年龄："</span>)</span><br><span class="line">print(<span class="string">"明年您是"</span> + str(int(age) + <span class="number">1</span>) + <span class="string">"岁"</span>)</span><br></pre></td></tr></table></figure><p>因为“age”作为接收的键盘信息，为字符串类型，不能与数字类型的“1”直接相加减，需要使用<code>int()</code>函数进行转换，而计算后的年龄为数字类型，不能与“明年您是”等字符串直接拼接，需要使用<code>str()</code>函数将数值转换为字符串<br><a id="more"></a></p><h4 id="（二）Python注释"><a href="#（二）Python注释" class="headerlink" title="（二）Python注释"></a>（二）Python注释</h4><p>我们在书写代码的同时，思路也在脑中运转，这时的我们是清晰得知道每一句代码的意义，以及自己要做什么的。而当我们两个星期以后再来回顾或者修改这些代码时，就需要先花费时间阅读代码，然后才能搞清楚代码的具体逻辑了，更不用谈让别人来阅读我们的代码，所要花费的阅读时间了。</p><p>因此，我们需要学会在代码当中添加注释来使代码更加清晰、明了。</p><p>在Python当中有多种注释方式，这里将一一展示。</p><p>单行注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印“Hello World”</span></span><br><span class="line">print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>这里仅仅为了演示，实际上在正式代码当中，应当尽量使代码本身的表达力更强，减少这样没有意义的注释。在这里我们的代码语言已经足够直观到可以直接理解其含义了。因此实际使用注释时，注释应当尽量用来解释逻辑关系</p></blockquote><p>多行注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用一对三引号，</span></span><br><span class="line"><span class="string">就能实现多行注释。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">多行注释可以是单引号</span></span><br><span class="line"><span class="string">也可以使用双引号。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="（三）文件信息"><a href="#（三）文件信息" class="headerlink" title="（三）文件信息"></a>（三）文件信息</h4><p>既然我们已经学会使用注释了，那么这里就介绍一下我们正常Python代码的头文件信息。<br>我们在编写Python代码时，可以直接在编辑器内书写，但是加上头信息可以使我们的程序更加规范、不易出错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">script to process files</span></span><br><span class="line"><span class="string">@Version : 1.0</span></span><br><span class="line"><span class="string">@Author  : SherlockGy</span></span><br><span class="line"><span class="string">@File    : HelloWorld.py</span></span><br><span class="line"><span class="string">@Software: PyCharm</span></span><br><span class="line"><span class="string">@Time    : 2018/4/4 下午2:28</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>这样的写法可以调用系统环境变量当中配置的python解释器，并且遵循了pep8编码规范。如果我们环境变量当中没有配置python路径，也可以直接显式配置python解释器的位置，不过还是建议使用前者。<br>直接配置python解释器的方法如下（博主电脑中python解释器路径）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br></pre></td></tr></table></figure><h4 id="（四）数据类型"><a href="#（四）数据类型" class="headerlink" title="（四）数据类型"></a>（四）数据类型</h4><p><strong>（1）整数</strong></p><p>在Python3当中，整数类型没有上下限，而是决定于系统的内存大小，这里不同于Java语言的int类型和long类型拥有大小限制。<br>在Python当中，所有整数类型，无论大小，都属于<code>int</code>类型，所有的浮点数无论大小，都属于<code>float</code>类型。我们可以通过<code>type()</code>函数获取其类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">12121212121212121212121212121212912012901920192019209102910290192019</span></span><br><span class="line">   ...: <span class="number">21920192012012</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">int</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1.2121212121212121212121212121</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">float</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>Python当中的整数运算永远是精确运算，而浮点数运算可能存在误差</p></blockquote><p><strong>（2）字符串</strong></p><p>之前其实已经介绍过字符串与字符串的拼接，这里就介绍一下字符串的转义吧。在Python中存在一些包含特殊含义的字符串，如<code>\t</code>表示制表符，<code>\n</code>表示换行符，<code>\</code>本身表示转义符。</p><blockquote><p><strong>提示：</strong>‘\r’是Mac当中的回车；’\n’是Unix系统中的换行；在这两者中，都可以实现<strong>回到行首</strong>，从下一行开始的效果。<br>而’\r\n’是Windows系统当中的，先回车，在换行。在Windows中，只回车只会回到行首，不会换行，接着输入就会逐渐替换这一行；只换行会让光标移动到下一行的同样位置，不会回到行首。<br>不过在现在的高级编程语言当中，统一使用<strong>\n</strong>即可。</p></blockquote><p>比如我们需要得到字符串<code>\n</code>，由于其存在特殊含义，并不能作为正常字符串输出，需要转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\\n"</span>)</span><br></pre></td></tr></table></figure><p>而要得到<code>\</code>也需要对它进行转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\\"</span>)</span><br></pre></td></tr></table></figure><p>而要得到<code>\\</code>就需要对每个<code>\</code>进行分别转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\\\\"</span>)</span><br></pre></td></tr></table></figure><p>这样的书写方法非常没有可读性，且容易出错，因此在Python当中还有一种处理方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r"不管是'\t'还是'\r'或者'\n'甚至是'\\'我都可以输出啦"</span>)</span><br></pre></td></tr></table></figure><p>这个<code>r</code>代表该字符串默认不使用转义。</p><p>Python中字符串实现多行打印不一定使用<code>\n</code>，也可以使用这样的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'''床前明月光，</span></span><br><span class="line"><span class="string">疑似地上霜。</span></span><br><span class="line"><span class="string">举头望明月，</span></span><br><span class="line"><span class="string">低头思故乡。</span></span><br><span class="line"><span class="string">'''</span>)</span><br></pre></td></tr></table></figure><p><strong>（3）布尔类型</strong></p><p>Python中布尔值分别写作<code>True</code>和<code>False</code>，运算符包括<code>and</code>，<code>or</code>，<code>not</code>。我们必须注意其书写方法，尤其注意大小写。</p><blockquote><p><strong>提示：</strong>在Python中，True == 1，False == 0</p></blockquote><p><strong>（4）空值</strong></p><p>空值在Python当中表示为<code>None</code>，None和0不同，0是一个普通数字，None为特殊类型，表示空</p><p>未完待续…</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建博客——实现文章阅读全文</title>
      <link href="/2018/06/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/"/>
      <url>/2018/06/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</url>
      <content type="html"><![CDATA[<p>我们在搭建好博客后，肯定是第一时间写一篇文章测试一下啦！但是细心的你一定会发现一个问题，那就是——主页为什么会展示每一篇文章的所有内容？而不是首页只展示文章的部分内容，再提供一个<strong>阅读全文</strong>的按钮呢？</p><p>本篇博客就是帮助各个同学实现阅读全文的功能，同时根据自己的使用经验给出意见和建议。要实现阅读全文，目前存在两种方法，我们会一个个讨论，评价其优缺点的。</p><a id="more"></a><h4 id="方法一：配置文件设置"><a href="#方法一：配置文件设置" class="headerlink" title="方法一：配置文件设置"></a>方法一：配置文件设置</h4><p>首先我们需要找到Hexo所使用主题的主配置文件<strong>_config.yml</strong>，注意此处不是Hexo的主配置文件，而是主题的。博主所使用的是NexT主题，因此在此以此为例。</p><p><img src="https://SherlockGy.github.io/img/hexoExcerpt.jpg" alt="-c"></p><p>方法一是搜索此处的<strong>auto_excerpt</strong>，将enable改为<strong>true</strong>，就自动可以对每一篇文章进行分割了，length属性就是定义显示的字符数量。</p><p>但是不得不说，很不建议使用此方法，主要原因是：</p><ol><li>作者不能灵活控制显示内容，只能固定遵循字数设置</li><li>会丢失Markdown语法的格式，只显示纯文本</li></ol><p>对！没错！Markdown的格式会全部丢失，所以整个首页的博客预览会非常难看。而主题作者推荐的做法也写的非常明显了，就是在图片中红框当中的内容。</p><h4 id="方法二：手动分割文章"><a href="#方法二：手动分割文章" class="headerlink" title="方法二：手动分割文章"></a>方法二：手动分割文章</h4><p>在文章当中需要分割的位置手动插入以下语句即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure><p>效果还是很不错的，如图所示：</p><p><img src="https://SherlockGy.github.io/img/hexoExcerpt02.jpg" alt="-c"></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 创建博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建博客——实现主页分页</title>
      <link href="/2018/06/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E5%88%86%E9%A1%B5/"/>
      <url>/2018/06/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%B8%BB%E9%A1%B5%E5%88%86%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>我们在搭建完Hexo + Github pages的博客后，会发现他的主页会默认显示很多的文章（默认10篇），而我们也许需要自定义分页进行管理主页博客的显示数量。因此，本教程教会大家，如何设置主页的文章显示数量</p><a id="more"></a><ol><li>首先我们找到Hexo的<strong>根</strong>配置文件<strong>_config.yml</strong>，注意不是主题的配置文件。</li><li>然后按照下面图片中的内容搜索：per_page，在图片中对应位置修改数字即可</li></ol><p><img src="https://SherlockGy.github.io/img/hexoPerPage01.jpg" alt="-c"></p><p>之后我们就可以在我们的博客主页看到分页的效果啦！</p><p><img src="https://SherlockGy.github.io/img/hexoPerPage02.jpg" alt="-c"></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 创建博客 </tag>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python知识学习01——Python基础语法</title>
      <link href="/2018/06/03/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A001%E2%80%94%E2%80%94Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/06/03/Python%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A001%E2%80%94%E2%80%94Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Python是一款非常简单易学的计算机高级编程语言，他拥有强类型、动态性等特性，适合进行web开发、网络爬虫、数据分析、游戏开发、人工智能等多种多样的工作。</p><p>在web开发方面，国内的豆瓣、知乎就是采用的Python，游戏开发方面，网易最近出品的很多手游皆是基于Python，在数据分析、人工智能方面Python更是难以多得的一把好手，可以说，现在不学Python，更待何时？<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527969602067&amp;di=410b428d9feca7894d6c8dc259c1a186&amp;imgtype=0&amp;src=http%3A%2F%2Ffile.elecfans.com%2Fweb1%2FM00%2F4E%2FF8%2Fo4YBAFrOzpaAFtW5AAHSOg7ixiQ409.png" alt="-c"></p><p><img src="https://SherlockGy.github.io/img/Python01_1.jpg" alt="-c"></p><a id="more"></a><h4 id="（一）第一个Python程序"><a href="#（一）第一个Python程序" class="headerlink" title="（一）第一个Python程序"></a>（一）第一个Python程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Python并不强制需要分号结尾，因为Python使用缩进的方式进行代码片段的控制，这一点在稍后还会提到</p></blockquote><h4 id="（二）给Python文件可执行能力"><a href="#（二）给Python文件可执行能力" class="headerlink" title="（二）给Python文件可执行能力"></a>（二）给Python文件可执行能力</h4><p>该功能仅限Linux、Mac操作系统</p><p>首先要在文件头加上这一句话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>这句话的内容是取决于您Python命令所安装的位置的，可以使用<strong>which python3</strong>命令查找到安装位置</p></blockquote><p>然后，通过命令给hello.py以执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod a+x hello.py</span></span><br></pre></td></tr></table></figure><p>这样，在该Python文件目录下，执行该文件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./test.py</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>./代表当前目录</p></blockquote><h4 id="（三）简单结果输出"><a href="#（三）简单结果输出" class="headerlink" title="（三）简单结果输出"></a>（三）简单结果输出</h4><p>使用print函数输出文本到控制台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'我是要被输出到控制台的文本'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>该处作者故意使用单引号包裹文本，事实上Python字符串不仅可以支持上文的双引号，同样支持单引号表示字符串，但是要注意无论使用哪一种，需要前后统一</p></blockquote><p>使用print函数输出数字到控制台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">12345678</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>当需要表达输出数字时，则不需要使用引号包裹，因为一旦使用了引号，这就成为了一个字符串，也就不能进行数值计算了，关于数值计算我们后面还会提到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">100</span> + <span class="number">200</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>对于这种计算表达式，输出到控制台上的并不会是：<br><br>100 + 200<br><br>因为这里我们输出的不是字符串，而是数值计算的结果</p></blockquote><h4 id="（四）简单字符串拼接"><a href="#（四）简单字符串拼接" class="headerlink" title="（四）简单字符串拼接"></a>（四）简单字符串拼接</h4><p>与Java等其他很多语言不同，Python字符串拼接更为简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Tom"</span>, <span class="string">"is"</span>, <span class="string">"a"</span>, <span class="string">"good"</span>, <span class="string">"boy"</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，在该语句当中，我们并未在双引号当中键入任何空格字符，但是该语句的输出结果却是这样的：</p><p>Tom is a good boy</p><p>这也就是说，这种字符串拼接的方式，不但会拼接各个字符串，还会将各个字符串使用空格符号分隔开来，只要我们稍加发挥，就可以写出这样的代码来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'100 + 200 ='</span>, <span class="number">100</span> + <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>我们注意到这行代码的前半段采用了字符串输出的方式，后半段则是数值计算，所以输出的结果自然是：</p><p>100 + 200 = 300</p><blockquote><p><strong>提示：</strong>读者们可以思考一下，字符串和数值拼接，会不会出现类型不相同的问题呢？学过Java语言的都知道在Java当中数值类型会自动转换为字符串类型，然而在Python语言当中会一直这样吗？这里先存个疑，后面还会再说到</p></blockquote><p>未完待续…</p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用来必力为博客添加评论系统</title>
      <link href="/2018/06/01/%E4%BD%BF%E7%94%A8%E6%9D%A5%E5%BF%85%E5%8A%9B%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/06/01/%E4%BD%BF%E7%94%A8%E6%9D%A5%E5%BF%85%E5%8A%9B%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>我们的个人博客往往需要一个评论系统。目前，多说，网易云跟贴的服务都已经下线了，因此在这里推荐的是使用一款韩国的产品：来必力。</p><p><img src="https://SherlockGy.github.io/img/LaiBiLi2.jpg" alt="-c"></p><a id="more"></a><p>首先我们需要点击<a href="https://livere.com/" target="_blank" rel="noopener">这里</a>来注册一个账号。</p><blockquote><p><strong>提示：</strong>Chrome（谷歌）浏览器或者其他Chrome内核浏览器可能在验证码阶段出现输入框不显示问题，本环节建议使用<strong>火狐</strong>浏览器进行操作。</p></blockquote><p>注册成功之后点击最上方的安装，即可获取uid，复制该uid代码。</p><p><img src="https://SherlockGy.github.io/img/LaiBiLi3.jpg" alt="-c"></p><p><img src="https://SherlockGy.github.io/img/LaiBiLi.jpg" alt="-c"></p><p>打开NexT主题的配置文件<strong>_config.yml</strong>，搜索livere_uid，将livere_uid前面的#号去掉（即：取消注释），然后将我们刚刚复制的uid填写到livere_uid的后面就可以啦。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 创建博客 </tag>
            
            <tag> 来必力 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows系统如何关闭Java升级提示</title>
      <link href="/2018/05/31/Windows%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%ADJava%E5%8D%87%E7%BA%A7%E6%8F%90%E7%A4%BA/"/>
      <url>/2018/05/31/Windows%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%ADJava%E5%8D%87%E7%BA%A7%E6%8F%90%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>我们有很多同学都是使用Windows系统初学Java的，为了适应当前市场环境的需求，我们几乎不会使用最新版的Java，而依然是Java 1.7、Java 1.8，但是有些同学会发现，Java会总是提示升级，这不是我们希望<br>的。<br>因此，本文将介绍如何关闭Java的升级提示。<br><a id="more"></a><br>想要关闭其实也非常简单，首先请打开控制面板：<br><img src="https://SherlockGy.github.io/img/windows_Java_noUpdate.png" alt="-c"><br>点击Java按钮，然后进入以下界面：<br><img src="https://SherlockGy.github.io/img/windows_Java_noUpdate2.png" alt="-c"><br>只要在这里关闭自动检查更新，并且应用-确定，就OK啦~ </p>]]></content>
      
      <categories>
          
          <category> 程序人生 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用GitHub创建个人博客（Mac篇）</title>
      <link href="/2018/05/29/%E5%88%A9%E7%94%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Mac%E7%AF%87%EF%BC%89/"/>
      <url>/2018/05/29/%E5%88%A9%E7%94%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Mac%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="一、安装Node-JS"><a href="#一、安装Node-JS" class="headerlink" title="一、安装Node.JS"></a>一、安装Node.JS</h2><h2 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h2><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><h3 id="（一）安装"><a href="#（一）安装" class="headerlink" title="（一）安装"></a>（一）安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g hexo</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：加上sudo以使用管理员权限</p></blockquote><a id="more"></a><h3 id="（二）初始化"><a href="#（二）初始化" class="headerlink" title="（二）初始化"></a>（二）初始化</h3><p>选定一个存放Blog的目录，在该目录下执行下面的初始化命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>同样在该目录下，安装npm，请执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="（三）生成静态资源"><a href="#（三）生成静态资源" class="headerlink" title="（三）生成静态资源"></a>（三）生成静态资源</h3><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g 生成public静态资源</span><br><span class="line">hexo s 启动本地服务端</span><br></pre></td></tr></table></figure><p>在浏览器访问：<strong><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></strong>，即可看到博客首页。</p><h2 id="四、关联GitHub"><a href="#四、关联GitHub" class="headerlink" title="四、关联GitHub"></a>四、关联GitHub</h2><h3 id="（一）注册一个GitHub账号"><a href="#（一）注册一个GitHub账号" class="headerlink" title="（一）注册一个GitHub账号"></a>（一）注册一个GitHub账号</h3><h3 id="（二）创建一个仓库"><a href="#（二）创建一个仓库" class="headerlink" title="（二）创建一个仓库"></a>（二）创建一个仓库</h3><h3 id="（三）修改配置文件"><a href="#（三）修改配置文件" class="headerlink" title="（三）修改配置文件"></a>（三）修改配置文件</h3><h3 id="（四）生成SSH-Key"><a href="#（四）生成SSH-Key" class="headerlink" title="（四）生成SSH Key"></a>（四）生成SSH Key</h3><h4 id="（1）生成新的SSH-key：（引号内的邮箱替换为自己的邮箱"><a href="#（1）生成新的SSH-key：（引号内的邮箱替换为自己的邮箱" class="headerlink" title="（1）生成新的SSH key：（引号内的邮箱替换为自己的邮箱"></a>（1）生成新的SSH key：（引号内的邮箱替换为自己的邮箱</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen  -t   rsa   -C  "邮箱"</span><br></pre></td></tr></table></figure><h4 id="（2）运行后结果如下："><a href="#（2）运行后结果如下：" class="headerlink" title="（2）运行后结果如下："></a>（2）运行后结果如下：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"swordsmanye@gmail.com"</span></span></span><br><span class="line">Generating public/private rsa key pair.  </span><br><span class="line">Enter file in which to save the key </span><br><span class="line">(/Users/your_user_directory/.ssh/id_rsa):    按回车键  </span><br><span class="line">Enter passphrase  (empty for no passphrase):   输入密码，也可以直接回车</span><br><span class="line">Enter same passphrase again:   再次输入密码</span><br></pre></td></tr></table></figure><h4 id="（3）拷贝key"><a href="#（3）拷贝key" class="headerlink" title="（3）拷贝key"></a>（3）拷贝key</h4><p>在<code>~/.ssh</code>目录下就能看到生成的文件，在文件目录下会得到 <code>id_rsa</code>和 <code>id_rsa.pub</code>两个文件，<code>id_rsa.pub</code>文件里存放的就是我们要使用的key.</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><h3 id="（一）输入hexo-d后出现：-ERROR-Deployer-not-found-git"><a href="#（一）输入hexo-d后出现：-ERROR-Deployer-not-found-git" class="headerlink" title="（一）输入hexo d后出现： ERROR Deployer not found: git"></a>（一）输入hexo d后出现： ERROR Deployer not found: git</h3><p>执行以下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="（二）解决提交到github报错-Run-config-Please-tell-me-who-you-are"><a href="#（二）解决提交到github报错-Run-config-Please-tell-me-who-you-are" class="headerlink" title="（二）解决提交到github报错 Run config : Please tell me who you are"></a>（二）解决提交到github报错 Run config : Please tell me who you are</h3><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email "你的邮箱"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "你的名字"</span><br></pre></td></tr></table></figure><blockquote><p>注意：”双引号”前有空格</p></blockquote><h3 id="（三）更换主题"><a href="#（三）更换主题" class="headerlink" title="（三）更换主题"></a>（三）更换主题</h3><p>（1） 进入themes目录<br>（2） 执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git</span><br></pre></td></tr></table></figure><p>（3） 编辑_config.yml文件<br>修改theme: hexo-theme-yilia</p><blockquote><p>补充：注意冒号后面有空格</p></blockquote><p>（4） 在hexo-theme-yilia目录下执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>依次执行<code>hexo g</code>，<code>hexo d</code>命令，完成修改</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 创建博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TestBlog</title>
      <link href="/2018/05/28/TestBlog/"/>
      <url>/2018/05/28/TestBlog/</url>
      <content type="html"><![CDATA[<h1 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试!"></a>这是一个测试!</h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/28/hello-world/"/>
      <url>/2018/05/28/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
